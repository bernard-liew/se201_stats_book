[["index.html", "A Simple Cookbook for Wrangling and Visualization Chapter 1 Preface 1.1 Why is R so great? 1.2 Why R is like a relationship 1.3 3 things students get wrong 1.4 R resources", " A Simple Cookbook for Wrangling and Visualization Bernard Liew 2021-09-10 Chapter 1 Preface The purpose of this book is to help you CLEAN your data and produce AMAZING graphics EASILY but not fast at first. What this book is This books is intended to be a cookbook based approach. It has problems and it has solutions. Recipes are provided from which you can edit the necessary portions for your needs. What this book is not This book does not cover any one topic in extensive detail. If you are interested in conducting analyses or creating plots not covered in the book, Im sure youll find the answer with a quick Google search! 1.1 Why is R so great? R is 100% free and as a result, has a huge support community. Unlike SPSS and even Excel, R is, and always will be completely free. This doesnt just help your wallet - it means that a huge community of R programmers who will constantly develop and distribute new R functionality and packages at a speed that leaves all those other packages in the dust! If you ever have a question about how to implement something in R, a quick Google search will lead you to your answer virtually every single time. R is incredibly versatile. You can use R to do everything from calculating simple summary statistics, to performing complex simulations to creating gorgeous plots. If you can imagine an analytical task, you can almost certainly implement it in R. Analyses conducted in R are transparent, easily shareable, and reproducible. If you ask an SPSS user how they conducted a specific analyses, they will either A) Not remember, B) Try (nervously) to construct an analysis procedure on the spot that makes sense - which may or may not correspond to what they actually did months or years ago, or C) Ask you what you are doing in their house. I used to primarily use SPSS, so I speak from experience on this. If you ask an R user (who uses good programming techniques!) how they conducted an analysis, they should always be able to show you the exact code they used. Of course, this doesnt mean that they used the appropriate analysis or interpreted it correctly, but with all the original code, any problems should be completely transparent! 1.2 Why R is like a relationship Yes, R is very much like a relationship. Like relationships, there are two major truths to R programming: Figure 1.1: R will become both your best friend and your worst nightmare. The bad times will make the good times oh so much sweeter. There is nothing more frustrating than when your code does not work There is nothing more satisfying than when your code does work! Anything worth doing, from losing weight to getting a degree, takes time. Learning R is no different. Especially if this is your first experience programming, you are going to experience a lot of headaches when you get started. You will run into error after error and pound your fists against the table screaming: WHY ISNT MY CODE WORKING?!?!? There must be something wrong with this stupid software!!! You will spend hours trying to find a bug in your code, only to find that - frustratingly enough, you had had an extra space or missed a comma somewhere. Youll then wonder why you ever decided to learn R when (::sigh::) SPSS was so nice and easy. Figure 1.2: When you first meet R, it will look so fugly that youll wonder if this is all some kind of sick joke. But trust me, once you learn how to talk to it, and clean it up a bit, all your friends will be crazy jealous. Trust me, as you gain more programming experience, youll experience fewer and fewer bugs (though theyll never go away completely). Once you get over the initial barriers, youll find yourself conducting analyses much, much faster than you ever did before. 1.3 3 things students get wrong Based on teaching the previous cohort, there are 3 common errors students make, which will result in errors, leaving many scratching their head, feeling frustrated. Be aware of these errors, and do not fall into the trap. 1.3.1 Wrong method of launching software This is the biggest source of frustration.Once you have created a project folder for your work, ONLY launch the software by clicking on the blue cube symbol as seen in Figure 1.3. In chapter 4, I will explain why you should launch the software in this manner. Figure 1.3: This is the symbol to press to launch the software in your asssignment. 1.3.2 Not running code from START Looking at the figure 1.4 below, say you ran the code from line 3 to line 20, when you close the software - maybe leaving the work partially done for the day, the next time you launch the software, it has no recollection of where you stopped. You need to run the software from the first line of the code to where you stopped, and then continue with your work. Figure 1.4: If you restart your analysis, the software does not have a memory of where you stopped previously . 1.3.3 Typographical errors More than 50% of the student queries in the past, centered around the issue of typographical errors. Given that humans can (and do) communicate without perfect grammar, punctuation, and spelling, you WILL naturally assume (wrongly) that computers can ignore mistakes as we can. Computers cannot distinguish what is or is not supposed to be there. For example, if you create a table and call it mytable, but then tried to do some calculations on my table, and error will appear, such as Error: unexpected symbol in \"my table\". This error means the computer cannot find my table, only because it does not EXIST. 1.4 R resources 1.4.1 R books There are many, many excellent (non-pirate) books on R, some of which are available online for free. Here are some that I highly recommend: Book Description R for Data Science by Garrett Grolemund and Hadley Wickham The best book to learn the latest tools for elegantly doing data science. R Graphics Cookbook by Winston Chang Is indispensible for creating graphics. R Cookbook by James (JD) Long and Paul Teetor Is a useful bag of tips and tricks to get started with R . "],["get-started.html", "Chapter 2 Getting Started 2.1 Installing Base-R and RStudio 2.2 The four RStudio Windows 2.3 Reading and writing Code 2.4 Debugging 2.5 Learning check", " Chapter 2 Getting Started 2.1 Installing Base-R and RStudio To use R, well need to download 2 software: Base-R, and RStudio. Base-R is the basic software which contains the R programming language. RStudio is a software that makes programming easier. In everyday parlance, R is the engine and RStudio is the cars frame. Just like you can transfer an engine to different car frames, you can use R using other platforms. But I will use RStudio. Of course, they are totally free and open source. 2.1.1 Check for version updates R and RStudio have been around for several years  however, they are constantly being updated with new features and bug-fixes. At the time that I am writing this sentence (2021-09-10), the latest version of Base-R is 4.1.1, and the latest version of RStudio is 1.4.1717. Figure 2.1: R logo To install Base-R, click on one of the following links and follow the instructions. Operating System Link Windows http://cran.r-project.org/bin/windows/base/ Mac http://cran.r-project.org/bin/macosx/ Once youve installed base-R on your computer, try opening it. When you do you should see a screen like the one in Figure 2.2 (this is the Windows version). As you can see, base R is very much bare-bones software. Its kind of the equivalent of a simple text editor that comes with your computer. Figure 2.2: Here is how the base R application looks. While you can use the base R application alone, most people I know use RStudio  software that helps you to write and use R code more efficiently! Figure 2.3: RStudio logo While you can do pretty much everything you want within base-R, youll find that most people these days do their R programming in an application called RStudio. RStudio is a graphical user interface (GUI)-like interface for R that makes programming in R a bit easier. In fact, once youve installed RStudio, youll likely never need to open the base R application again. To download and install RStudio (around 40mb), click on the link below: https://rstudio.com/products/rstudio/download/#download/ 2.2 The four RStudio Windows Lets go ahead and boot up RStudio and see how she looks! When you open RStudio, youll see the following four windows (also called panes) shown in in Figure 2.4. However, your windows might be in a different order that those in Figure 2.4. Ignore for a fact that my screen shows black and yours shows up as white. This is like the wall paper on your computer, it is what makes my eyes at ease. Figure 2.4: The four panes of RStudio. Now, lets see what each window does in detail. 2.2.1 Source - Your notepad for code Figure 2.5: The Source contains all of your individual R scripts. The code wont be evaluated until you send it to the Console. The source pane is where you create and edit R Scripts - your collections of code. Dont worry, R scripts are just text files with the .R extension. When you open RStudio, it will automatically start a new Untitled script. Before you start typing in an untitled R script, you should always save the file under a new file name (like, StatsAnal.R). That way, if something on your computer crashes while youre working, R will have your code waiting for you when you re-open RStudio. Youll notice that when youre typing code in a script in the Source panel, R wont actually evaluate the code as you type. To have R actually evaluate your code, you need to first send the code to the Console (well talk about this in the next section). There are many ways to send your code from the Source to the console. The slowest way is to copy and paste. A faster way is to highlight the code you wish to evaluate and clicking on the Run button on the top right of the Source. Alternatively, you can use the hot-key Command + Return on Mac, or Control + Enter on PC to send all highlighted code to the console. 2.2.2 Console: Rs Heart Figure 2.6: The console the calculation heart of R. All of your code will (eventually) go through here. The console is the heart of R. Here is where R actually evaluates code. At the beginning of the console youll see the character . This is a prompt that tells you that R is ready for new code. You can type code directly into the console after the prompt and get an immediate response. For example, if you type 1+1 into the console and press enter, youll see that R immediately gives an output of 2. 1+1 ## [1] 2 Try calculating 1+1 by typing the code directly into the console - then press Enter. You should see the result [1] 2. Dont worry about the [1] for now, well get to that later. For now, were happy if we just see the 2. Then, type the same code into the Source, and then send the code to the Console by highlighting the code and clicking the Run button on the top right hand corner of the Source window. Alternatively, you can use the hot-key Command + Return on Mac or Control + Enter on Windows. Tip: Try to write most of your code in a document in the Source. Only type directly into the Console to do quick calculations like you are using a calculator. So as you can see, you can execute code either by running it from the Source or by typing it directly into the Console. However, 99% most of the time, you should be using the Source rather than the Console. The reason for this is straightforward: If you type code into the console, it wont be saved (though you can look back on your command History). And if you make a mistake in typing code into the console, youd have to re-type everything all over again. Instead, its better to write all your code in the Source. When you are ready to execute some code, you can then send Run it to the console. 2.2.3 Environment / History Figure 2.7: The environment panel shows you all the objects you have defined in your current workspace. The Environment tab of this panel shows you the names of all the data objects (like vectors, matrices, and dataframes) that youve defined in your current R session. You can also see information like the number of observations and rows in data objects. The tab also has a few clickable actions like Import Dataset which will open a graphical user interface (GUI) for importing data into R. The History tab of this panel simply shows you a history of all the code youve previously evaluated in the Console. As you get more comfortable with R, you might find the Environment / History panel useful. But for now you can just ignore it. If you want to declutter your screen, you can even just minimize the window by clicking the minimize button on the top right of the panel. 2.2.4 Files / Plots / Packages / Help The Files / Plots / Packages / Help panel shows you lots of helpful information. Lets go through each tab in detail: Files - The files panel gives you access to the file directory on your hard drive. One nice feature of the Files panel is that you can use it to set your working directory. Well talk about working directories in more detail soon. Plots - The Plots panel (no big surprise), shows all your plots. There are buttons for opening the plot in a separate window and exporting the plot as a pdf or jpeg (though you can also do this with code using the pdf() or jpeg() functions.) Lets see how plots are displayed in the Plots panel. Run the code on the right to display a histogram of the weights of chickens stored in the ChickWeight dataset. When you do, you should see a plot similar to the one in Figure 2.8 show up in the Plots panel. hist(x = ChickWeight$weight, main = &quot;Chicken Weights&quot;, xlab = &quot;Weight&quot;, col = &quot;skyblue&quot;, border = &quot;white&quot;) Figure 2.8: The plot panel contains all of your plots, like this histogram of the distribution of chicken weights. Packages - Shows a list of all the R packages installed on your harddrive and indicates whether or not they are currently loaded. Packages that are loaded in the current session are checked while those that are installed but not yet loaded are unchecked. Well discuss packages in more detail in the next section. Help - Help menu for R functions. You can either type the name of a function in the search window, or use the code to search for a function with the name ?hist # How does the histogram function work? ?t.test # What about a t-test? 2.3 Reading and writing Code 2.3.1 Code Chunks In this book, R code is (almost) always presented in a separate gray box like this one: # A code chunk # Define a vector a as the integers from 1 to 5 a &lt;- 1:5 # Print a a ## [1] 1 2 3 4 5 # What is the mean of a? mean(a) ## [1] 3 This is called a code chunk. You should always be able to copy and paste code chunks directly into R. If you copy a chunk and it does not work for you, it is most likely because the code refers to a package, function, or object that I defined in a previous chunk. If so, read back and look for a previous chunk that contains the missing definition. 2.3.2 Comments with # Lines that begin with # are comments. If you evaluate any code that starts with #, R will just ignore that line. In this book, comments will be either be literal comments that I write directly to explain code, or they will be output generated automatically from R. For example, in the code chunk below, you see lines starting with ##. These are the output from the previous line(s) of code. When you run the code yourself, you should see the same output in your console. # This is a comment I wrote 1 + 2 ## [1] 3 # The line above (## [1] 3) is the output from the previous code that has been &#39;commented out&#39; 2.3.3 Element numbers in output [1] The output you see will often start with one or more number(s) in brackets such as [1]. This is just a visual way of telling you where the numbers occur in the output. For example, in the code below, I will print a long vector containing the multiples of 2 from 0 to 100: seq(from = 0, to = 100, by = 2) ## [1] 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 ## [20] 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 ## [39] 76 78 80 82 84 86 88 90 92 94 96 98 100 As you can see, the first line of the output starts with ## [1], and the next two lines start with [18] and [35]. This is just telling you that 0 is the [1]st element, 34 is the [18]th element, and 68 is the [35]th element. Sometimes this information will be helpful, but most of the time you can just ignore it. 2.4 Debugging When you are programming, you will always, and I do mean always, make errors (also called bugs) in your code. You might misspell a function, include an extra comma, or some daysR just wont want to work with you (again, see section Why R is like a Relationship). Debugging will always be a challenge. However, over time youll learn which bugs are the most common and get faster and faster at finding and correcting them. Here are the most common bugs youll run into as you start your R journey. 2.4.1 R is not ready (&gt;) Another very common problem occurs when R does not seem to be responding to your code. That is, you might run some code like mean(x) expecting some output, but instead, nothing happens. This can be very frustrating because, rather than getting an error, just nothing happens at all. The most common reason for this is because R isnt ready for new code, instead, it is waiting for you to finish code you started earlier, but never properly finished. Think about it this way, R can be in one of two states: it is either Ready (&gt;) for new code, or it is Waiting (+) for you to finish old code. To see which state R is in, all you have to do is look at the symbol on the console. The &gt; symbol means that R is Ready for new code  this is usually what you want to see. The + symbol means that R is Waiting for you to (properly) finish code you started before. If you see the + symbol, then no matter how much new code you write, R wont actually evaluate it until you finish the code you started before. Thankfully there is an easy solution to this problem (See Figure 2.9): Just hit the escape key on your keyboard. This will cancel Rs waiting state and make it Ready! Figure 2.9: To turn R from a Waiting (+) state to a Ready (&gt;) state, just hit Escape. 2.4.2 Misspelled object or function If you spell an object or function incorrectly, youll receive an error like Error: could not find function or Error: object 'x' not found. In the code below, Ill try to take the mean of a vector data, but I will misspell the function mean() data &lt;- c(1, 4, 3, 2, 1) # Misspelled function: should be mean(x), not meeen(x) meeen(data) Error: could not find function meeen Now, Ill misspell the object data as dta: # Misspelled object: should be data, not dta mean(dta) Error: object dta not found R is case-sensitive, so if you dont use the correct capitalization youll receive an error. In the code below, Ill use Mean() instead of the correct version mean() # Capitalization is wrong: should be mean(), not Mean() Mean(data) Error: could not find function Mean Here is the correct version where both the object data and function mean() are correctly spelled: # Correct: both the object and function are correctly spelled mean(data) ## [1] 2.2 2.4.3 Punctuation problems Another common error is having bad coding punctuation. By that, I mean having an extra space, missing a comma, or using a comma (,) instead of a period (.). In the code below, Ill try to create a vector using periods instead of commas: # Wrong: Using periods (.) instead of commas (,) mean(c(1. 4. 2)) Error: unexpected numeric constant in mean(c(1. 4. Because I used periods instead of commas, I get the above error. Here is the correct version # Correct mean(c(1, 4, 2)) ## [1] 2.333333 If you include an extra space in the middle of the name of an object or function, youll receive an error. In the code below, Ill accidentally write Chick Weight instead of ChickWeight: # Wrong: Extra space in the ChickWeight object name head(Chick Weight) Error: unexpected symbol in head(Chick Weight Because I had an extra space in the object name, I get the above error. Here is the correction: # Correct: head(ChickWeight) 2.5 Learning check Download Base-R software and RStudio software. Open up RStudio software and type the following code below into the console. What does it give you? 1+10 Look at the code below. What will R return after the third line? Make a prediction, then test the code yourself. a &lt;- 10 a + 10 a "],["basics.html", "Chapter 3 The Basics Download and load packages 3.1 The command-line (Console) 3.2 Writing R scripts in an editor 3.3 A brief style guide: Commenting and spacing 3.4 Objects and functions", " Chapter 3 The Basics Download and load packages Packages are like your iphone apps. The iphone comes with some basic functionality, e.g. weather-app. If you wanted more, you have to download. Subsequent chapters are going to start with this code chunk. This is only needed if you are running one chapter independent from others. Notice how I am using the package called pacman. This is a package manager, which loads any package you typed into it, and if it is not available, download it automatically from CRAN and load it. if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;) pacman::p_load(tidyverse, # All purpose wrangling for dataframes yarrr) In this chapter, well go over the basics of the R language and the RStudio programming environment. 3.1 The command-line (Console) Figure 3.1: Yep. R is really just a fancy calculator. R code, on its own, is just text. You can write R code in a new script within R or RStudio, or in any text editor. However, just writing the code wont do the whole job  in order for your code to be executed (aka, interpreted) you need to send it to the Console. Figure 3.2: You can always type code directly into the command line to get an immediate response. In R, the command-line interpreter starts with the &gt; symbol. This is called the prompt. Why is it called the prompt? Well, its prompting you to feed it with some R code. The fastest way to have R evaluate code is to type your R code directly into the command-line interpreter. For example, if you type 1+1 into the interpreter and hit enter youll see the following 1+1 ## [1] 2 As you can see, R returned the (thankfully correct) value of 2. Youll notice that the console also returns the text [1]. This is just telling you you the index of the value next to it. Dont worry about this for now, it will make more sense later. As you can see, R can, thankfully, do basic calculations. In fact, at its heart, R is technically just a fancy calculator. But thats like saying Michael Jordan is just a fancy ball bouncer. It (and they), are much more than that. 3.2 Writing R scripts in an editor There are certainly many cases where it makes sense to type code directly into the console. For example, to open a help menu for a new function with the ? command, to take a quick look at a dataset with the head() function, or to do simple calculations like 1+1, you should type directly into the console. However, the problem with writing all your code in the console is that nothing that you write will be saved. So if you make an error, or want to make a change to some earlier code, you have to type it all over again. Not very efficient. For this (and many more reasons), youll should write any important code that you want to save as an R script. An R script is just a bunch of R code in a single file. You can write an R script in any text editor, but you should save it with the .R suffix to make it clear that it contains R code.} in an editor. In RStudio, youll write your R code in the Source window. To start writing a new R script in RStudio, click File  New File  R Script. When you open a new script, youll see a blank page waiting for you to write as much R code as youd like. In Figure 3.3, I have a new script called examplescript with a few random calculations. Figure 3.3: Heres how a new script looks in the editor window on RStudio. The code you type wont be executed until you send it to the console. You can have several R scripts open in the source window in separate tabs (like I have above). 3.2.1 Send code from a source to the console Figure 3.4: To evaluate code from the source, highlight it and run it. When you type code into an R script, youll notice that, unlike typing code into the Console, nothing happens. In order for R to interpret the code, you need to send it from the Editor to the Console. There are a few ways to do this, but the most common way I use is: Highlight the code you want to run (with your mouse or by holding Shift), then use the Alt+Enter shortcut. 3.3 A brief style guide: Commenting and spacing Like all programming languages, R isnt just meant to be read by a computer, its also meant to be read by other humans. For this reason, its important that your code looks nice and is understandable to other people and your future self. To keep things brief, I wont provide a complete style guide  instead Ill focus on the two most critical aspects of good style: commenting and spacing. Figure 3.5: As Stan discovered in season six of South Park, your future self is a lazy, possibly intoxicated moron. So do your future self a favor and make your code look nice. Also maybe go for a run once in a while. 3.3.1 Commenting code with the # (pound) sign Comments are completely ignored by R and are just there for whomever is reading the code. You can use comments to explain what a certain line of code is doing, or just to visually separate meaningful chunks of code from each other. Comments in R are designated by a # (pound) sign. Whenever R encounters a # sign, it will ignore all the code after the # sign on that line. Additionally, in most coding editors (like RStudio) the editor will display comments in a separate color than standard R code to remind you that its a comment: Here is an example of a short script that is nicely commented. Try to make your scripts look like this! # Author: Pirate Jack # Title: My nicely commented R Script # Date: None today :( # Step 1: Load the yarrr package library(yarrr) # Step 2: See the column names in the movies dataset names(movies) # Step 3: Calculations # What percent of movies are sequels? mean(movies$sequel, na.rm = T) # How much did Pirate&#39;s of the Caribbean: On Stranger Tides make? movies$revenue.all[movies$name == &#39;Pirates of the Caribbean: On Stranger Tides&#39;] I cannot stress enough how important it is to comment your code! Trust me, even if you dont plan on sharing your code with anyone else, keep in mind that your future self will be reading it in the future. 3.3.2 Spacing Howwouldyouliketoreadabookiftherewerenospacesbetweenwords? Imguessingyouwouldnt. Soeverytimeyouwritecodewithoutproperspacing,rememberthissentence. Commenting isnt the only way to make your code legible. Its important to make appropriate use of spaces and line breaks. For example, I include spaces between arithmetic operators (like =, + and -) and after commas (which well get to later). For example, look at the following code: Figure 3.6: Dont make your code look like what a sick Triceratops with diarrhea left behind for Jeff Goldblum. # Shitty looking code a&lt;-(100+3)-2 mean(c(a/100,642564624.34)) t.test(formula=revenue.all~sequel,data=movies) plot(x=movies$budget,y=movies$dvd.usa,main=&quot;myplot&quot;) That code looks like shit. Dont write code like above. It wiil make your eyes hurt. Now, lets use some liberal amounts of commenting and spacing to make it look less shitty. # Some meaningless calculations. Not important a &lt;- (100 + 3) - 2 mean(c(a / 100, 642564624.34)) # t.test comparing revenue of sequels v non-sequels t.test(formula = revenue.all ~ sequel, data = movies) # A scatterplot of budget and dvd revenue. # Hard to see a relationship plot(x = movies$budget, y = movies$dvd.usa, main = &quot;myplot&quot;) See how much better that second chunk of code looks? Not only do the comments tell us the purpose behind the code, but there are spaces and line-breaks separating distinct elements. 3.4 Objects and functions To understand how R works, you need to know that R revolves around two things: objects and functions. Almost everything in R is either an object or a function. In the following code chunk, Ill define a simple object called tattoos using a function c(): # 1: Create a vector object called tattoos tattoos &lt;- c(4, 67, 23, 4, 10, 35) # 2: Apply the mean() function to the tattoos object mean(tattoos) ## [1] 23.83333 What is an object? An object is a thing  like a number, a dataset, a summary statistic like a mean or standard deviation, or a statistical test. Objects come in many different shapes and sizes in R. There are simple objects like the single digit 25 which represent single numbers, vectors (like our tattoos object above) which represent several numbers, more complex objects like dataframes which represent tables of data, and even more complex objects like hypothesis tests or regression which contain all sorts of statistical information. What is a function? A function is a procedure that typically takes one or more objects as arguments (aka, inputs), does something with those objects, then returns a new object. For example, the mean() function we used above takes a vector object, like tattoos, of numeric data as an argument, calculates the arithmetic mean of those data, then returns a single number (a scalar) as a result.A great thing about R is that you can easily create your own functions that do whatever you want  but we will not get to that in the book. Thankfully, R has hundreds (thousands?) of built-in functions that perform most of the basic analysis tasks you can think of. 99% of the time you are using R, you will do the following: 1) Define objects. 2) Apply functions to those objects. 3) Repeat!. Seriously, thats about it. However, as youll soon learn, the hard part is knowing how to define objects they way you want them, and knowing which function(s) will accomplish the task you want for your objects. 3.4.1 Numbers versus characters For the most part, objects in R come in one of two flavors: numeric and character. It is very important to keep these two separate as certain functions, like mean(), and max() will only work for numeric objects, while functions like grep() and strtrim() only work for character objects. A numeric object is just a number like 1, 10 or 3.14. You dont have to do anything special to create a numeric object, just type it like you were using a calculator. # These are all numeric objects 1 10 3.14 A character object is a name like \"Madisen\", \"Brian\", or \"University of Konstanz\". To specify a character object, you need to include quotation marks \"\" around the text. # These are all character objects &quot;Madisen&quot; &quot;Brian&quot; &quot;10&quot; If you try to perform a function or operation meant for a numeric object on a character object (and vice-versa), R will yell at you. For example, heres what happens when I try to take the mean of the two character objects \"1\" and \"10\": # This will return an error because the arguments are not numeric! mean(c(&quot;1&quot;, &quot;10&quot;)) Warning message: argument is not numeric or logical, returning NA If I make sure that the arguments are numeric (by not including the quotation marks), I wont receive the error: # This is ok! mean(c(1, 10)) ## [1] 5.5 3.4.2 Creating new objects with &lt;- By now you know that you can use R to do simple calculations. But to really take advantage of R, you need to know how to create and manipulate objects. All of the data, analyses, and even plots, you use and create are, or can be, saved as objects in R. To create new objects in R, you need to do object assignment. Object assignment is our way of storing information, such as a number or a statistical test, into something we can easily refer to later. This is a pretty big deal. Object assignment allows us to store data objects under relevant names which we can then use to slice and dice specific data objects anytime wed like to. To do an assignment, we use the almighty &lt;- operator called assign To assign something to a new object (or to change an existing object), use the notation object &lt;- ..., where object is the new (or updated) object, and ... is whatever you want to store in object. Lets start by creating a very simple object called a and assigning the value of 100 to it: Good object names strike a balance between being easy to type (i.e.; short names) and interpret. If you have several datasets, its probably not a good idea to name them a, b, c because youll forget which is which. However, using long names like March2015Group1OnlyFemales will give you carpal tunnel syndrome. # Create a new object called a with a value of 100 a &lt;- 100 Once you run this code, youll notice that R doesnt tell you anything. However, as long as you didnt type something wrong, R should now have a new object called a which contains the number 100. If you want to see the value, you need to call the object by just executing its name. This will print the value of the object to the console: # Print the object a a ## [1] 100 Now, R will print the value of a (in this case 100) to the console. If you try to evaluate an object that is not yet defined, R will return an error. For example, lets try to print the object b which we havent yet defined: b Error: object b not found As you can see, R yelled at us because the object b hasnt been defined yet. Once youve defined an object, you can combine it with other objects using basic arithmetic. Lets create objects a and b and play around with them. a &lt;- 1 b &lt;- 100 # What is a + b? a + b ## [1] 101 # Assign a + b to a new object (c) c &lt;- a + b # What is c? c ## [1] 101 3.4.2.1 To change an object, you must assign it again! Normally I try to avoid excessive emphasis, but because this next sentence is so important, I have to just go for it. Here it goes To change an object, you assign it again! No matter what you do with an object, if you dont assign it again, it wont change. For example, lets say you have an object z with a value of 0. Youd like to add 1 to z in order to make it 1. To do this, you might want to just enter z + 1  but that wont do the job. Heres what happens if you dont assign it again: z &lt;- 0 z + 1 ## [1] 1 Ok! Now lets see the value of z z ## [1] 0 Damn! As you can see, the value of z is still 0! What went wrong? Oh yeah To change an object, you must assign it again! The problem is that when we wrote z + 1 on the second line, R thought we just wanted it to calculate and print the value of z + 1, without storing the result as a new z object. If we want to actually update the value of z, we need to reassign the result back to z as follows: z &lt;- 0 z &lt;- z + 1 # Now I&#39;m REALLY changing z z ## [1] 1 Phew, z is now 1. Because we used assignment, z has been updated. About freaking time. 3.4.3 How to name objects You can create object names using any combination of letters and a few special characters (like . and _). Here are some valid object names # Valid object names group.mean &lt;- 10.21 my.age &lt;- 32 FavoritePirate &lt;- &quot;Jack Sparrow&quot; sum.1.to.5 &lt;- 1 + 2 + 3 + 4 + 5 All the object names above are perfectly valid. Now, lets look at some examples of invalid object names. These object names are all invalid because they either contain spaces, start with numbers, or have invalid characters: # Invalid object names! famale ages &lt;- 50 # spaces 5experiment &lt;- 50 # starts with a number a! &lt;- 50 # has an invalid character If you try running the code above in R, you will receive a warning message starting with Error: unexpected symbol . Anytime you see this warning in R, it almost always means that you have a naming error of some kind. 3.4.3.1 R is case-sensitive! Figure 3.7: Like a text message, you should probably watch your use of capitalization in R. Like English, R is case-sensitive  it R treats capital letters differently from lower-case letters. For example, the four following objects Plunder, plunder and PLUNDER are totally different objects in R: # These are all different objects Plunder &lt;- 1 plunder &lt;- 100 PLUNDER &lt;- 5 I try to avoid using too many capital letters in object names because they require me to hold the shift key. This may sound silly, but youd be surprised how much easier it is to type mydata than MyData 100 times. "],["NavigatingTheSoftware.html", "Chapter 4 Navigating the Software Introduction Download and load packages 4.1 Getting and Setting the Working Directory 4.2 Creating a new Rstudio project 4.3 Installing Packages 4.4 Learning check", " Chapter 4 Navigating the Software Introduction Both R and RStudio are big chunks of software, first and foremost. You will inevitably spend time doing what one does with any big piece of software: configuring it, customizing it, updating it, and fitting it into your computing environment. This chapter will help you perform those tasks. There is nothing here about numerics, statistics, or graphics. This is all about dealing with R and RStudio as software. Download and load packages if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;) pacman::p_load(tidyverse) # All purpose wrangling for dataframes Figure 4.1: Your workspace  all the objects, functions, and delicious glue youve defined in your current session. 4.1 Getting and Setting the Working Directory Your computer is a maze of folders and files. Outside of R, when you want to open a specific file, you probably open up an explorer window that allows you to visually search through the folders on your computer. Or, maybe you select recent files, or type the name of the file in a search box to let your computer do the searching for you. While this system usually works for non-programming tasks, it is a no-go for R. Why? Well, the main problem is that all of these methods require you to visually scan your folders and move your mouse to select folders and files that match what you are looking for. When you are programming in R, you need to specify all steps in your analyses in a way that can be easily replicated by others and your future self. This means you cant just say: Find this one file I emailed to myself a week ago or Look for a file that looks something like experimentAversion3.txt. Instead, you need to be able to write R code that tells R exactly where to find critical files  either on your computer or on the web. To make this job easier, R uses working directories. A working directory is where everything starts and ends. Your working directory is important because it is the default location for all file input and outputincluding reading and writing data files, opening and saving script files, and saving your workspace image. Many of you who previously worked with SPSS using the point-click interface, would often wonder 1) where did my saved SPSS file went? or 2) where did my exported image go to? This confusion arises because often you do not know what was the default working directory. Rather than relying on the default, we specify it explicitly so we know where to store our files, and where this software goes looking for files. The easiest and recommended way to set your working directory is using RStudio projects. For every piece of work/assessment, you create a project. The project is a folder that can live anywhere on your computer - your desktop, downloads folder, documents folder, etc. In this folder, it contains everything from your files to be analyzed, codes, and exported files and images. Everything is self-contained, there is no confusion. 4.2 Creating a new Rstudio project You want to create a new RStudio project to keep all your files related to a specific project. Click File  New Project as in Figure 4.2. ** I ALWAYS use this approach, please use it too** Figure 4.2: Selecting New Project This will open the New Project dialog box and allow you to choose which type of project you would like to create, as shown in Figure 4.3. Figure 4.3: New Project dialog Projects are a powerful concept thats specific to RStudio. They help you by doing the following: Setting your working directory to the project directory. Preserving window state in RStudio so when you return to a project your windows are all as you left them. This includes opening any files you had open when you last saved your project. Preserving RStudio project settings. To hold your project settings, RStudio creates a project file with an .Rproj extension in the project directory. If you open the project file in RStudio, it works like a shortcut for opening the project. In addition, RStudio creates a hidden directory named .Rproj.user to house temporary files related to your project. Any time youre working on something nontrivial in R we recommend creating an RStudio project. Projects help you stay organized and make your project workflow easier. 4.3 Installing Packages When you download and install R for the first time, you are installing the Base R software. Base R will contain most of the functions youll use on a daily basis like mean() and hist(). However, only functions written by the original authors of the R language will appear here. If you want to access data and code written by other people, youll need to install it as a package. An R package is simply a bunch of data, from functions, to help menus, to vignettes (examples), stored in one neat package. Figure 4.4: An R package is like a lightbulb. First you need to order it with install.packages(). Then, every time you want to use it, you need to turn it on with library() A package is like a light bulb. In order to use it, you first need to order it to your house (i.e.; your computer) by installing it. Once youve installed a package, you never need to install it again. However, every time you want to actually use the package, you need to turn it on by loading it. Heres how to do it. 4.3.1 Installing a new package Installing a package simply means downloading the package code onto your personal computer. There are two main ways to install new packages. The first, and most common, method is to download them from the Comprehensive R Archive Network (CRAN). CRAN is the central repository for R packages. To install a new R package from CRAN, you can simply run the code install.packages(\"name\"), where name is the name of the package. For example, to download the tidyverse package, which contains several functions we will use in this book, you should run the following: Figure 4.5: CRAN (Comprehensive R Archive Network) is the main source of R packages # Install the tidyverse package from CRAN # You only need to install a package once! install.packages(&quot;tidyverse&quot;) When you run install.packages(\"name\") R will download the package from CRAN. If everything works, you should see some information about where the package is being downloaded from, in addition to a progress bar. Figure 4.6: When you install a new package, youll see some random text like this you the download progress. You dont need to memorize this. Like ordering a light bulb, once youve installed a package on your computer you never need to install it again (unless you want to try to install a new version of the package). However, every time you want to use it, you need to turn it on by loading it. 4.3.2 Loading a package Once youve installed a package, its on your computer. However, just because its on your computer doesnt mean R is ready to use it. If you want to use something, like a function or dataset, from a package you always need to load the package in your R session first. Just like a light bulb, you need to turn it on to use it! To load a package, you use the library() function. For example, now that weve installed the tidyverse package, we can load it with library(\"tidyverse\"): # Load the tidyverse package so I can use it! # You have to load a package in every new R session! library(&quot;tidyverse&quot;) Now that youve loaded the tidyverse package, you can use any of its functions! Let us create a very simple histogram plot using a default dataset found within R. Dont worry about the specifics of the code below, youll learn more about how all this works later. For now, just run the code and marvel at your plot in TWO LINES. # Make a pirateplot using the pirateplot() function # from the yarrr package! ggplot(mtcars,aes(x=mpg)) + geom_histogram(binwidth=5) 4.3.3 A simple approach to package For novices, the pacman package can be used. All you need to do is to type in the name of the package in the function pacman::p_load(). In the example below, I want pacman to load the package tidverse  notice how \"\" are not used. If tidverse is not found in your computer, pacman will download it first, than automatically load it. I will use this command from now on when loading packages. if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;) pacman::p_load(tidyverse) # All purpose wrangling for dataframes 4.4 Learning check Create a folder called se201 on your computer desktop. Create a new project inside the folder se201, click File  New Project  New Directory  New Project  Browse, search for se201 folder  under Directory name, type practice. Create a new R script, click File  New File  R Script. Save the new R script, click File  Save As. Save it inside the se201/practice folder. Use the file name practice_script. It will have the extension .R assigned to it automatically. Enter the code below, run it, to install and load the packages. if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;) pacman::p_load(tidyverse, # All purpose wrangling for dataframes openxlsx,# writing excel documents lubridate,# date-time tibbletime) # moving average for vo2 Close RStudio, reopen RStudio via the .Rproj symbol Figure 1.3. In the Files tab on the bottom right, you should see the script you created practice_script.R. Click on it to open and you should see the code you typed. Run the codes you typed above again. Download the solution to this learning check below. Click to download the solution "],["InputOuput.html", "Chapter 5 Input and Output Download and load packages 5.1 Dealing with Cannot Open File in Windows 5.2 Reading in Excel .xlsx data 5.3 Writing a Data Frame to Excel 5.4 Learning check", " Chapter 5 Input and Output Download and load packages if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;) pacman::p_load(tidyverse, # All purpose wrangling for dataframes openxlsx) # writing excel documents 5.1 Dealing with Cannot Open File in Windows You are running R on Windows, and you are using filenames such as C:\\data\\sample.xlsx. R says it cannot open the file, but you know the file does exist. The backslashes in the filepath are causing trouble. You can solve this problem in one of two ways: Change the backslashes, \\, to forward, /, slashes: \"C:/data/sample.txt\". Double the backslashes: \"C:\\\\data\\\\sample.txt\". When you open a file in R, you give the filename as a character string. Problems arise when the name contains backslashes (\\) because backslashes have a special meaning inside strings. Youll probably get something like this: samp &lt;- read.xlsx (&quot;data\\strength.xlsx&quot;) ## Error: &#39;\\s&#39; is an unrecognized escape in character string starting &quot;&quot;data\\s&quot; R escapes every character that follows a backslash and then removes the backslashes. That leaves a meaningless filepath, such as C:Datasample-data.csv in this example. The simple solution is to use forward slashes instead of backslashes. R leaves the forward slashes alone, and Windows treats them just like backslashes. Problem solved: samp &lt;- read.xlsx (&quot;data/strength.xlsx&quot;) An alternative solution is to double the backslashes, since R replaces two consecutive backslashes with a single backslash: samp &lt;- read.xlsx (&quot;data\\\\strength.xlsx&quot;) 5.2 Reading in Excel .xlsx data If you have a .xlsx file that you want to read into R, use the read.xlsx() function in the openxlsx package. Argument Description xlsxFile The documents file path relative to the working directory unless specified otherwise. For example xlsxFile = \"SubjectData.xlsx\" looks for the text file directly in the working directory, while xlsxFile = \"data/SubjectData.xlsx\" will look for the file in an existing folder called data inside the working directory.If the file is outside of your working directory, you can also specify a full file path (xlsxFile = \"C:/Users/bl19622/Box/myBox/Documents/teaching/se747_ResearchMeth/sample_book/data/SubjectData.xlsx\"). sheet The name of the excel sheet or the numerical index. This is useful if you have many sheets in one Excel workbook. If this is not specified, the function automatically reads in the first sheet in the Excel workbook. In my projects folder, I tend tend to have a habit of create a folder named data. This contains all my original data, that I do not want to touch!!! Lets test this function out by reading in an Excel file titled strength.xlsx. Since the file is located in a folder called data in my working directory, Ill use the file path xlsxFile = \"strength.xlsx\", and since the sheet I have is named \"data\", I will use sheet = \"data\": strn &lt;- read.xlsx (xlsxFile = &quot;data/strength.xlsx&quot;, sheet = &quot;data&quot;) 5.3 Writing a Data Frame to Excel You want to write an R data frame to an Excel file. Argument Description x The object you are trying to export and write into an Excel file, commonly a dataframe you modified. For example x = strn. sheetName If you want to name the sheet of the Excel workbook. file Specifying where you want to export the Excel sheet relative to the working directory, and how you want to name the sheet you exported. write.xlsx(x = strn, sheetName = &quot;strength&quot;, file = &quot;data/STRENGTH_write.xlsx&quot;) 5.4 Learning check You can download the 3 files for this learning check below: Click to download treadmill data Click to download the individual FMS data Click to download the group FMS data In your se201/practice folder, create another folder called data. Place the files downloaded inside the se201/practice/data folder. From your learning check in 4.4, open RStudio via the .Rproj symbol. In the Files tab on the bottom right, you should see the script you created practice_script.R. Click on it to open. Import the Excel file data/Athlete_1_treadmill.xlsx, and the sheet named raw and assign it to an object dat. See Recipe 5.2. Remember to add some comments to remind yourself what this line of code is trying to do. Save it. Import the Excel file data/Athlete_1_treadmill.xlsx, and the sheet named stage and assign it to an object dat_stage. See Recipe 5.2. Remember to add some comments to remind yourself what this line of code is trying to do. Save it. Import the Excel file data/Athlete_1_FMS.xlsx, and the sheet named Sheet1 and assign it to an object dat_fms. See Recipe 5.2. Remember to add some comments to remind yourself what this line of code is trying to do. Save it. Import the Excel file data/simFMS.xlsx, and the sheet named FMS and assign it to an object dat_fms_grp. See Recipe 5.2. Remember to add some comments to remind yourself what this line of code is trying to do. Save it. Download the solution to this learning check below. Click to download the solution "],["WRANGLE.html", "Chapter 6 Data manipulation Download and load packages Import data 6.1 Tidy data 6.2 Renaming variables 6.3 Selecting rows and columns 6.4 Convert characters to numeric 6.5 Convert characters to date and time 6.6 Split Numeric Variable into Categories 6.7 Gathering 6.8 Spreading 6.9 Rename values of a variable 6.10 Creating factors 6.11 Making a new variable 6.12 Filtering 6.13 Global summary 6.14 Group-by summary 6.15 Merge two tables together 6.16 Learning check", " Chapter 6 Data manipulation Download and load packages if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;) pacman::p_load(tidyverse, # All purpose wrangling for dataframes openxlsx,# writing excel documents lubridate,# date-time tibbletime) # moving average for vo2 Import data Lets load the 3 files from data folder into the workspace again. File one contains the FMS data, another the VO2 raw data from the treadmill test, and lastly the lactate data from the treadmill test. dat_fms &lt;- read.xlsx (xlsxFile = &quot;data/fms_pt3.xlsx&quot;, sheet = &quot;Sheet1&quot;) dat_fms_grp &lt;- read.xlsx (xlsxFile = &quot;data/simFMS.xlsx&quot;, sheet = &quot;FMS&quot;) dat_vo2 &lt;- read.xlsx (xlsxFile = &quot;data/treadmill_pt4.xlsx&quot;, sheet = &quot;raw&quot;) dat_vo2_stage &lt;- read.xlsx (xlsxFile = &quot;data/treadmill_pt4.xlsx&quot;, sheet = &quot;stage&quot;) Let us see the data 6.0.0.1 dat_fms table This is a table representing a single subjects FMS test scores task side score squat c 3 hurdle l 2 hurdle r 2 lunge l 3 lunge r 3 leg_raise l 2 leg_raise r 1 shd_mob l 1 shd_mob r 2 rot_stab l 2 rot_stab r 2 push_up c 1 6.0.0.2 dat_fms_grp This is a table representing a teams total FMS test score for each task id squat hurdle lunge shd_mob leg_raise push_up rot_stab athlete_a 2 2 2 3 3 3 2 athlete_b 2 2 3 2 1 3 2 athlete_c 2 2 3 2 1 1 2 athlete_d 2 2 3 2 3 2 1 athlete_e 2 2 2 3 1 1 2 athlete_f 2 2 2 2 2 2 2 athlete_g 2 2 3 3 3 1 2 athlete_h 3 2 3 2 2 3 2 athlete_i 3 2 2 2 2 1 2 athlete_j 1 2 3 2 2 3 2 athlete_k 3 2 2 2 2 3 2 athlete_l 2 2 2 3 3 2 2 athlete_m 1 2 2 3 2 3 2 athlete_n 2 2 2 2 1 3 2 athlete_o 3 2 3 2 3 3 2 athlete_p 2 3 2 2 3 1 2 athlete_q 3 2 3 3 2 3 2 athlete_r 2 2 3 2 1 2 2 athlete_s 2 2 2 3 2 1 2 athlete_t 2 2 3 2 1 3 2 athlete_u 2 2 3 2 2 3 2 athlete_v 3 2 2 2 3 3 2 athlete_w 3 2 3 3 2 3 2 athlete_x 2 2 2 2 1 1 2 6.0.0.3 dat_vo2 This is a table representing a single subjects raw VO2 results during incremental treadmill running Time BF VO2/kg RER VO2 VCO2 VE HR min 1/min ml/ min/kg ml/min ml/min L/min bpm 00:05 37 21.4 0.93 1371 1272 46 119 00:10 58 2.5 0.84 159 133 12 120 00:15 30 23.5 0.74 1506 1110 35 121 00:20 34 22.4 0.86 1437 1229 43 123 00:25 23 15.6 0.73 1004 735 22 124 00:30 27 30.5 0.76 1960 1489 48 124 00:35 39 23.3 0.73 1499 1092 38 124 00:40 34 29.6 0.75 1902 1427 49 124 00:45 26 31.9 0.8 2048 1641 53 124 00:50 27 29.4 0.8 1891 1519 49 125 00:55 34 28.9 0.79 1856 1465 47 126 01:00 32 29.9 0.8 1919 1526 49 126 01:05 31 29.9 0.79 1922 1513 46 124 01:10 24 33 0.84 2118 1779 56 126 01:15 42 29.9 0.8 1921 1543 50 126 01:20 33 31.7 0.8 2035 1638 51 124 01:25 24 32.1 0.82 2060 1692 50 125 01:30 28 32.9 0.82 2112 1731 53 126 01:35 28 33.700000000000003 0.83 2164 1795 52 130 01:40 24 33.4 0.87 2142 1863 57 128 01:45 31 31.1 0.85 1997 1694 52 129 01:50 21 34.5 0.88 2214 1945 58 130 01:55 37 32.700000000000003 0.84 2098 1761 55 131 02:00 28 34.700000000000003 0.85 2230 1905 58 131 02:05 33 34.299999999999997 0.87 2201 1904 61 132 02:10 30 28.3 0.87 1814 1579 51 133 02:15 29 32.6 0.89 2094 1861 57 133 02:20 32 35.4 0.86 2275 1961 60 133 02:25 30 33.5 0.88 2149 1889 58 133 02:30 28 33.9 0.9 2176 1962 60 134 02:35 24 33.700000000000003 0.93 2166 2013 63 134 02:40 34 17.5 0.88 1124 993 34 135 02:45 25 36.299999999999997 0.79 2332 1844 48 136 02:50 33 38 0.84 2439 2053 65 137 02:55 34 33.9 0.87 2179 1896 61 138 03:00 34 32.4 0.9 2077 1868 60 139 03:05 46 32.200000000000003 0.86 2069 1773 61 140 03:10 26 25.3 1 1625 1623 63 141 03:15 27 17 1.0900000000000001 1094 1198 49 145 03:20 27 15.2 1.1499999999999999 977 1122 47 148 03:25 27 15.8 1.18 1017 1196 49 151 03:30 24 12.1 1.1299999999999999 779 879 36 154 03:35 51 18.3 0.96 1175 1130 45 156 03:40 40 35.799999999999997 0.82 2299 1892 57 149 03:45 57 29.3 0.77 1883 1442 50 138 03:50 33 33 0.88 2118 1869 62 131 03:55 35 26.9 0.94 1727 1620 55 130 04:00 46 27.7 0.81 1776 1444 49 132 04:05 35 35 0.84 2245 1888 63 132 04:10 43 29.7 0.84 1906 1595 54 133 04:15 27 30.5 0.84 1961 1643 52 137 04:20 23 31.3 0.8 2012 1612 48 139 04:25 29 35.9 0.81 2306 1871 57 140 04:30 31 34 0.82 2181 1790 55 139 04:35 34 31.4 0.83 2018 1666 52 137 04:40 34 36.799999999999997 0.85 2363 1997 63 140 04:45 34 34.9 0.84 2240 1889 59 142 04:50 24 36 0.89 2314 2059 62 144 04:55 28 31.3 0.83 2007 1667 47 145 05:00 40 36.700000000000003 0.8 2354 1888 57 146 05:05 30 36.9 0.87 2369 2053 62 145 05:10 37 25 0.83 1603 1338 41 145 05:15 32 37.4 0.87 2399 2083 63 144 05:20 29 36.4 0.89 2338 2081 64 145 05:25 35 34.200000000000003 0.86 2193 1880 58 144 05:30 32 26.4 0.89 1696 1507 48 146 05:35 17 40 0.82 2571 2101 51 147 05:40 26 38.799999999999997 0.82 2491 2033 55 147 05:45 21 33.700000000000003 0.84 2163 1817 48 147 05:50 29 36.700000000000003 0.84 2356 1991 57 147 05:55 33 31.2 0.85 2005 1707 51 146 06:00 38 39.4 0.84 2530 2114 63 145 06:05 30 35.6 0.88 2288 2009 60 145 06:10 27 33.299999999999997 0.89 2135 1907 55 145 06:15 40 36.5 0.87 2344 2043 64 146 06:20 31 26 0.89 1672 1487 45 147 06:25 43 41.4 0.86 2661 2285 69 149 06:30 37 34.799999999999997 0.9 2233 2014 63 150 06:35 47 32.1 0.91 2063 1879 65 150 06:40 28 27.9 1.05 1791 1872 71 150 06:45 32 16 1.1499999999999999 1027 1180 52 156 06:50 30 16.399999999999999 1.27 1051 1334 60 159 06:55 32 10.3 1.2 662 795 38 163 07:00 26 17.5 1.1299999999999999 1125 1266 47 164 07:05 47 21.8 0.93 1403 1301 46 166 07:10 35 37.4 0.89 2404 2138 65 158 07:15 42 31.7 0.9 2037 1826 60 149 07:20 33 29.8 0.93 1912 1781 55 141 07:25 23 32 0.92 2054 1890 57 141 07:30 41 30.4 0.85 1955 1662 53 144 07:35 44 32.4 0.83 2081 1727 57 145 07:40 37 34.1 0.84 2192 1833 58 145 07:45 25 34 0.89 2183 1940 59 145 07:50 29 34.200000000000003 0.85 2198 1866 56 148 07:55 36 36.4 0.83 2336 1949 60 148 08:00 35 35.9 0.86 2303 1978 61 149 08:05 34 38.5 0.89 2471 2194 68 150 08:10 36 34.700000000000003 0.87 2229 1949 60 151 08:15 28 36.5 0.87 2346 2053 60 154 08:20 32 37.1 0.88 2382 2085 62 153 08:25 29 38.200000000000003 0.88 2452 2163 63 153 08:30 27 35 0.86 2246 1924 54 154 08:35 30 39.1 0.88 2513 2216 65 154 08:40 25 37.1 0.92 2380 2178 64 154 08:45 39 38.1 0.89 2444 2171 67 155 08:50 33 38.1 0.92 2448 2248 68 157 08:55 30 37.9 0.9 2436 2198 63 159 09:00 34 37.799999999999997 0.9 2426 2191 65 159 09:05 38 38.200000000000003 0.89 2455 2195 67 158 09:10 33 38.700000000000003 0.92 2482 2276 68 159 09:15 33 38.1 0.93 2448 2288 70 159 09:20 32 38 0.94 2441 2298 70 161 09:25 32 38.9 0.92 2496 2302 69 161 09:30 28 37.799999999999997 0.94 2427 2271 68 162 09:35 27 36.700000000000003 0.9 2356 2120 60 162 09:40 35 31.7 0.89 2033 1801 53 162 09:45 35 40.299999999999997 0.9 2587 2323 70 162 09:50 39 40 0.91 2571 2336 73 161 09:55 38 38 0.93 2439 2279 73 160 10:00 34 37.799999999999997 0.94 2425 2289 71 161 10:05 48 32.4 0.9 2079 1879 65 162 10:10 34 26.7 1.02 1716 1752 68 163 10:15 31 17 1.2 1094 1317 62 165 10:20 34 17.3 1.27 1111 1417 66 169 10:25 39 17 1.2 1092 1306 58 174 10:30 52 14.5 1.07 929 998 46 176 10:35 48 22.2 0.95 1425 1356 51 177 10:40 50 41.1 0.84 2636 2225 67 174 10:45 38 38.299999999999997 0.89 2461 2190 68 165 10:50 46 33.4 0.92 2146 1971 66 156 10:55 36 31.7 0.94 2036 1911 62 154 11:00 31 38 0.91 2441 2210 70 156 11:05 34 34.799999999999997 0.89 2236 1996 66 158 11:10 38 34.299999999999997 0.87 2202 1921 62 158 11:15 35 38.799999999999997 0.85 2488 2110 65 159 11:20 30 38 0.89 2437 2179 69 160 11:25 28 34.9 0.87 2238 1936 55 160 11:30 25 36.299999999999997 0.84 2332 1965 56 162 11:35 39 38.4 0.83 2468 2044 62 163 11:40 35 40.5 0.88 2602 2284 71 163 11:45 30 38.9 0.92 2497 2286 69 164 11:50 38 37.200000000000003 0.89 2387 2131 65 164 11:55 31 38.5 0.9 2473 2234 66 166 12:00 30 39 0.91 2502 2272 66 166 12:05 32 38 0.91 2440 2227 66 166 12:10 26 37.4 0.91 2403 2189 62 167 12:15 29 37.700000000000003 0.9 2418 2170 62 168 12:20 31 37.799999999999997 0.92 2424 2230 65 169 12:25 35 38.9 0.9 2496 2242 66 168 12:30 35 38.200000000000003 0.92 2450 2261 67 168 12:35 48 39.799999999999997 0.92 2554 2351 74 168 12:40 40 37.799999999999997 0.95 2428 2316 72 168 12:45 36 38.1 0.96 2447 2344 72 169 12:50 39 38.700000000000003 0.95 2484 2353 71 170 12:55 35 39 0.96 2502 2391 73 171 13:00 41 39.9 0.97 2564 2486 78 171 13:05 42 37.200000000000003 0.97 2389 2321 74 171 13:10 42 37.1 0.96 2381 2288 72 172 13:15 40 40 0.97 2569 2504 80 172 13:20 33 35.9 0.93 2304 2147 61 172 13:25 37 38.9 0.93 2498 2332 71 173 13:30 34 37.9 0.94 2433 2283 69 173 13:35 42 34.700000000000003 0.95 2231 2109 70 173 13:40 35 23 1.1100000000000001 1476 1634 70 173 13:45 34 16.399999999999999 1.28 1056 1348 64 175 13:50 30 15.3 1.3 985 1282 56 178 13:55 36 17.5 1.19 1122 1341 54 180 14:00 39 19.7 1.1599999999999999 1263 1464 59 181 14:05 59 25.4 1.03 1628 1669 63 181 14:10 49 39.799999999999997 0.9 2554 2302 69 177 14:15 41 35.200000000000003 0.95 2258 2147 68 171 14:20 43 32.700000000000003 1 2099 2109 70 165 14:25 40 37.200000000000003 0.98 2386 2340 77 163 14:30 37 34.9 0.96 2237 2155 72 164 14:35 42 35 0.93 2246 2099 70 164 14:40 37 34.5 0.89 2216 1973 62 166 14:45 43 39.4 0.92 2530 2331 78 167 14:50 36 36.299999999999997 0.92 2333 2155 70 168 14:55 43 39 0.92 2506 2299 74 168 15:00 46 40.200000000000003 0.93 2583 2393 79 169 15:05 44 38.799999999999997 0.96 2491 2384 79 170 15:10 33 35.5 0.9 2277 2044 58 171 15:15 42 41.2 0.92 2646 2447 78 172 15:20 40 40.5 0.96 2598 2490 80 173 15:25 45 34.700000000000003 0.94 2231 2107 68 173 15:30 41 43.2 0.95 2776 2641 82 174 15:35 44 42.2 0.97 2712 2627 84 174 15:40 36 40.700000000000003 0.99 2615 2581 80 175 15:45 32 40.799999999999997 0.97 2620 2529 74 176 15:50 33 40.5 0.97 2597 2524 76 176 15:55 37 42 0.98 2699 2638 81 176 16:00 38 41.9 1 2692 2683 82 176 16:05 48 40.1 0.96 2577 2471 78 176 16:10 44 42.2 0.97 2710 2619 82 176 16:15 46 41.9 0.98 2691 2628 83 176 16:20 43 42.2 1 2712 2713 86 176 16:25 37 39.9 0.99 2564 2528 76 176 16:30 42 43.7 0.99 2805 2791 88 177 16:35 45 42.3 1 2716 2728 88 178 16:40 41 41.1 0.98 2640 2587 79 178 16:45 44 43.6 1.01 2800 2823 91 178 16:50 46 40.9 1.02 2629 2672 89 179 16:55 47 41.9 1 2687 2700 86 179 17:00 41 40.200000000000003 1.01 2578 2606 81 179 17:05 47 38.700000000000003 1 2482 2476 81 179 17:10 46 27.6 1.1499999999999999 1769 2037 87 179 17:15 37 20.3 1.21 1306 1583 63 180 17:20 39 22.9 1.23 1469 1802 75 181 17:25 37 21.3 1.22 1369 1666 67 183 17:30 38 21.2 1.19 1363 1621 64 184 17:35 48 21.3 1.1499999999999999 1366 1571 64 184 17:40 54 40.9 1 2627 2627 81 183 17:45 46 39.299999999999997 1.03 2523 2603 84 181 17:50 42 34.4 1.08 2211 2379 78 176 17:55 42 37.200000000000003 1.04 2389 2480 82 173 18:00 43 37.1 1.01 2381 2400 81 172 18:05 44 38.200000000000003 1.01 2450 2469 86 171 18:10 43 37.200000000000003 0.96 2391 2301 78 172 18:15 46 40.6 0.96 2604 2503 86 173 18:20 46 40.4 0.98 2595 2551 89 174 18:25 46 40.200000000000003 1 2582 2579 90 176 18:30 43 41.1 0.98 2641 2595 88 177 18:35 43 40.799999999999997 0.98 2622 2582 86 179 18:40 46 42.4 0.99 2720 2689 90 180 18:45 43 42.7 0.99 2740 2715 89 180 18:50 43 42.2 0.99 2707 2674 87 181 18:55 42 43 0.98 2764 2698 85 181 19:00 45 42.4 0.98 2724 2673 85 181 19:05 45 45.9 0.98 2944 2899 93 181 19:10 46 42.7 1.01 2744 2780 94 181 19:15 45 42.1 1.02 2702 2750 91 182 19:20 37 42.3 1.01 2713 2748 85 183 19:25 46 43.1 1.01 2770 2790 91 184 19:30 51 42 1.01 2697 2718 91 184 19:35 51 45.3 0.99 2908 2884 93 184 19:40 41 43.4 1.01 2789 2811 88 184 19:45 46 43.8 1.05 2810 2937 100 184 19:50 46 44.5 1.05 2858 3002 99 185 19:55 45 44.9 1.05 2880 3016 99 185 20:00 46 44.9 1.05 2883 3034 100 185 20:05 46 43.5 1.06 2790 2953 98 185 20:10 46 43.5 1.06 2790 2962 100 186 20:15 45 43.8 1.06 2812 2979 99 186 20:20 46 45.3 1.05 2905 3051 101 186 20:25 45 43.6 1.06 2798 2969 100 186 20:30 46 43.4 1.07 2787 2973 101 186 20:35 48 36.200000000000003 1.06 2322 2472 88 186 20:40 45 27 1.17 1733 2030 87 187 20:45 42 22.2 1.23 1422 1749 76 188 20:50 47 27.6 1.21 1772 2144 88 188 20:55 52 26.5 1.1599999999999999 1700 1971 83 189 21:00 47 26.3 1.18 1691 2003 86 189 21:05 62 28.9 1.1200000000000001 1858 2082 84 189 21:10 46 44.3 1.08 2847 3067 98 188 21:15 47 39.299999999999997 1.1000000000000001 2523 2782 95 184 21:20 46 37.799999999999997 1.1399999999999999 2424 2759 100 181 21:25 48 39.1 1.0900000000000001 2508 2742 101 180 21:30 46 40.1 1.05 2576 2702 99 180 21:35 46 41.5 1.02 2662 2722 101 180 21:40 40 39.1 0.98 2507 2450 82 181 21:45 46 44.2 0.98 2839 2786 101 182 21:50 47 43.7 1 2807 2805 104 183 21:55 46 43.1 1.01 2765 2790 101 184 22:00 44 43 1 2764 2777 97 185 22:05 46 45 1.02 2889 2936 104 186 22:10 46 43.4 1.02 2785 2842 99 186 22:15 49 43.4 1.02 2788 2856 102 187 22:20 47 44 1.04 2826 2933 104 187 22:25 43 42.2 1.04 2709 2829 94 188 22:30 46 47.5 1.04 3047 3167 106 188 22:35 46 45 1.05 2889 3026 102 188 22:40 49 43.8 1.05 2815 2957 102 189 22:45 46 45 1.06 2891 3054 102 189 22:50 47 46 1.06 2955 3132 106 189 22:55 46 45 1.07 2888 3093 105 190 23:00 45 43.6 1.07 2796 2984 98 190 23:05 47 47.2 1.07 3030 3239 108 190 23:10 46 45.5 1.07 2918 3136 105 190 23:15 46 46.3 1.0900000000000001 2973 3238 108 191 23:20 46 44.5 1.08 2856 3096 103 191 23:25 46 44.8 1.0900000000000001 2879 3145 105 192 23:30 46 44.9 1.0900000000000001 2886 3133 105 192 23:35 46 45.2 1.0900000000000001 2900 3166 105 192 23:40 54 45.6 1.08 2927 3160 109 192 23:45 56 45.1 1.0900000000000001 2893 3148 109 192 23:50 55 46.2 1.1000000000000001 2967 3263 112 192 23:55 57 46.5 1.1000000000000001 2983 3290 114 193 24:00 59 44.4 1.1000000000000001 2851 3148 113 193 24:05 54 38.200000000000003 1.1200000000000001 2455 2744 101 193 24:10 52 29.1 1.19 1869 2224 96 194 24:15 53 27.6 1.22 1772 2163 96 194 24:20 53 27.3 1.2 1755 2101 91 194 24:25 44 25.4 1.2 1628 1955 75 194 24:30 49 29.1 1.2 1869 2240 94 193 24:35 45 24 1.23 1541 1890 84 192 24:40 69 38.700000000000003 1.1000000000000001 2485 2740 100 191 24:45 53 43.7 1.1599999999999999 2806 3249 108 191 24:50 49 39.9 1.21 2562 3095 109 188 24:55 54 40.4 1.1399999999999999 2593 2958 109 187 25:00 47 40.700000000000003 1.1000000000000001 2613 2875 107 185 25:05 51 41.4 1.05 2657 2799 107 187 25:10 54 44.7 1.02 2870 2919 112 188 25:15 58 44.9 1.01 2882 2906 110 189 25:20 52 45.3 1.02 2910 2979 111 190 25:25 54 45.3 1.03 2910 3006 111 191 25:30 54 45.3 1.04 2907 3031 111 191 25:35 62 45.3 1.03 2906 2998 113 192 25:40 52 44.5 1.06 2855 3035 111 192 25:45 61 45.9 1.05 2944 3093 114 193 25:50 54 44.7 1.02 2870 2919 112 193 25:55 58 44.9 1.01 2882 2906 110 193 26:00 59 45.421875 1.04265565875473 2907 3031 110 190 26:05 55 45.40625 1.0316586373021335 2906 2998 111 191 26:10 52 44.609375 1.063047285464098 2855 3035 111 191 26:15 54 46 1.0506114130434783 2944 3093 112 192 26:20 53 44.84375 1.0170731707317073 2870 2919 111 192 26:25 56 45.03125 1.008327550312283 2882 2906 111 190 26:30 57 45.421875 1.04265565875473 2907 3031 112 191 26:35 60 45.40625 1.0316586373021335 2906 2998 112 191 26:40 54 44.609375 1.063047285464098 2855 3035 111 192 26:45 57 46 1.0506114130434783 2944 3093 113 192 26:50 56 44.84375 1.0170731707317073 2870 2919 111 193 26:55 59 45.03125 1.008327550312283 2882 2906 112 193 27:00 62 45.40625 1.0316586373021335 2906 2998 113 193 27:05 55 45.3125 1.0689655172413792 2900 3100 112 194 27:10 57 45.328125 1.0341261633919339 2901 3000 111 195 27:15 52 44.609375 1.063047285464098 2855 3035 111 194 27:20 59 46.5 1.0416666666666667 2976 3100 112 197 27:25 60 45.140625 1.0678435444790586 2889 3085 113 196 27:30 61 46 1.0506114130434783 2944 3093 114 195 6.0.0.4 dat_vo2_stage This is a table representing a single subjects lactate values during incremental treadmill running stage speed rpe lactate 1 1 10 1.0 2 2 11 1.5 3 3 12 1.8 4 4 13 2.5 5 5 14 6.0 6 6 15 7.7 7 7 16 9.0 8 8 17 10.0 6.1 Tidy data You can represent the same underlying data in multiple ways. The example below shows the same data organised in four different ways. This dataset is not the data you loaded, but rather came with the tidyverse package. Each dataset shows the same values of four variables country, year, population, and cases, but each dataset organises the values in a different way. table1 ## # A tibble: 6 x 4 ## country year cases population ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Afghanistan 1999 745 19987071 ## 2 Afghanistan 2000 2666 20595360 ## 3 Brazil 1999 37737 172006362 ## 4 Brazil 2000 80488 174504898 ## 5 China 1999 212258 1272915272 ## 6 China 2000 213766 1280428583 table2 ## # A tibble: 12 x 4 ## country year type count ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 Afghanistan 1999 cases 745 ## 2 Afghanistan 1999 population 19987071 ## 3 Afghanistan 2000 cases 2666 ## 4 Afghanistan 2000 population 20595360 ## 5 Brazil 1999 cases 37737 ## 6 Brazil 1999 population 172006362 ## 7 Brazil 2000 cases 80488 ## 8 Brazil 2000 population 174504898 ## 9 China 1999 cases 212258 ## 10 China 1999 population 1272915272 ## 11 China 2000 cases 213766 ## 12 China 2000 population 1280428583 table3 ## # A tibble: 6 x 3 ## country year rate ## * &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 Afghanistan 1999 745/19987071 ## 2 Afghanistan 2000 2666/20595360 ## 3 Brazil 1999 37737/172006362 ## 4 Brazil 2000 80488/174504898 ## 5 China 1999 212258/1272915272 ## 6 China 2000 213766/1280428583 # Spread across two tables table4a # cases ## # A tibble: 3 x 3 ## country `1999` `2000` ## * &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Afghanistan 745 2666 ## 2 Brazil 37737 80488 ## 3 China 212258 213766 table4b # population ## # A tibble: 3 x 3 ## country `1999` `2000` ## * &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Afghanistan 19987071 20595360 ## 2 Brazil 172006362 174504898 ## 3 China 1272915272 1280428583 These are all representations of the same underlying data, but they are not equally easy to use. One dataset, the tidy dataset, will be much easier to work with. There are three interrelated rules which make a dataset tidy: Each variable must have its own column. Each observation must have its own row. Each value must have its own cell. Figure 6.1 shows the rules visually. Figure 6.1: Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells. These three rules are interrelated because its impossible to only satisfy two of the three. In this example, only table1 is tidy. Its the only representation where each column is a variable. Why ensure that your data is tidy? There are two main advantages: Theres a general advantage to picking one consistent way of storing data. If you have a consistent data structure, its easier to learn the tools that work with it because they have an underlying uniformity. Theres a specific advantage to placing variables in columns because most of R functions work with data in the tidy format. That makes transforming tidy data feel particularly natural. The principles of tidy data seem so obvious that you might wonder if youll ever encounter a dataset that isnt tidy. Unfortunately, however, most data that you will encounter will be untidy. There are two main reasons: Most people arent familiar with the principles of tidy data, and its hard to derive them yourself unless you spend a lot of time working with data. Data is often organised to facilitate some use other than analysis. For example, data is often organised to make entry as easy as possible. This means for most real analyses, youll need to do some tidying. The first step is always to figure out what the variables and observations are. Sometimes this is easy; other times youll need to consult with the people who originally generated the data. The second step is to resolve one of two common problems: One variable might be spread across multiple columns. One observation might be scattered across multiple rows. Typically a dataset will only suffer from one of these problems; itll only suffer from both if youre really unlucky! To fix these problems, youll need the two most important functions in tidyr: pivot_wider() in Recipe 6.8 and pivot_longer() in Recipe 6.7 below. 6.2 Renaming variables 6.2.1 Problem The current column names in the dat_vo2 dataset is ugly, and you like to abbreviate it. I dislike excessive usage of capitalisations. It is a lot of effort to type. # This prints the current column names colnames (dat_vo2) ## [1] &quot;Time&quot; &quot;BF&quot; &quot;VO2/kg&quot; &quot;RER&quot; &quot;V&#39;O2&quot; &quot;V&#39;CO2&quot; &quot;V&#39;E&quot; &quot;HR&quot; 6.2.2 Solution Create a vector of 8 new names that you can give to the data. The order of new names must be identical to the order of the old names from left to right. # New names. Notice the commas and be pedantic about spacing new_names &lt;- c(&quot;time&quot;, &quot;bf&quot;, &quot;vo2_norm&quot;, &quot;rer&quot;, &quot;vo2&quot;, &quot;vco2&quot;, &quot;ve&quot;, &quot;hr&quot;) # Give the new names to the old names colnames (dat_vo2) &lt;- new_names # This prints the new column names colnames (dat_vo2) ## [1] &quot;time&quot; &quot;bf&quot; &quot;vo2_norm&quot; &quot;rer&quot; &quot;vo2&quot; &quot;vco2&quot; &quot;ve&quot; ## [8] &quot;hr&quot; 6.3 Selecting rows and columns 6.3.1 Problem You want to remove a specific row or a range of rows, and remove a specific column or a range of columns. See also Recipe 6.12. 6.3.2 Solution To keep or remove rows based on the row numbers, use slice (), slice_head(), or slice_tail(). In slice (), when you want to keep the row, add that row number. If you want to remove that row number, use a minus sign, -, before the number. If you want to keep or remove a range of numbers, add start:end inside slice(). In slice_tail () and slice_head(), you can keep the bottom, and top, n number of rows, respectively, by adding n = 3 for example inside slice_tail() or slice_head(). To keep based on the column names, use the select () function. # This keeps only the second row vo2_slice &lt;- dat_vo2 %&gt;% slice (2) time bf vo2_norm rer vo2 vco2 ve hr 00:05 37 21.4 0.93 1371 1272 46 119 # This removes the second row vo2_slice &lt;- dat_vo2 %&gt;% slice (-2) time bf vo2_norm rer vo2 vco2 ve hr min 1/min ml/ min/kg ml/min ml/min L/min bpm 00:10 58 2.5 0.84 159 133 12 120 00:15 30 23.5 0.74 1506 1110 35 121 00:20 34 22.4 0.86 1437 1229 43 123 00:25 23 15.6 0.73 1004 735 22 124 00:30 27 30.5 0.76 1960 1489 48 124 # This removes the second and third rows vo2_slice &lt;- dat_vo2 %&gt;% slice (-(2:3)) time bf vo2_norm rer vo2 vco2 ve hr min 1/min ml/ min/kg ml/min ml/min L/min bpm 00:15 30 23.5 0.74 1506 1110 35 121 00:20 34 22.4 0.86 1437 1229 43 123 00:25 23 15.6 0.73 1004 735 22 124 00:30 27 30.5 0.76 1960 1489 48 124 00:35 39 23.3 0.73 1499 1092 38 124 # This keeps the top six rows vo2_slice &lt;- dat_vo2 %&gt;% slice_head (n = 6) time bf vo2_norm rer vo2 vco2 ve hr min 1/min ml/ min/kg ml/min ml/min L/min bpm 00:05 37 21.4 0.93 1371 1272 46 119 00:10 58 2.5 0.84 159 133 12 120 00:15 30 23.5 0.74 1506 1110 35 121 00:20 34 22.4 0.86 1437 1229 43 123 00:25 23 15.6 0.73 1004 735 22 124 # This keeps the bottom six rows vo2_slice &lt;- dat_vo2 %&gt;% slice_tail (n = 6) time bf vo2_norm rer vo2 vco2 ve hr 27:05 55 45.3125 1.0689655172413792 2900 3100 112 194 27:10 57 45.328125 1.0341261633919339 2901 3000 111 195 27:15 52 44.609375 1.063047285464098 2855 3035 111 194 27:20 59 46.5 1.0416666666666667 2976 3100 112 197 27:25 60 45.140625 1.0678435444790586 2889 3085 113 196 27:30 61 46 1.0506114130434783 2944 3093 114 195 # This selects the first, second, and fourth column, and discards the rest vo2_slice &lt;- dat_vo2 %&gt;% dplyr::select (time, bf, rer) time bf rer min 1/min 00:05 37 0.93 00:10 58 0.84 00:15 30 0.74 00:20 34 0.86 00:25 23 0.73 # This removes the first row, and replaces the old data in object dat_vo2 dat_vo2 &lt;- dat_vo2 %&gt;% slice (-(1)) 6.4 Convert characters to numeric 6.4.1 Problem The raw Vo2 treadmill dataset contains predominantly numbers, meaning it is numeric in nature. See also Section 3.4.1. But let us see the type of data that was imported. The str() function provides us with some summary information about the dataframe. str(dat_vo2) ## &#39;data.frame&#39;: 330 obs. of 8 variables: ## $ time : chr &quot; 00:05 &quot; &quot; 00:10 &quot; &quot; 00:15 &quot; &quot; 00:20 &quot; ... ## $ bf : chr &quot;37&quot; &quot;58&quot; &quot;30&quot; &quot;34&quot; ... ## $ vo2_norm: chr &quot;21.4&quot; &quot;2.5&quot; &quot;23.5&quot; &quot;22.4&quot; ... ## $ rer : chr &quot;0.93&quot; &quot;0.84&quot; &quot;0.74&quot; &quot;0.86&quot; ... ## $ vo2 : chr &quot;1371&quot; &quot;159&quot; &quot;1506&quot; &quot;1437&quot; ... ## $ vco2 : chr &quot;1272&quot; &quot;133&quot; &quot;1110&quot; &quot;1229&quot; ... ## $ ve : chr &quot;46&quot; &quot;12&quot; &quot;35&quot; &quot;43&quot; ... ## $ hr : chr &quot;119&quot; &quot;120&quot; &quot;121&quot; &quot;123&quot; ... What you will see is something like this. For the variable bf, you will see $ bf : chr \"37\" \"58\" \"30\" \"34\" .... chr after the colon. This indicates that this variable is a character (chr). In R language, a character is anything from a letter, e.g. a, to a word, e.g. word, to even a phrase of sentence, e.g. i hate biomechanics. A character is always enclosed inside a \"\". Why is R so stupid, that it cannot differentiate numbers from words!! Well it is not that R is stupid, but it is that in our original data, each column have both words and numbers (Figure 6.2). It is our fault that the data was untidy. This was touched on in in Section 6.1, about why this is bad data formatting. In brief, each column should be made up of one type of data. If it is numbers, make it all numbers; characters, all characters. If you have mix, the default is that R treats that column as all characters. The reason why you should not leave numbers as characters is that you cannot do math on it. You cannot add apples and orange can you? Figure 6.2: The type of data for each class as it was imported. 6.4.2 Solution Use the mutate() function and the as.numeric function. # Make all variables from bf to hr numeric, and replace the current data dat_vo2 &lt;- dat_vo2 %&gt;% mutate (bf = as.numeric(bf), vo2_norm = as.numeric(vo2_norm), rer = as.numeric(rer), vo2 = as.numeric(vo2), vco2 = as.numeric(vco2), ve = as.numeric(ve), hr = as.numeric(hr)) # Recheck the type of each column str(dat_vo2) ## &#39;data.frame&#39;: 330 obs. of 8 variables: ## $ time : chr &quot; 00:05 &quot; &quot; 00:10 &quot; &quot; 00:15 &quot; &quot; 00:20 &quot; ... ## $ bf : num 37 58 30 34 23 27 39 34 26 27 ... ## $ vo2_norm: num 21.4 2.5 23.5 22.4 15.6 30.5 23.3 29.6 31.9 29.4 ... ## $ rer : num 0.93 0.84 0.74 0.86 0.73 0.76 0.73 0.75 0.8 0.8 ... ## $ vo2 : num 1371 159 1506 1437 1004 ... ## $ vco2 : num 1272 133 1110 1229 735 ... ## $ ve : num 46 12 35 43 22 48 38 49 53 49 ... ## $ hr : num 119 120 121 123 124 124 124 124 124 125 ... 6.5 Convert characters to date and time 6.5.1 Problem The raw dat_vo2 data time variable is a character with ugly white spaces. When you use the str() function on the time column using the $ symbol, you can see that each value looks like \" 00:05 \". It means that is a blank before and after the 00:05. str(dat_vo2$time) ## chr [1:330] &quot; 00:05 &quot; &quot; 00:10 &quot; &quot; 00:15 &quot; &quot; 00:20 &quot; &quot; 00:25 &quot; ... 6.5.2 Solution First, let me create a carbon copy of the data dat_vo2, so that I can modify the original data, and keep the carbon copy for explanation and illustration. dat_vo2_copy &lt;- dat_vo2 Use the mutate() function and the as.numeric function. You will learn the mutate () function more in Recipe 6.11. # 4 in 1 processing dat_vo2 &lt;- dat_vo2 %&gt;% mutate (time = time %&gt;% str_squish() %&gt;% # function strips any whitespaces ms() %&gt;% # convert to minutes and seconds as.period(unit = &quot;sec&quot;) %&gt;% # converts entirely to seconds as.numeric ()) # strips the S symbol to make it a number time bf vo2_norm rer vo2 vco2 ve hr 5 37 21.4 0.93 1371 1272 46 119 10 58 2.5 0.84 159 133 12 120 15 30 23.5 0.74 1506 1110 35 121 20 34 22.4 0.86 1437 1229 43 123 25 23 15.6 0.73 1004 735 22 124 30 27 30.5 0.76 1960 1489 48 124 6.5.3 Discussion Notice in the function above, I chained a series of steps together, using the pipe, %&gt;%, function. Alternatively, I could do it in separate steps, and we can take a look at how each step changed the appearance of the time variable. Let me illustrate each step using the carbon copy data dat_vo2_copy. # First, removes whitespaces around the time variable time_mutate &lt;- dat_vo2_copy %&gt;% mutate (time = time %&gt;% str_squish()) time bf vo2_norm rer vo2 vco2 ve hr 00:05 37 21.4 0.93 1371 1272 46 119 00:10 58 2.5 0.84 159 133 12 120 00:15 30 23.5 0.74 1506 1110 35 121 00:20 34 22.4 0.86 1437 1229 43 123 00:25 23 15.6 0.73 1004 735 22 124 00:30 27 30.5 0.76 1960 1489 48 124 # Second, convert to minutes and seconds time_mutate &lt;- dat_vo2_copy %&gt;% mutate (time = time %&gt;% str_squish()%&gt;% ms()) time bf vo2_norm rer vo2 vco2 ve hr 325 27M 5S 55 45.31 1.07 2900 3100 112 194 326 27M 10S 57 45.33 1.03 2901 3000 111 195 327 27M 15S 52 44.61 1.06 2855 3035 111 194 328 27M 20S 59 46.50 1.04 2976 3100 112 197 329 27M 25S 60 45.14 1.07 2889 3085 113 196 330 27M 30S 61 46.00 1.05 2944 3093 114 195 # Third, converts entirely to seconds time_mutate &lt;- dat_vo2_copy %&gt;% mutate (time = time %&gt;% str_squish()%&gt;% ms() %&gt;% as.period(unit = &quot;sec&quot;)) time bf vo2_norm rer vo2 vco2 ve hr 325 1625S 55 45.31 1.07 2900 3100 112 194 326 1630S 57 45.33 1.03 2901 3000 111 195 327 1635S 52 44.61 1.06 2855 3035 111 194 328 1640S 59 46.50 1.04 2976 3100 112 197 329 1645S 60 45.14 1.07 2889 3085 113 196 330 1650S 61 46.00 1.05 2944 3093 114 195 # Fourth, strips the S symbol to make it a number, and assign it to object time_mutate &lt;- dat_vo2_copy %&gt;% mutate (time = time %&gt;% str_squish()%&gt;% ms() %&gt;% as.period(unit = &quot;sec&quot;) %&gt;% as.numeric ()) time bf vo2_norm rer vo2 vco2 ve hr 325 1625 55 45.31 1.07 2900 3100 112 194 326 1630 57 45.33 1.03 2901 3000 111 195 327 1635 52 44.61 1.06 2855 3035 111 194 328 1640 59 46.50 1.04 2976 3100 112 197 329 1645 60 45.14 1.07 2889 3085 113 196 330 1650 61 46.00 1.05 2944 3093 114 195 6.6 Split Numeric Variable into Categories 6.6.1 Problem Remember, each stage in VO2 testing is 3:30min (210sec) long, and you collected data in 5sec intervals. You want to split the time variable of the dat_vo2 dataset into chunks of 210 sec, and create a new variable called stage. You will learn the mutate () function more in Recipe 6.11. I will not explain the cut_interval function, other than to say that the length argument is used to specify the range of evenly spaced values to categorize over. 6.6.2 Solution dat_vo2 &lt;- dat_vo2 %&gt;% mutate (stage = cut_interval(time, length = 210, labels = FALSE)) time bf vo2_norm rer vo2 vco2 ve hr stage 5 37 21.4 0.93 1371 1272 46 119 1 10 58 2.5 0.84 159 133 12 120 1 15 30 23.5 0.74 1506 1110 35 121 1 20 34 22.4 0.86 1437 1229 43 123 1 25 23 15.6 0.73 1004 735 22 124 1 30 27 30.5 0.76 1960 1489 48 124 1 6.6.3 Discussion Why chunks of 210 sec? Vo2 data analysis, requires you to find the average values of the last 30s of each treadmill testing stage. Based on your Autumn School lessons, recall that each stage is 3 min 30 sec long or 210 sec. When doing data analysis, there is an amount of pre-planning on how to get the desired end product. There is no magic pill, the more analysis you do, the more short cuts you know. 6.7 Gathering 6.7.1 Problem You want to make your data longer. In the data dat_fms_grp (go to the start of this chapter to see this datas original shape), you want to merge the 7 columns indicating the 7 FMS tasks into a single column. For this, you can use the pivot_longer() function. 6.7.2 Solution dat_long &lt;- dat_fms_grp %&gt;% # original data pivot_longer(cols = -id, names_to = &quot;task&quot;, values_to = &quot;score&quot;) id task score athlete_a squat 2 athlete_a hurdle 2 athlete_a lunge 2 athlete_a shd_mob 3 athlete_a leg_raise 3 athlete_a push_up 3 athlete_a rot_stab 2 athlete_b squat 2 athlete_b hurdle 2 athlete_b lunge 3 athlete_b shd_mob 2 athlete_b leg_raise 1 athlete_b push_up 3 athlete_b rot_stab 2 athlete_c squat 2 athlete_c hurdle 2 athlete_c lunge 3 athlete_c shd_mob 2 athlete_c leg_raise 1 athlete_c push_up 1 athlete_c rot_stab 2 athlete_d squat 2 athlete_d hurdle 2 athlete_d lunge 3 athlete_d shd_mob 2 athlete_d leg_raise 3 athlete_d push_up 2 athlete_d rot_stab 1 athlete_e squat 2 athlete_e hurdle 2 athlete_e lunge 2 athlete_e shd_mob 3 athlete_e leg_raise 1 athlete_e push_up 1 athlete_e rot_stab 2 athlete_f squat 2 athlete_f hurdle 2 athlete_f lunge 2 athlete_f shd_mob 2 athlete_f leg_raise 2 athlete_f push_up 2 athlete_f rot_stab 2 athlete_g squat 2 athlete_g hurdle 2 athlete_g lunge 3 athlete_g shd_mob 3 athlete_g leg_raise 3 athlete_g push_up 1 athlete_g rot_stab 2 athlete_h squat 3 athlete_h hurdle 2 athlete_h lunge 3 athlete_h shd_mob 2 athlete_h leg_raise 2 athlete_h push_up 3 athlete_h rot_stab 2 athlete_i squat 3 athlete_i hurdle 2 athlete_i lunge 2 athlete_i shd_mob 2 athlete_i leg_raise 2 athlete_i push_up 1 athlete_i rot_stab 2 athlete_j squat 1 athlete_j hurdle 2 athlete_j lunge 3 athlete_j shd_mob 2 athlete_j leg_raise 2 athlete_j push_up 3 athlete_j rot_stab 2 athlete_k squat 3 athlete_k hurdle 2 athlete_k lunge 2 athlete_k shd_mob 2 athlete_k leg_raise 2 athlete_k push_up 3 athlete_k rot_stab 2 athlete_l squat 2 athlete_l hurdle 2 athlete_l lunge 2 athlete_l shd_mob 3 athlete_l leg_raise 3 athlete_l push_up 2 athlete_l rot_stab 2 athlete_m squat 1 athlete_m hurdle 2 athlete_m lunge 2 athlete_m shd_mob 3 athlete_m leg_raise 2 athlete_m push_up 3 athlete_m rot_stab 2 athlete_n squat 2 athlete_n hurdle 2 athlete_n lunge 2 athlete_n shd_mob 2 athlete_n leg_raise 1 athlete_n push_up 3 athlete_n rot_stab 2 athlete_o squat 3 athlete_o hurdle 2 athlete_o lunge 3 athlete_o shd_mob 2 athlete_o leg_raise 3 athlete_o push_up 3 athlete_o rot_stab 2 athlete_p squat 2 athlete_p hurdle 3 athlete_p lunge 2 athlete_p shd_mob 2 athlete_p leg_raise 3 athlete_p push_up 1 athlete_p rot_stab 2 athlete_q squat 3 athlete_q hurdle 2 athlete_q lunge 3 athlete_q shd_mob 3 athlete_q leg_raise 2 athlete_q push_up 3 athlete_q rot_stab 2 athlete_r squat 2 athlete_r hurdle 2 athlete_r lunge 3 athlete_r shd_mob 2 athlete_r leg_raise 1 athlete_r push_up 2 athlete_r rot_stab 2 athlete_s squat 2 athlete_s hurdle 2 athlete_s lunge 2 athlete_s shd_mob 3 athlete_s leg_raise 2 athlete_s push_up 1 athlete_s rot_stab 2 athlete_t squat 2 athlete_t hurdle 2 athlete_t lunge 3 athlete_t shd_mob 2 athlete_t leg_raise 1 athlete_t push_up 3 athlete_t rot_stab 2 athlete_u squat 2 athlete_u hurdle 2 athlete_u lunge 3 athlete_u shd_mob 2 athlete_u leg_raise 2 athlete_u push_up 3 athlete_u rot_stab 2 athlete_v squat 3 athlete_v hurdle 2 athlete_v lunge 2 athlete_v shd_mob 2 athlete_v leg_raise 3 athlete_v push_up 3 athlete_v rot_stab 2 athlete_w squat 3 athlete_w hurdle 2 athlete_w lunge 3 athlete_w shd_mob 3 athlete_w leg_raise 2 athlete_w push_up 3 athlete_w rot_stab 2 athlete_x squat 2 athlete_x hurdle 2 athlete_x lunge 2 athlete_x shd_mob 2 athlete_x leg_raise 1 athlete_x push_up 1 athlete_x rot_stab 2 6.8 Spreading 6.8.1 Problem You want to make your data wider, in this instance let us look at the dat_fms dataset. You want to have one column indicating the left FMS score, and one indicating the right FMS score. The caveat is that because some tasks in the FMS do not have left and right, we need to remove the tasks in the FMS without a left and right. In this case, we will use the filter() function, which will be discussed in Recipe 6.12. dat_fms_sub &lt;- dat_fms %&gt;% filter (side != &quot;c&quot;) 6.8.2 Solution dat_wide &lt;- dat_fms_sub %&gt;% # original data pivot_wider(names_from = &quot;side&quot;, values_from = &quot;score&quot;) task l r hurdle 2 2 lunge 3 3 leg_raise 2 1 shd_mob 1 2 rot_stab 2 2 6.9 Rename values of a variable 6.9.1 Problem You want to rename some values, either because it is too long, too short, or for other reasons. In this instance, in the dat_fms dataset, you want to call l, left, and r, right. 6.9.2 Solution Use the mutate() function and the recode() function. You will learn the mutate () function more in Recipe 6.11. dat_fms &lt;- dat_fms %&gt;% mutate (side = recode (side, # the variable name &quot;l&quot; = &quot;left&quot;, # old label = new label &quot;r&quot; = &quot;right&quot;)) # old label = new label task side score squat c 3 hurdle left 2 hurdle right 2 lunge left 3 lunge right 3 leg_raise left 2 leg_raise right 1 shd_mob left 1 shd_mob right 2 rot_stab left 2 rot_stab right 2 push_up c 1 6.10 Creating factors 6.10.1 Problem You want to create an order in the values of a variable - like small, medium, large. 6.10.2 Solution # Order of values I desire new_lvls &lt;- c( &quot;push_up&quot;,&quot;squat&quot;, &quot;rot_stab&quot;, &quot;hurdle&quot;, &quot;lunge&quot;, &quot;leg_raise&quot;, &quot;shd_mob&quot;) dat_fms_relvl &lt;- dat_fms %&gt;% mutate (task = factor (task, levels = new_lvls)) 6.10.3 Discussion Why do you need to convert categorical variables to factors? For visualization, the simple reason is that it allows you to control the order in which items appear first to last. Of course, it has important statistical reasons, of which we do not discuss presently. # Without factor ggplot(dat_fms) + geom_col(aes(x = task, y = score, fill = side), position = &quot;dodge&quot;, color = &quot;black&quot;) # With factor new levels ggplot(dat_fms_relvl) + geom_col(aes(x = task, y = score, fill = side), position = &quot;dodge&quot;, color = &quot;black&quot;) Figure 6.3: Barplots of FMS score on original dat_fms (top); and new dat_fms_relvl when with modified the task variable to be a factor, with new levels (bottom). 6.11 Making a new variable 6.11.1 Problem You want to create a new column which involves some math between columns 6.11.2 Solution Example, you want to create a column called ratio in the dat_vo2 dataset, by dividing vo2 by vco2. dat_vo2 &lt;- dat_vo2 %&gt;% mutate (ratio = vo2/vco2) time bf vo2_norm rer vo2 vco2 ve hr stage ratio 5 37 21.4 0.93 1371 1272 46 119 1 1.08 10 58 2.5 0.84 159 133 12 120 1 1.20 15 30 23.5 0.74 1506 1110 35 121 1 1.36 20 34 22.4 0.86 1437 1229 43 123 1 1.17 25 23 15.6 0.73 1004 735 22 124 1 1.37 30 27 30.5 0.76 1960 1489 48 124 1 1.32 6.11.3 Discussion There are many math operations you can do including subtraction (-), multiplication (*), addition (+), exponentiation/power to the power of 2 (^2). Let us go crazy and try some random creation of new variables. dat_vo2_crazy &lt;- dat_vo2 %&gt;% mutate (vo2_power = vo2^3,# vo2 powered to 3 vco2_mod = vco2/3, # vco2 divied by 3 junk = (vo2+ vco2)/ (hr + bf))# divided the sum of vo2 and vco2, and sum of hr and bf time bf vo2_norm rer vo2 vco2 ve hr stage ratio vo2_power vco2_mod junk 5 37 21.4 0.93 1371 1272 46 119 1 1.08 2576987811 424.00 16.94 10 58 2.5 0.84 159 133 12 120 1 1.20 4019679 44.33 1.64 15 30 23.5 0.74 1506 1110 35 121 1 1.36 3415662216 370.00 17.32 20 34 22.4 0.86 1437 1229 43 123 1 1.17 2967360453 409.67 16.98 25 23 15.6 0.73 1004 735 22 124 1 1.37 1012048064 245.00 11.83 30 27 30.5 0.76 1960 1489 48 124 1 1.32 7529536000 496.33 22.84 You can even create a new variable, which reflects the present row number (row_id). This row number reflects the number of 5 sec VO2 windows. If there is 10 sec of data collected, there will be two row numbers, Really quite useful for VO2 analysis and cleaning. Here, inside the mutate() function, I will be using the function row_number() to get the respective number for each row. dat_vo2 &lt;- dat_vo2 %&gt;% mutate (row_id = row_number()) time bf vo2_norm rer vo2 vco2 ve hr stage ratio row_id 5 37 21.4 0.93 1371 1272 46 119 1 1.08 1 10 58 2.5 0.84 159 133 12 120 1 1.20 2 15 30 23.5 0.74 1506 1110 35 121 1 1.36 3 20 34 22.4 0.86 1437 1229 43 123 1 1.17 4 25 23 15.6 0.73 1004 735 22 124 1 1.37 5 30 27 30.5 0.76 1960 1489 48 124 1 1.32 6 6.12 Filtering Filtering is removing rows you do not want and keeping rows you want based on some condition(s). In Recipe 6.3, you learnt the slice() function. That is for really simple filtering. The filter() function you will learn here gives you more flexibility. Filtering deals with keeping or throwing out rows of data. Keeping or throwing out columns of data requires the select() function, which you learnt in Recipe 6.3. 6.12.1 Keep rows you want based on condition 6.12.1.1 Problem In the dat_fms dataset, you want to keep rows that have side == \"left\" (i.e. only rows where the side value equals left). Note the ==, double equal sign, instead of the usual =. In this short book, I will not go at length to explain why R is so difficult, only that I ask you to obey the rules of the language. 6.12.1.2 Solution fms_left &lt;- dat_fms %&gt;% filter (side == &quot;left&quot;) task side score hurdle left 2 lunge left 3 leg_raise left 2 shd_mob left 1 rot_stab left 2 6.12.2 Keep rows based on a numerical range You want to keep the data when a variable is within a certain window range. Let us use the dat_vo2 dataset. Let us see the range of values of the variable ve. hist (dat_vo2$ve) 6.12.2.1 Problem Say I want to keep rows where 1) ve is less than 80, 2) ve more than 40, and 3) ve is between 40 to 80. 6.12.2.2 Solution Notice for each graph, how the minimum and maximum values have been clipped off. # Keep ve less than 80 dat_vo2_filt &lt;- dat_vo2 %&gt;% filter (ve &lt; 80) hist (dat_vo2_filt$ve) # Keep ve lmore than 40 dat_vo2_filt &lt;- dat_vo2 %&gt;% filter (ve &gt; 40) hist (dat_vo2_filt$ve) # Keep ve between 40 to 80 dat_vo2_filt &lt;- dat_vo2 %&gt;% filter (ve &gt; 40 &amp; ve &lt; 80) hist (dat_vo2_filt$ve) 6.12.3 Discussion filter() works really when you want to throw out or keep rows of data based on some ranges or criteria of the variables you have. When you want to keep rows of data based on the row number, use slice (). See also Recipe 6.3. 6.13 Global summary 6.13.1 Problem You want to find the total FMS score across all sides and tasks 6.13.2 Solution In the dat_fms dataset, we want to use the summarize () function. dat_fms %&gt;% summarize (total_score = sum (score)) ## total_score ## 1 24 I dare you to find an easier way to calculate such scores in one line of code. That is one reason why I use a programming language like R. It is fast!!! 6.13.3 Discussion We can also go berserk by trying out different summary functions, like mean (), median (), min() (minimum value), max (maximum value). The function n() is a really useful one to count the number of rows. If your rows indicate the number of subjects, n() essentially counts the number of subjects. fms_summ &lt;- dat_fms %&gt;% summarize (total_score = sum (score), mean_score = mean (score), median_score = median (score), min_score = min (score), max_score = max(score), count = n()) total_score mean_score median_score min_score max_score count 24 2 2 1 3 12 6.14 Group-by summary 6.14.1 Problem You want to perform the same summary function for each chunk of group. For example, the FMS is typically scored by taking the lower of the two values of left and right for each task. In side, we have three values, c, left and right. The minimum of c is the same value itself. 6.14.2 Solution In the dat_fms_grp dataset, we want to use the group_by() and summarize () function. The code below reads as: collapse all tasks into a single column, for each task and each score, count the number of rows (subjects) who has that score. fms_grp_summ &lt;- dat_fms_grp %&gt;% pivot_longer(cols = -id, names_to = &quot;task&quot;, values_to = &quot;score&quot;) %&gt;% group_by(task, score) %&gt;% summarize (count = n()) ## `summarise()` regrouping output by &#39;task&#39; (override with `.groups` argument) task score count hurdle 2 23 hurdle 3 1 leg_raise 1 7 leg_raise 2 10 leg_raise 3 7 lunge 2 12 lunge 3 12 push_up 1 7 push_up 2 4 push_up 3 13 rot_stab 1 1 rot_stab 2 23 shd_mob 2 16 shd_mob 3 8 squat 1 2 squat 2 15 squat 3 7 6.14.3 Discussion Why do you need to learn to create summaries? It is the basis for generating plots easily. Let us look at the dat_vo2 dataset. Remember in your lessons, the last 30 sec of each 3 min 30 sec complete stage is discarded. That means that I want to throw away the data interval between 3:00 to 3:30 min for every stage. Thereafter, for the complete stage, the last 30 sec of each 3 min interval is then averaged for further analysis. This means keeping data between 2:30 to 3:00 min of each stage. That corresponds to the last six rows of each stage (i.e. rows 31 to 36 of each stage). Try to think why i selected these row numbers! For the last stage, there may be the chance that it is incomplete. Based on Kellys lesson, you will need to extract the last 30 sec (i.e. last six rows) of this last incomplete stage. I then want to average all my variables over these 6 rows per stage. I should end up with a dataframe that has 8 rows given 8 stages, one for each stage in this example. dat_vo2_summ &lt;- dat_vo2 %&gt;% group_by(stage) %&gt;% # for each group mutate (row_id = row_number()) %&gt;% filter (row_id &lt; 37) %&gt;% slice_tail (n = 6) %&gt;% summarise (bf = mean (bf), vo2_norm = mean (vo2_norm), rer = mean (rer), vo2 = mean (vo2), vco2 = mean (vco2), ve = mean (ve), hr = mean (hr)) ## `summarise()` ungrouping output (override with `.groups` argument) Table 6.1: Stage by stage VO2 analysis stage bf vo2_norm rer vo2 vco2 ve hr 1 30.67 31.97 0.87 2052.83 1777.83 55.17 136.50 2 34.67 34.60 0.88 2222.17 1957.50 59.33 147.00 3 34.67 37.42 0.91 2401.83 2191.33 66.67 161.33 4 38.00 37.83 0.95 2429.00 2312.50 71.17 172.17 5 44.00 41.67 1.00 2675.00 2686.00 85.67 178.50 6 45.67 43.85 1.06 2813.67 2981.17 99.83 185.83 7 54.50 45.50 1.09 2920.17 3195.83 110.33 192.33 8 57.33 45.48 1.05 2910.83 3068.83 112.17 195.17 6.15 Merge two tables together 6.15.1 Problem You want to combine two tables together, ensuring that each row is linked appropriately. For example, you want to combine your dat_vo2_summ summary data with the dat_vo2_stage table which contains the RPE and blood lactate values. 6.15.2 Solution Use the inner_join function, with the by key as the common identifier that must be in both dataframes. dat_vo2_comb &lt;- dat_vo2_summ %&gt;% inner_join(dat_vo2_stage, by = &quot;stage&quot;) stage bf vo2_norm rer vo2 vco2 ve hr speed rpe lactate 1 30.67 31.97 0.87 2052.83 1777.83 55.17 136.50 1 10 1.0 2 34.67 34.60 0.88 2222.17 1957.50 59.33 147.00 2 11 1.5 3 34.67 37.42 0.91 2401.83 2191.33 66.67 161.33 3 12 1.8 4 38.00 37.83 0.95 2429.00 2312.50 71.17 172.17 4 13 2.5 5 44.00 41.67 1.00 2675.00 2686.00 85.67 178.50 5 14 6.0 6 45.67 43.85 1.06 2813.67 2981.17 99.83 185.83 6 15 7.7 7 54.50 45.50 1.09 2920.17 3195.83 110.33 192.33 7 16 9.0 8 57.33 45.48 1.05 2910.83 3068.83 112.17 195.17 8 17 10.0 6.15.3 Discussion It is common sense, that if we want to join two tables, there must be some rules. First, if we want to join two tables side by side left-right, the number of rows must match. Second, there must be a way the computer knows how to join, much like a key and a keyhole. The key is the column to join by, in this example, stage. In the dat_vo2_summ there is the stage variable with identical number of levels 1-8, and the same variable appears in dat_vo2_stage. You dont have to worry if after merging, the data is sorted correctly, if you follow these rules. 6.16 Learning check From your learning check in 5.4, open up your practice_script.R. You should already have the codes to import the data/Athlete_1_treadmill.xlsx file, and label the data called dat. Rename the columns of dat to be (\"time\", \"bf\", \"vo2_norm\", \"rer\", \"vo2\", \"vco2\", \"ve\", \"hr\"), respectively. See Recipe 6.2. Remove the first row of the dat data, as it is useless. See Recipe 6.3. Convert the variable time of dat into numeric seconds, and all other variables to numeric. See Recipe 6.5 and 6.4, respectively. Create a variable called stage, where each stage represents 3:30 min worth of VO2 data. See Recipe 6.6. For each stage, create a variable called row_id, which essentially represents the number of 5 sec windows in each stage. See Recipe 6.11 and 6.14. For each stage, remove the data between 3:00 to 3:30min. See Recipe 6.14 and 6.12.2. For each stage, keep the last six rows of data. See Recipe 6.14 and 6.3. For each stage, calculate for all variables for the mean of the last six rows of data. See Recipe 6.14 and 6.13. Save this cleaned data set into the data/ folder called Athlete_1_treadmill_clean.xlsx. Go into this folder physically, and see this new excel file is there and open it. See Recipe 5.3 Download the solution to this learning check below. Click to download the solution ## Warning: package &#39;igraph&#39; was built under R version 4.0.3 ## Warning: package &#39;MASS&#39; was built under R version 4.0.3 "],["CHAPTER-BAR-GRAPH.html", "Chapter 7 Bar Graphs 7.1 Making a Basic Bar Graph 7.2 Anatomy of a Graph 7.3 Grouping Bars Together 7.4 Using Colors in a Bar Graph 7.5 Changing Axes titles in a Bar Graph 7.6 Changing Legend titles in a Bar Graph 7.7 Changing font size uniformly across the Bar Graph 7.8 Outputting to Bitmap (PNG/TIFF) Files 7.9 Learning check", " Chapter 7 Bar Graphs There are so many types of figures that you can create in R (Figure 7.1). In the next two chapters, I will only delve into two types of figures that I believe is most useful for your case. With this basic skills, you have the foundation to delve deeper into this software if you desire. Figure 7.1: The plotting capabilities are endless. Bar graphs are perhaps the most commonly used kind of data visualization. Theyre typically used to display numeric values (on the y-axis), for different categories (on the x-axis). For example, a bar graph would be good for showing the prices of four different kinds of items. A bar graph generally wouldnt be as good for showing prices over time, where time is a continuous variable  though it can be done. Theres an important distinction you should be aware of when making bar graphs: sometimes the bar heights represent counts of cases in the data set, and sometimes they represent values in the data set. Keep this distinction in mind  it can be a source of confusion since they have very different relationships to the data, but the same term is used for both of them. In this chapter Ill discuss always use bar graphs with values. Let us prepare for this chapter by importing two FMS tests data. The Excel sheet is called \"fms_pt3.xlsx\" and \"simFMS.xlsx\". # Define factor levels fct_lvls &lt;- c(&quot;squat&quot;, &quot;push_up&quot;, &quot;hurdle&quot;, &quot;lunge&quot;, &quot;leg_raise&quot;, &quot;rot_stab&quot;, &quot;shd_mob&quot;) # Import data dat &lt;- read.xlsx (xlsxFile = &quot;data/fms_pt3.xlsx&quot;, sheet = &quot;Sheet1&quot;) dat_grp &lt;- read.xlsx (xlsxFile = &quot;data/simFMS.xlsx&quot;, sheet = &quot;FMS&quot;) # Tidy the data dat &lt;- dat %&gt;% mutate (task = factor (task, levels = fct_lvls)) dat_grp &lt;- dat_grp %&gt;% pivot_longer(cols = -id, names_to = &quot;task&quot;, values_to = &quot;score&quot;) %&gt;% group_by(task, score) %&gt;% mutate (task = factor (task, levels = fct_lvls), score = factor (score, levels = c(&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;))) task side score squat c 3 hurdle l 2 hurdle r 2 lunge l 3 lunge r 3 leg_raise l 2 leg_raise r 1 shd_mob l 1 shd_mob r 2 rot_stab l 2 rot_stab r 2 push_up c 1 id task score athlete_a squat 2 athlete_a hurdle 2 athlete_a lunge 2 athlete_a shd_mob 3 athlete_a leg_raise 3 athlete_a push_up 3 athlete_a rot_stab 2 athlete_b squat 2 athlete_b hurdle 2 athlete_b lunge 3 athlete_b shd_mob 2 athlete_b leg_raise 1 athlete_b push_up 3 athlete_b rot_stab 2 athlete_c squat 2 athlete_c hurdle 2 athlete_c lunge 3 athlete_c shd_mob 2 athlete_c leg_raise 1 athlete_c push_up 1 athlete_c rot_stab 2 athlete_d squat 2 athlete_d hurdle 2 athlete_d lunge 3 athlete_d shd_mob 2 athlete_d leg_raise 3 athlete_d push_up 2 athlete_d rot_stab 1 athlete_e squat 2 athlete_e hurdle 2 athlete_e lunge 2 athlete_e shd_mob 3 athlete_e leg_raise 1 athlete_e push_up 1 athlete_e rot_stab 2 athlete_f squat 2 athlete_f hurdle 2 athlete_f lunge 2 athlete_f shd_mob 2 athlete_f leg_raise 2 athlete_f push_up 2 athlete_f rot_stab 2 athlete_g squat 2 athlete_g hurdle 2 athlete_g lunge 3 athlete_g shd_mob 3 athlete_g leg_raise 3 athlete_g push_up 1 athlete_g rot_stab 2 athlete_h squat 3 athlete_h hurdle 2 athlete_h lunge 3 athlete_h shd_mob 2 athlete_h leg_raise 2 athlete_h push_up 3 athlete_h rot_stab 2 athlete_i squat 3 athlete_i hurdle 2 athlete_i lunge 2 athlete_i shd_mob 2 athlete_i leg_raise 2 athlete_i push_up 1 athlete_i rot_stab 2 athlete_j squat 1 athlete_j hurdle 2 athlete_j lunge 3 athlete_j shd_mob 2 athlete_j leg_raise 2 athlete_j push_up 3 athlete_j rot_stab 2 athlete_k squat 3 athlete_k hurdle 2 athlete_k lunge 2 athlete_k shd_mob 2 athlete_k leg_raise 2 athlete_k push_up 3 athlete_k rot_stab 2 athlete_l squat 2 athlete_l hurdle 2 athlete_l lunge 2 athlete_l shd_mob 3 athlete_l leg_raise 3 athlete_l push_up 2 athlete_l rot_stab 2 athlete_m squat 1 athlete_m hurdle 2 athlete_m lunge 2 athlete_m shd_mob 3 athlete_m leg_raise 2 athlete_m push_up 3 athlete_m rot_stab 2 athlete_n squat 2 athlete_n hurdle 2 athlete_n lunge 2 athlete_n shd_mob 2 athlete_n leg_raise 1 athlete_n push_up 3 athlete_n rot_stab 2 athlete_o squat 3 athlete_o hurdle 2 athlete_o lunge 3 athlete_o shd_mob 2 athlete_o leg_raise 3 athlete_o push_up 3 athlete_o rot_stab 2 athlete_p squat 2 athlete_p hurdle 3 athlete_p lunge 2 athlete_p shd_mob 2 athlete_p leg_raise 3 athlete_p push_up 1 athlete_p rot_stab 2 athlete_q squat 3 athlete_q hurdle 2 athlete_q lunge 3 athlete_q shd_mob 3 athlete_q leg_raise 2 athlete_q push_up 3 athlete_q rot_stab 2 athlete_r squat 2 athlete_r hurdle 2 athlete_r lunge 3 athlete_r shd_mob 2 athlete_r leg_raise 1 athlete_r push_up 2 athlete_r rot_stab 2 athlete_s squat 2 athlete_s hurdle 2 athlete_s lunge 2 athlete_s shd_mob 3 athlete_s leg_raise 2 athlete_s push_up 1 athlete_s rot_stab 2 athlete_t squat 2 athlete_t hurdle 2 athlete_t lunge 3 athlete_t shd_mob 2 athlete_t leg_raise 1 athlete_t push_up 3 athlete_t rot_stab 2 athlete_u squat 2 athlete_u hurdle 2 athlete_u lunge 3 athlete_u shd_mob 2 athlete_u leg_raise 2 athlete_u push_up 3 athlete_u rot_stab 2 athlete_v squat 3 athlete_v hurdle 2 athlete_v lunge 2 athlete_v shd_mob 2 athlete_v leg_raise 3 athlete_v push_up 3 athlete_v rot_stab 2 athlete_w squat 3 athlete_w hurdle 2 athlete_w lunge 3 athlete_w shd_mob 3 athlete_w leg_raise 2 athlete_w push_up 3 athlete_w rot_stab 2 athlete_x squat 2 athlete_x hurdle 2 athlete_x lunge 2 athlete_x shd_mob 2 athlete_x leg_raise 1 athlete_x push_up 1 athlete_x rot_stab 2 Let us also create two more datasets where 1) we take the lower of the two scores for tasks which are assessed bilaterally and 2) count the number of subjects who attain a specific score for each task. See Recipe 6.14. dat_summ &lt;- dat %&gt;% group_by(task) %&gt;% summarize (total = min (score)) %&gt;% ungroup () #&gt; `summarise()` ungrouping output (override with `.groups` argument) dat_grp_summ &lt;- dat_grp %&gt;% group_by(task, score) %&gt;% summarize (count = n()) #&gt; `summarise()` regrouping output by &#39;task&#39; (override with `.groups` argument) task total squat 3 push_up 1 hurdle 2 lunge 3 leg_raise 1 rot_stab 2 shd_mob 1 7.1 Making a Basic Bar Graph 7.1.1 Problem You have a data frame where one column represents the x position of each bar, and another column represents the vertical y height of each bar. 7.1.2 Solution Use ggplot() with geom_col() and specify what variables you want on the x- and y-axes (Figure 7.2): ggplot(dat_summ) + geom_col(aes(x = task, y = total)) Figure 7.2: Bar graph of values with a discrete x-axis 7.1.3 Discussion By default, bar graphs use a dark grey for the bars. To use a color fill, use fill. Also, by default, there is no outline around the fill. To add an outline, use colour. For Figure 7.3, we use a light blue fill and a black outline: ggplot(dat_summ) + geom_col(aes(x = task, y = total), fill = &quot;lightblue&quot;, colour = &quot;black&quot;) Figure 7.3: A single fill and outline color for all bars Note In ggplot2, which is the package used for plotting, the default is to use the British spelling, colour, instead of the American spelling, color. Internally, American spellings are remapped to the British ones, so if you use the American spelling it will still work. 7.2 Anatomy of a Graph There is alot of things that is going on behind the scene in this simple code of ggplot(dat_summ) + geom_col(aes(x = task, y = total)). Let us deleve a little into it, to understand the grammar of any graph, not just the bar graph we created. Remember, for any software, this grammar or anatomy towards a graph will be similar. 7.2.1 Plot Background To start building the plot, we first specify the data frame that contains the relevant data. Here we are sending the dat_summ data set into the ggplot function: # render background ggplot(data = dat_summ) Figure 7.4: An empty plot area waiting to be filled Running this command will produce an empty grey canvas. This is because we not yet specified what variables are to be plotted. 7.2.2 Aesthetics aes() We can call in different columns of data from dat_summ based on their column names. Column names are given as aesthetic elements to the ggplot function, and are wrapped in the aes() function. Because we want a bar plot, each bar will have an x and a y coordinate. We want the x axis to represent task ( x = task ), and the y axis to represent the total FMS score ( y = total ). See how the x- and y-axis titles, labels, and tick-marks become populated? But still nothing plotted, and that is because you have not tell it what shapes to plot. ggplot(data = dat_summ, aes(x = task, y = total) ) Figure 7.5: Setting the aesthetics 7.2.3 Geometric representations geom() Now we tell the computer what shapes to plot. Given we want a bar plot, we need to specify that the geometric representation (i.e. shape) of the data will be in the bar form, using geom_col(). Here we are adding a layer (hence the + sign) of points to the plot. ggplot(dat_summ, aes(x = task, y = total)) + geom_col() Figure 7.6: Setting the geometric representation Notice the code difference in Recipe 7.2.3 and Recipe 7.1. I put the aes() inside geom_col() in Recipe 7.1, but inside ggplot () in Recipe 7.2.3. Putting the aes() inside ggplot() means the aesthetic mapping will trickle down to however many layers of plots you want to overlay your figure with. I will not expand further on this to keep this book simple. 7.3 Grouping Bars Together 7.3.1 Problem You want to group bars together by a second variable. 7.3.2 Solution Map a variable to fill, and use geom_col(position = \"dodge\"). In this example well use the dat data set, in which we have an FMS score one for each side. Well map task to the x position and map side to the fill color (Figure 7.7): ggplot(dat) + geom_col(aes(x = task, y = score, fill = side), position = &quot;dodge&quot;) Figure 7.7: Graph with grouped bars Lets try this example on another dataset dat_grp_summ, in which we have the number of subjects who attain a specific FMS score for each task. Well map task to the x position, count to the y position, and map score to the fill color (Figure 7.8): ggplot(dat_grp_summ) + geom_col(aes(x = task, y = count, fill = score), position = &quot;dodge&quot;) + scale_fill_discrete(drop=FALSE) + scale_x_discrete(drop=FALSE) Figure 7.8: Graph with grouped bars 7.3.3 Discussion The most basic bar graphs have one categorical variable on the x-axis and one continuous variable on the y-axis. Sometimes youll want to use another categorical variable to divide up the data, in addition to the variable on the x-axis. You can produce a grouped bar plot by mapping that variable to fill, which represents the fill color of the bars. You must also use position = \"dodge\", which tells the bars to dodge each other horizontally; if you dont, youll end up with a stacked bar plot. Try remove this argument position = \"dodge\", and see what happens! As with variables mapped to the x-axis of a bar graph, variables that are mapped to the fill color of bars must be categorical rather than continuous variables. Other aesthetics, such as colour (the color of the outlines of the bars), can also be used for grouping variables, but fill is probably what youll want to use. 7.4 Using Colors in a Bar Graph 7.4.1 Problem You want to use different colors for the bars in your graph.The default colors arent the most appealing, so you may want to set them using scale_fill_manual(). Well set the outline color of the bars to black, with colour=\"black\" (Figure 7.9). 7.4.2 Solution Map the appropriate variable to the fill aesthetic (Figure 7.9). ggplot(dat) + geom_col(aes(x = task, y = score, fill = side), position = &quot;dodge&quot;, color = &quot;black&quot;) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) Figure 7.9: Graph with different colors, black outlines, and sorted by percentage change 7.4.3 Discussion In the variable side, there are three values - c, l, r. How does R know if red is for what value, and ditto for other colors. Well, if you did not specify the levels, it goes in alphabetical order. So \"red\"\" is for c, and \"green\" is for r. See Recipe 6.10 for how to change the order of levels in a factor. There are plethora of color names that is availabe in R and that you can select to be used in scale_fill_manual (Figure 7.10). Figure 7.10: Names of many colors available in R. 7.5 Changing Axes titles in a Bar Graph 7.5.1 Problem You want to use a different name to label each axis. Some may simply want to use the same names with capitalizations, or totally different names, especially if abbreviations are used in your spreadsheet. For this we will be using the labs() function. 7.5.2 Solution Map the appropriate variable to the fill aesthetic (Figure 7.11). ggplot(dat) + geom_col(aes(x = task, y = score, fill = side), position = &quot;dodge&quot;, color = &quot;black&quot;) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) + labs (x = &quot;Tasks&quot;, y = &quot;FMS Score&quot;) Figure 7.11: Graph different axes titles 7.6 Changing Legend titles in a Bar Graph 7.6.1 Problem You want to use a different name for the legend title. Some may simply want to use the same names with capitalizations, or totally different names, especially if abbreviations are used in your spreadsheet. For this we will be using the labs() function, and within it the fill argument. In this example, the visual component that separates different sides was the fill color, that is why we changed the name of the fill component. 7.6.2 Solution Map the appropriate variable to the fill aesthetic (Figure 7.12). ggplot(dat) + geom_col(aes(x = task, y = score, fill = side), position = &quot;dodge&quot;, color = &quot;black&quot;) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) + labs (x = &quot;Tasks&quot;, y = &quot;FMS Score&quot;, fill = &quot;Side&quot;) Figure 7.12: Graph different legend title 7.7 Changing font size uniformly across the Bar Graph 7.7.1 Problem You want to magnify the font size for the axes titles, axes labels, legend title, and legend labels. In this case you can use the theme(text = element_text(size=) function. For advance users which is not convered in this book, you can actually custom the fontsize of each and every component to be different. 7.7.2 Solution Map the appropriate variable to the fill aesthetic (Figure 7.13). ggplot(dat) + geom_col(aes(x = task, y = score, fill = side), position = &quot;dodge&quot;, color = &quot;black&quot;) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) + labs (x = &quot;Tasks&quot;, y = &quot;FMS Score&quot;, fill = &quot;Side&quot;) + theme(text = element_text(size= 16)) Figure 7.13: Graph with font size = 16 7.8 Outputting to Bitmap (PNG/TIFF) Files 7.8.1 Problem You want to create a bitmap of your plot, writing to a PNG file. 7.8.2 Solution We will be using ggsave(). First we need to assign the gplot we created with ggplot() to an object, which we can name anything. Here we call the object simply f. There are several important arguments you need. filename is the name of the file and extension you want your image to be called. Here we will use filename = \"my_plot.png\". plot is the specific figure you want to save. Here we will use plot = f. width and height allows you to specify how big your image is. unit is whether your width and height are defined in centimeters, \"cm\", or inches, \"in\". Here I will use units = \"cm\", and a 8 cm by 4 cm width and height, respectively. Lastly, the dpi argument specifies the resoultion of the image. Here we use dpi = 300. The file is saved to the working directory of the session. f &lt;- ggplot(dat) + geom_col(aes(x = task, y = score, fill = side), position = &quot;dodge&quot;, color = &quot;black&quot;) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) + labs (x = &quot;Tasks&quot;, y = &quot;FMS Score&quot;, fill = &quot;Side&quot;) + theme(text = element_text(size= 16)) # Default dimensions are in inches, but you can specify the unit ggsave(filename = &quot;myplot.png&quot;, plot = f, # the name of the image object you created above. width = 8, height = 8, unit = &quot;cm&quot;, dpi = 300) 7.8.3 Discussion For high-quality print output, use at least 300 ppi. Figure 7.14 shows portions of the same plot at different resolutions. Figure 7.14: From left to right: PNG output at 72, 150, and 300 ppi (actual size) R supports other bitmap formats, like BMP, TIFF, and JPEG, but theres really not much reason to use them instead of PNG. The exact appearance of the resulting bitmaps varies from platform to platform. Unlike Rs PDF output device, which renders consistently across platforms, the bitmap output devices may render the same plot differently on Windows, Linux, and Mac OS X. There can even be variation within each of these operating systems. 7.9 Learning check Open up your practice_script.R, updated from the learning check in 6.16. Import the Excel file data/Athlete_1_FMS.xlsx, and assign it to an object dat_fms. See Recipe 5.2. Create another dataset, dat_summ where we take the lower of the two scores for tasks which are assessed bilaterally. See Recipe 6.14. Using the data dat_summ, create a barplot of task as the x axis, and the total FMS score as the y axis. See Recipe 7.1. Make the line colour \"red\", and fill the barplot with the colour \"blue\". See 7.3. Remember to save your file. Download the solution to this learning check below. Click to download the solution "],["line-graphs.html", "Chapter 8 Line Graphs 8.1 Making a Basic Line Graph 8.2 Making a Line Graph with Multiple Lines 8.3 Changing the Appearance of Lines 8.4 Using Themes to Change Overall Appearance of Plot 8.5 Learning check", " Chapter 8 Line Graphs Line graphs are typically used for visualizing how one continuous variable, on the y-axis, changes in relation to another continuous variable, on the x-axis. Often the x variable represents time, but it may also represent some other continuous quantity, for example, the amount of a drug administered to experimental subjects. As with bar graphs, there are exceptions. Line graphs can also be used with a discrete variable on the x-axis. This is appropriate when the variable is ordered (e.g., small, medium, large), but not when the variable is unordered (e.g., cow, goose, pig). Most of the examples in this chapter use a continuous x variable, but well see one example where the variable is converted to a factor and thus treated as a discrete variable. Let us prepare for this chapter by first importing a Vo2 treadmill test data that we have cleaned, and placed in the data folder. See Recipe 6.14. The Excel sheet is called \"treadmill_pt4_clean.xlsx\". dat &lt;- read.xlsx (xlsxFile = &quot;data/treadmill_pt4_clean.xlsx&quot;, sheet = &quot;Sheet1&quot;) dat &lt;- dat %&gt;% mutate (stage = cut_interval(time, length = 210, labels = FALSE)) %&gt;% group_by(stage) %&gt;% mutate (row_id = row_number()) %&gt;% filter (row_id &lt; 37) %&gt;% slice_tail (n = 6)%&gt;% summarise_at (vars(bf:hr), mean) 8.1 Making a Basic Line Graph 8.1.1 Problem You want to make a basic line graph. 8.1.2 Solution Use ggplot() with geom_line(), and specify which variables you mapped to x and y (Figure 8.1): ggplot(dat) + geom_line(aes(x = stage, y = vo2)) Figure 8.1: Basic line graph 8.1.3 Discussion In this sample data set, the x variable, time, is in one column and the y variable, vo2, is in another: stage bf vo2_norm rer vo2 vco2 ve hr 1 30.67 31.97 0.87 2052.83 1777.83 55.17 136.50 2 34.67 34.60 0.88 2222.17 1957.50 59.33 147.00 3 34.67 37.42 0.91 2401.83 2191.33 66.67 161.33 4 38.00 37.83 0.95 2429.00 2312.50 71.17 172.17 5 44.00 41.67 1.00 2675.00 2686.00 85.67 178.50 6 45.67 43.85 1.06 2813.67 2981.17 99.83 185.83 7 54.50 45.50 1.09 2920.17 3195.83 110.33 192.33 8 57.33 45.48 1.05 2910.83 3068.83 112.17 195.17 With ggplot2, the default y range of a line graph is just enough to include the y values in the data. For some kinds of data, its better to have the y range start from zero. You can use ylim() to set the range, or you can use expand_limits() to expand the range to include a value. This will set the range from zero to the maximum value of the demand column in BOD (Figure 8.2): # These have the same result ggplot(dat) + geom_line(aes(x = stage, y = vo2)) + ylim(0, max(dat$vo2)) ggplot(dat) + geom_line(aes(x = stage, y = vo2)) + expand_limits(y = 0) Figure 8.2: Line graph with manually set y range 8.2 Making a Line Graph with Multiple Lines 8.2.1 Problem You want to make a line graph with more than one line. 8.2.2 Solution In addition to the variables mapped to the x- and y-axes, map another (discrete) variable to colour or linetype, as shown in Figure 8.3: # Bring all variables into one column dat_long &lt;- dat %&gt;% dplyr::select (stage, vo2, vco2) %&gt;% pivot_longer(cols = c(vo2:vco2), names_to = &quot;var&quot;, values_to = &quot;val&quot;) %&gt;% mutate (var = factor (var)) # Map supp to colour ggplot(dat_long) + geom_line(aes(x = stage, y = val, colour = var)) # Map supp to linetype ggplot(dat_long) + geom_line(aes(x = stage, y = val, linetype = var)) Figure 8.3: A variable mapped to colour (left); A variable mapped to linetype (right) 8.2.3 Discussion The dat_long data has three columns, including the factor var, which we mapped to colour and linetype: stage var val 1 vo2 2052.83 1 vco2 1777.83 2 vo2 2222.17 2 vco2 1957.50 3 vo2 2401.83 3 vco2 2191.33 4 vo2 2429.00 4 vco2 2312.50 5 vo2 2675.00 5 vco2 2686.00 6 vo2 2813.67 6 vco2 2981.17 7 vo2 2920.17 7 vco2 3195.83 8 vo2 2910.83 8 vco2 3068.83 Note If the x variable is a factor, you must also tell ggplot to group by that same variable, as described below. Line graphs can be used with a continuous or categorical variable on the x-axis. Sometimes the variable mapped to the x-axis is conceived of as being categorical, even when its stored as a number. In the example here, there are eight values of stage: 1, 2, 3, 4, 5, 6, 7, 8. You may want to treat these as categories rather than values on a continuous scale. To do this, convert stage to a factor (Figure 8.4): ggplot(dat_long) + geom_line(aes(x = factor (stage), y = val, colour = var, group = var)) Figure 8.4: Line graph with continuous x variable converted to a factor To convert a variable to a factor , see also Recipe 6.10. Notice the use of group = var. Without this statement, ggplot wont know how to group the data together to draw the lines, and it will not plot anything: ggplot(dat_long) + geom_line(aes(x = factor (stage), y = val, colour = var)) #&gt; geom_path: Each group consists of only one observation. Do you need to adjust #&gt; the group aesthetic? 8.3 Changing the Appearance of Lines 8.3.1 Problem You want to change the appearance of the lines in a line graph. 8.3.2 Solution The type of line (solid, dashed, dotted, etc.) is set with linetype, the thickness (in mm) with size, and the color of the line with colour (or color). These properties can be set (as shown in Figure 8.5) by passing them values in the call to geom_line(): ggplot(dat) + geom_line(aes(x = stage, y = vo2), linetype = &quot;dashed&quot;, size = 1, colour = &quot;blue&quot;) Figure 8.5: Line graph with custom linetype, size, and colour If there is more than one line, setting the aesthetic properties will affect all of the lines. On the other hand, mapping variables to the properties, as we saw in Recipe 8.2, will result in each line looking different. The default colors arent the most appealing, so you may want to use a different palette, as shown in Figure 8.6, by using scale_colour_brewer() or scale_colour_manual(): ggplot(dat_long) + geom_line(aes(x = stage, y = val, colour = var)) + scale_colour_brewer(palette = &quot;Set1&quot;) Figure 8.6: Using a palette from RColorBrewer 8.3.3 Discussion To set a single constant color for all the lines, specify colour outside of aes(). The same works for size, linetype, and point shape (Figure 8.7). You may also have to specify the grouping variable: # If both lines have the same properties, you need to specify a variable to # use for grouping ggplot(dat_long) + geom_line(aes(x = stage, y = val, group = var), colour = &quot;darkgreen&quot;, size = 1.5) # Since supp is mapped to colour, it will automatically be used for grouping ggplot(dat_long) + geom_line(aes(x = stage, y = val, colour = var), linetype = &quot;dashed&quot;) + geom_point(aes(x = stage, y = val, colour = var),shape = 22, size = 3, fill = &quot;white&quot;) Figure 8.7: Line graph with constant size and color (left); With supp mapped to colour, and with points added (right) The range of different linetypes that is available can be seen in (Figure 8.8) Figure 8.8: The different types of linetype you can use. 8.4 Using Themes to Change Overall Appearance of Plot 8.4.1 Problem You want to use premade themes to control the overall plot appearance. 8.4.2 Solution There are many premade themes that are already included in ggplot2. The default ggplot2 theme is theme_grey(), but the examples below also showcase theme_bw(), theme_minimal(), and theme_classic(). To use a premade theme, add theme_bw() or another theme to your plot (Figure 8.9): # Create the base plot hw_plot &lt;- ggplot(dat) + geom_line(aes(x = stage, y = vo2)) # Grey theme (the default) hw_plot + theme_grey() # Black-and-white theme hw_plot + theme_bw() # Minimal theme without background annotations hw_plot + theme_minimal() # Classic theme, with axis lines but no gridlines hw_plot + theme_classic() Figure 8.9: Scatter plot with theme_grey() (the default, top left); with theme_bw() (top right); with theme_minimal() (bottom left); with theme_classic() (bottom right) 8.5 Learning check From your learning check in 7.9, open up your practice_script.R. Import the Excel file data/Athlete_1_treadmill.xlsx, and the sheet raw, and assign it to an object dat. See Recipe 5.2. Also import the the sheet stage from the same file, and assign it to an object dat_stage. Rename the columns of dat to be (\"time\", \"bf\", \"vo2_norm\", \"rer\", \"vo2\", \"vco2\", \"ve\", \"hr\"), respectively. See Recipe 6.2. Remove the first row of the dat data, as it is useless. See Recipe 6.3. Convert the variable time of dat into numeric seconds, and all other variables to numeric. See Recipe 6.5 and 6.4, respectively. Create a variable called stage, where each stage represents 3:30 min worth of VO2 data. See Recipe 6.6. For each stage, create a variable called row_id, which essentially represents the number of 5 sec windows in each stage. See Recipe 6.11 and 6.14. For each stage, remove the data between 3 to 3:30min. See Recipe 6.14 and 6.12.2. For each stage, keep the last six rows of data. See Recipe 6.14 and 6.3. For each stage, calculate for all variables for the mean of the last six rows of data. See Recipe 6.14 and 6.13. Assign this table to an object called dat_summ. Merge the two tables dat_summ and dat_stage, by the common variable called stage. See Recipe 6.15. Assign this table to an object called df_plot. Using df_plot, make a line plot with with speed as the x axis, and vo2 as the y axis, and assign it to an object called f. See Recipe 8.1. Save image f to a file called myfig.png. See Recipe 7.8. You must be wondering, why cant I see the figure. What must you do to print the picture? See Recipe 2.3. Download the solution to this learning check below. Click to download the solution "],["your-assignment.html", "Chapter 9 Your Assignment 9.1 Tasks to complete 9.2 Codes", " Chapter 9 Your Assignment This assignment is designed to create a graphs to visualize the results of the FMS and Incremental Treamdill Test analyses. There are two things to note: With the graphs created, export it and paste into your word assignment document. Submit the code together with your assignments onto FASER. The assignment is EASY!!! I am only asking you to copy and paste relevant recipes which you have learned, and edit relevant values in the functions arguments. For example, when you see the value XXX, I am asking you to replace it with the relevant value. I am NOT going to ask you to create codes from scratch. I am not cruel. To do your assignment, follow these steps: In your desktopsse201 folder, created in learning check 4.2. Create a project called assignment inside the folder. See Recipe 4.2. Download the R script in this link assignment_analysis.R. Save this script into the se201/assignment folder. When you open it, you should see the codes below. Click to download the script for assignment Inside se201/assignment folder, create a data folder. Put all your raw Excel data into the data folder. 9.1 Tasks to complete 1: Import data. Replace XXX with your Excel files name and appropriate sheet name. See Recipe 5.2. 2: Group FMS summary. Find the number of athletes who scored each level in each FMS tasks. See Recipe 6.14. 3: Group FMS barplot. Plot a bar graph of task as the x axis, and count as the y axis, fill colour set to the different FMS tasks. Give the graph a succinct title. Make the axis texts and titles to be font size 12. Replace XXX with the appropriate values. See Recipe ??. Save the plot - See Recipe 7.8. 4: Individual FMS barplot. Plot a bar graph of task as the x axis, and score as the y axis, fill colour set to the different tested side. Give the graph a succinct title. Make the axis texts and titles to be font size 12. Replace XXX with the appropriate values. See Recipe 7.3. Save the plot - See Recipe 7.8. 5: Rename columns. Rename all columns to lower cases, without white spaces. See Recipe 6.2. 6: Maker characters to numeric. Replace XXX with the appropriate function to convert all columns apart from time from character to numbers. See Recipe 6.4. 7: Find the average 30 sec value (between 2:30 to 3:00min) per stage for all variables. Replace XXX with the appropriate values. See Recipe 6.14. 8: Combine two tables. Merge the average data from Task 4 with the object called dat_stage along the common header. Replace XXX with the appropriate values. See Recipe 6.15. 9: Make a lactate graph. Plot a line graph of speed as the x axis, and lactacte as the y axis, with the line colour blue. Give the graph a succinct title. Make the axis texts and titles to be font size 12. Replace XXX with the appropriate values. See Recipes 8.1, 8.3. Save the plot - See Recipe 7.8. 10: Make a heart rate graph. Plot a line graph of speed as the x axis, and hr as the y axis, with the line colour blue. Give the graph a succinct title. Make the axis texts and titles to be font size 12. Replace XXX with the appropriate values. See Recipes 8.1, 8.3. Save the plot - See Recipe 7.8. 11: Export the dat_vo2_comb dataframe to an excel table. This result can be used to fill in the stage by stage results in your assignment under incremental treadmill test. Replace XXX with the name of the dataframe you are wanting to export. See where the data is being exported into. See Recipe 5.3. 9.2 Codes This is the codes you will see in the script downloaded. ## --------------------------- ## ## ## Author: Bernard Liew ## ## Date Created: 2020-09-02 ## ## ## --------------------------- ## ## Notes: ## ## ## --------------------------- ## --------------------------- ## load up the packages we will need if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;) pacman::p_load(tidyverse, # All purpose wrangling for dataframes lubridate, # Time tibbletime, openxlsx) # writing excel documents ## Custom function to get interection between two lines ## To get Lactate and Anaerobic Threshold values ## Ignore the complexity, highlight between Start and End, Run -------------- ## Start ---------------- curve_intersect &lt;- function (curve1, curve2, empirical = TRUE, domain = NULL) { if (!empirical &amp; missing(domain)) { stop(&quot;&#39;domain&#39; must be provided with non-empirical curves&quot;) } if (!empirical &amp; (length(domain) != 2 | !is.numeric(domain))) { stop(&quot;&#39;domain&#39; must be a two-value numeric vector, like c(0, 10)&quot;) } if (empirical) { curve1_f &lt;- approxfun(curve1$x, curve1$y, rule = 2) curve2_f &lt;- approxfun(curve2$x, curve2$y, rule = 2) point_x &lt;- uniroot(function(x) curve1_f(x) - curve2_f(x), c(min(curve1$x), max(curve1$x)))$root point_y &lt;- curve2_f(point_x) } else { point_x &lt;- uniroot(function(x) curve1(x) - curve2(x), domain)$root point_y &lt;- curve2(point_x) } return(list(x = point_x, y = point_y)) } ## End ---------------- ## Import data (Task 1) ### Import the sheet with the Vo2 data dat_vo2 &lt;- read.xlsx (xlsxFile = &quot;data/XXX.xlsx&quot;, sheet = &quot;XXX&quot;) ### Import the sheet with the lactate data dat_stage &lt;- read.xlsx (xlsxFile = &quot;data/XX.xlsx&quot;, sheet = &quot;XXX&quot;) ### Import group FMS data dat_fms_grp &lt;- read.xlsx (xlsxFile = &quot;data/Group FMS raw data.xlsx&quot;, sheet = &quot;XXX&quot;) ### Import individual FMS data dat_fms_indv &lt;- read.xlsx (xlsxFile = &quot;data/Individual FMS raw data.xlsx&quot;, sheet = &quot;XXX&quot;) ## Analyze FMS data ------------------------------------------------------------ ################################ Group FMS ##################################### ### Number of athletes scoring a level in FMS (Task 2) dat_fms_grp &lt;- dat_fms_grp %&gt;% # original data pivot_longer(cols = -id, names_to = &quot;task&quot;, values_to = &quot;score&quot;) %&gt;% group_by(XXX, XXX) %&gt;% summarize (count = n()) ### Plot group FMS (Task 3) plot_fms_grp &lt;- ggplot (XXX) + geom_col(aes(x = XXX, y = XXX, fill = XXX), position = &quot;dodge&quot;) + scale_fill_discrete(drop=FALSE) + scale_x_discrete(drop=FALSE) ggsave(filename = &quot;grp_fms.png&quot;, plot = plot_fms_grp , # the name of the image object you created above. width = 8, height = 8, unit = &quot;cm&quot;, dpi = 300) ############################# Individual FMS ################################### ### Plot group FMS (Task 4) plot_fms_indv &lt;- ggplot(XXX) + geom_col(aes(x = XXX, y = XXX, fill = XXX), position = &quot;dodge&quot;) ggsave(filename = &quot;ind_fms.png&quot;, plot = plot_fms_indv, # the name of the image object you created above. width = 8, height = 8, unit = &quot;cm&quot;, dpi = 300) ## Analyze VO2 data ------------------------------------------------------------ ### Rename column names of Vo2 data (Task 5) new_names &lt;- c() colnames (dat_vo2) &lt;- new_names ### Remove first row of Vo2 data dat_vo2 &lt;- dat_vo2 %&gt;% slice (-c(1)) ### Convert column type of Vo2 data (Task 6) dat_vo2 &lt;- dat_vo2 %&gt;% mutate (bf = XXX (bf), vo2_norm = XXX(vo2_norm), rer = XXX(rer), vo2 = XXX(vo2), vco2 = XXX(vco2), ve = XXX(ve), hr = XXX(hr)) %&gt;% # Convert time to seconds mutate (time = time %&gt;% str_squish() %&gt;% ms() %&gt;% as.period(unit = &quot;sec&quot;) %&gt;% as.numeric ()) ### Create a &quot;stage&quot; variable in Vo2 data dat_vo2 &lt;- dat_vo2 %&gt;% mutate (stage = cut_interval(time, length = 210, labels = FALSE)) ### Calculate average 30s data per stage of Vo2 data (Task 7) dat_vo2_summ &lt;- dat_vo2 %&gt;% group_by(XXX) %&gt;% # for each group mutate (row_id = row_number()) %&gt;% filter (row_id &lt; XXX) %&gt;% # throw away all data between 3 to 3:30 min slice_tail (n = XXX)%&gt;% # keep last 30 sec per stage summarise_at (vars(bf:hr), mean) ### Combine Vo2 staged data with lactate data (Task 8) dat_vo2_comb &lt;- dat_vo2_summ %&gt;% inner_join(dat_stage, by = &quot;XXX&quot;) ### Plot #### Lactate (Task 9) f &lt;- ggplot (dat_vo2_comb) + geom_line (aes (x = XXX, y = XXX), colour = &quot;XXX&quot;, size = 1.5) + labs (x = &quot;Speed (km/h)&quot;, y = &quot;Lactate (mmol)&quot;) + theme_bw() + labs (title = &quot;XXX&quot;) + theme(axis.text.x = element_text(size = XXX), axis.text.y = element_text(size = XXX), axis.title.x = element_text(size = XXX), axis.title.y = element_text(size = XXX)) ggsave(filename = &quot;lactate.png&quot;, plot = f, # the name of the image object you created above. width = 8, height = 8, unit = &quot;cm&quot;, dpi = 300) #### Heart rate (Task 10) f &lt;- ggplot (dat_vo2_comb) + geom_line (aes (x = XXX, y = XXX), colour = &quot;XXX&quot;, size = 1.5) + labs (x = &quot;Speed (km/h)&quot;, y = &quot;Lactate (mmol)&quot;) + theme_bw() + labs (title = &quot;XXX&quot;) + theme(axis.text.x = element_text(size = XXX), axis.text.y = element_text(size = XXX), axis.title.x = element_text(size = XXX), axis.title.y = element_text(size = XXX)) ggsave(filename = &quot;heartrate.png&quot;, plot = f, # the name of the image object you created above. width = 8, height = 8, unit = &quot;cm&quot;, dpi = 300) #### Export table (Task 8) write.xlsx(x = XXX, sheetName = &quot;vo2&quot;, file = &quot;data/vo2_table.xlsx&quot;) ## Bonus Codes to help you ------------------------------------------------- ### Click on everything below and run ### Get VO2 max , VO2 max relative rolling_mean6 &lt;- rollify(mean, window = 6) raw_roll &lt;- dat_vo2 %&gt;% arrange (desc (time)) %&gt;% mutate_at (vars(bf:hr), rolling_mean6) %&gt;% na.omit() %&gt;% summarise_at(vars(bf:hr), max, na.rm = TRUE) %&gt;% mutate (vo2 = vo2/1000) cat (&quot;The relative peak O2 uptake is:&quot;, raw_roll$vo2_norm, &quot;(ml/kg/min)&quot;) cat (&quot;The absolute peak O2 uptake is:&quot;, raw_roll$vo2, &quot;(L/min)&quot;) ### Get max aerobic speed #### Get maximal stage completed number max_stage &lt;- max (dat_vo2$stage) #### Find number of rows in final stage dat_vo2_last &lt;- dat_vo2 %&gt;% filter (stage == max_stage) #### Calculate based on rows the proportion of stage completed last_stage_prop &lt;- nrow (dat_vo2_last)/42 #### Get the speed increment, which should be even across all stage increment &lt;- mean (diff(dat_vo2_comb$speed, lag = 1)) #### Get the maximal aerobic speed ans &lt;- last_stage_prop * increment max_aerobic_speed &lt;- ans + max (dat_vo2_comb$speed) cat (&quot;The maximal aerobic speed:&quot;, max_aerobic_speed, &quot;(Km/h)&quot;) ### Get Lactate and Anaerobic Thresold m &lt;- loess (lactate ~ speed, data = dat_vo2_comb) min.speed &lt;- ceiling (min (dat_vo2_comb$speed)) max.speed &lt;- floor (max (dat_vo2_comb$speed)) n_points &lt;- 100 new_lac &lt;- data.frame (speed = seq (min.speed, max.speed, length.out = n_points)) new_lac$y &lt;- predict (m, newdata = new_lac) colnames(new_lac)[1] &lt;- &quot;x&quot; #### Threshold values lactate_thres &lt;- data.frame (x = seq (min.speed, max.speed, length.out = n_points), y = 2) anaerobic_thres &lt;- data.frame (x = seq (min.speed, max.speed, length.out = n_points), y = 4) #### Speed at thresold speed_at_lac_thres &lt;- curve_intersect(new_lac, lactate_thres)$x speed_at_ane_thres &lt;- curve_intersect(new_lac, anaerobic_thres)$x ### Get HR at thresholds m &lt;- loess (hr ~ speed, data = dat_vo2_comb) new_hr &lt;- data.frame (speed = seq (min.speed, max.speed, length.out = n_points)) new_hr$y &lt;- predict (m, newdata = new_hr) colnames(new_hr)[1] &lt;- &quot;x&quot; hr_at_lac_thres &lt;- new_hr[which.min(abs(new_hr$x -speed_at_lac_thres)), &quot;y&quot;] %&gt;% round (0) hr_at_ane_thres &lt;- new_hr[which.min(abs(new_hr$x -speed_at_ane_thres)), &quot;y&quot;] %&gt;% round pi &lt;- data.frame(Variable = c(&quot;Lactate Threshold&quot;, &quot;Anaerobic Threshold&quot;), Speed = c(speed_at_lac_thres, speed_at_ane_thres ), HR = c(hr_at_lac_thres, hr_at_ane_thres)) cat (&quot;The speed (km/h) and heart rate (b/min) at lactate threshold are:&quot;, pi[1,2], &quot;and&quot;, pi[1,3]) cat (&quot;The speed (km/h) and heart rate (b/min) at anaerobic threshold are:&quot;, pi[2,2], &quot;and&quot;, pi[2,3]) df_plot &lt;- data.frame(speed = new_lac$x, lactate = new_lac$y, hr = new_hr$y, speed_lac = speed_at_lac_thres, speed_ane = speed_at_ane_thres) %&gt;% pivot_longer(cols = lactate:hr, names_to = &quot;var&quot;, values_to = &quot;val&quot;) ggplot (df_plot) + geom_line (aes (x = speed, y = val)) + geom_vline(xintercept = speed_at_lac_thres, color = &quot;blue&quot;, linetype = &quot;dashed&quot;) + geom_vline(xintercept = speed_at_ane_thres, color = &quot;red&quot;, linetype = &quot;dashed&quot;) + facet_wrap(~var, ncol = 2, scales = &quot;free&quot;) + labs (x = &quot;Speed&quot;, y = &quot;Values&quot;) + theme_bw() + labs (title = &quot;Plot of Treadmill test&quot;) + theme(axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title.x = element_text(size = 16), axis.title.y = element_text(size = 16)) "]]
