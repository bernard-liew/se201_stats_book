[{"path":"index.html","id":"intro","chapter":"1 Preface","heading":"1 Preface","text":"purpose book teach skills computer programming help analyse commonly collected data Sports Science Coaching environment.book isThis books intended cookbook based approach. problems solutions. Recipes provided can edit necessary portions needs.book notThis book cover one topic extensive detail. interested conducting analyses creating plots covered book, ’m sure ’ll find answer quick Google search!","code":""},{"path":"index.html","id":"why-is-r-so-great","chapter":"1 Preface","heading":"1.1 Why is R so great?","text":"R 100% free result, huge support community. Unlike SPSS even Excel, R , always completely free. means can actually apply skills workplace graduate. also huge community R programmers constantly develop distribute new R functionality packages speed leaves packages dust! ever question implement something R, quick Google search lead answer virtually every single time.R 100% free result, huge support community. Unlike SPSS even Excel, R , always completely free. means can actually apply skills workplace graduate. also huge community R programmers constantly develop distribute new R functionality packages speed leaves packages dust! ever question implement something R, quick Google search lead answer virtually every single time.R incredibly versatile. can use R everything calculating simple summary statistics, performing complex simulations creating gorgeous plots. can imagine analytical task, can almost certainly implement R.R incredibly versatile. can use R everything calculating simple summary statistics, performing complex simulations creating gorgeous plots. can imagine analytical task, can almost certainly implement R.Analyses conducted R transparent, easily shareable, reproducible. ask SPSS user conducted specific analyses, either ) remember, B) Try (nervously) construct analysis procedure spot makes sense - may may correspond actually months years ago, C) Ask house. used primarily use SPSS, speak experience . ask R user (uses good programming techniques!) conducted analysis, always able show exact code used. course, doesn’t mean used appropriate analysis interpreted correctly, original code, problems completely transparent!Analyses conducted R transparent, easily shareable, reproducible. ask SPSS user conducted specific analyses, either ) remember, B) Try (nervously) construct analysis procedure spot makes sense - may may correspond actually months years ago, C) Ask house. used primarily use SPSS, speak experience . ask R user (uses good programming techniques!) conducted analysis, always able show exact code used. course, doesn’t mean used appropriate analysis interpreted correctly, original code, problems completely transparent!","code":""},{"path":"index.html","id":"rrelationship","chapter":"1 Preface","heading":"1.2 Why R is like a relationship…","text":"Yes, R much like relationship. Like relationships, two major truths R programming:\nFigure 1.1: R become best friend worst nightmare. bad times make good times oh much sweeter.\nnothing frustrating code workThere nothing frustrating code workThere nothing satisfying code work!nothing satisfying code work!Anything worth , losing weight getting degree, takes time. Learning R different. Especially first experience programming, going experience lot headaches get started. run error error pound fists table screaming: “ISN’T CODE WORKING?!?!? must something wrong stupid software!!!” spend hours trying find bug code, find - frustratingly enough, extra space missed comma somewhere. ’ll wonder ever decided learn R SPSS “nice easy.”\nFigure 1.2: first meet R, look fugly ’ll wonder kind sick joke. trust , learn talk , clean bit, friends crazy jealous.\nTrust , gain programming experience, ’ll experience fewer fewer bugs (though ’ll never go away completely). get initial barriers, ’ll find conducting analyses much, much faster ever .","code":""},{"path":"index.html","id":"things-students-get-wrong","chapter":"1 Preface","heading":"1.3 3 things students get wrong","text":"3 common errors students make result alot head banging, feeling frustrated. aware errors, fall trap.","code":""},{"path":"index.html","id":"wrong-method-of-launching-software","chapter":"1 Preface","heading":"1.3.1 Wrong method of launching software","text":"biggest source frustration.created project folder work, launch software clicking blue cube symbol seen Figure 1.3. chapter 4, explain launch software manner.\nFigure 1.3: symbol press launch software asssignment.\n","code":""},{"path":"index.html","id":"not-running-code-from-start","chapter":"1 Preface","heading":"1.3.2 Not running code from START","text":"Looking figure 1.4 , say ran code line 3 line 20, close software - maybe leaving work partially done day, next time launch software, recollection stopped. need run software first line code stopped, continue work.\nFigure 1.4: restart analysis, software memory stopped previously .\n","code":""},{"path":"index.html","id":"typographical-errors","chapter":"1 Preface","heading":"1.3.3 Typographical errors","text":"50% student queries past, centered around issue typographical errors. Given humans can () communicate without perfect grammar, punctuation, spelling, naturally assume (wrongly) computers can ignore mistakes can. Computers distinguish supposed . example, create table call mytable, tried calculations table, error appear, Error: unexpected symbol \"table\". error means computer find table, EXIST.","code":""},{"path":"index.html","id":"r-resources","chapter":"1 Preface","heading":"1.4 R resources","text":"","code":""},{"path":"index.html","id":"r-books","chapter":"1 Preface","heading":"1.4.1 R books","text":"many, many excellent (non-pirate) books R, available online free. highly recommend:","code":""},{"path":"get-started.html","id":"get-started","chapter":"2 Getting Started","heading":"2 Getting Started","text":"","code":""},{"path":"get-started.html","id":"INSTALL-GET-STARTED","chapter":"2 Getting Started","heading":"2.1 Installing Base-R and RStudio","text":"use R, ’ll need download 2 software: Base-R, RStudio. Base-R basic software contains R programming language. RStudio software makes programming easier. everyday parlance, R engine RStudio car’s frame. Just like can transfer engine different car frames, can use R using platforms. use RStudio. course, totally free open source.","code":""},{"path":"get-started.html","id":"check-for-version-updates","chapter":"2 Getting Started","heading":"2.1.1 Check for version updates","text":"R RStudio around several years – however, constantly updated new features bug-fixes. time writing sentence (“2022-09-14”), latest version Base-R 4.2.1, latest version RStudio 2022.07.1.\nFigure 2.1: R logo\ninstall Base-R, click one following links follow instructions.’ve installed base-R computer, try opening . see screen like one Figure 2.2 (Windows version). can see, base R much bare-bones software. ’s kind equivalent simple text editor comes computer.\nFigure 2.2: base R application looks. can use base R application alone, people know use RStudio – software helps write use R code efficiently!\n\nFigure 2.3: RStudio logo\ncan pretty much everything want within base-R, ’ll find people days R programming application called RStudio. RStudio graphical user interface (GUI)-like interface R makes programming R bit easier. fact, ’ve installed RStudio, ’ll likely never need open base R application .download install RStudio (around 40mb), click link : https://rstudio.com/products/rstudio/download/#download/","code":""},{"path":"get-started.html","id":"INSTALL-GET-FAMILIAR","chapter":"2 Getting Started","heading":"2.2 The four RStudio Windows","text":"Let’s go ahead boot RStudio see looks! open RStudio, ’ll see following four windows (also called panes) shown Figure 2.4. However, windows might different order Figure 2.4. Ignore fact screen shows black shows white. like wall paper computer, makes eyes ease.\nFigure 2.4: four panes RStudio.\nNow, let’s see window detail.","code":""},{"path":"get-started.html","id":"source---your-notepad-for-code","chapter":"2 Getting Started","heading":"2.2.1 Source - Your notepad for code","text":"\nFigure 2.5: Source contains individual R scripts. code won’t evaluated send Console.\nsource pane create edit “R Scripts” - collections code. Don’t worry, R scripts just text files “.R” extension. open RStudio, automatically start new Untitled script. start typing untitled R script, always save file new file name (like, “StatsAnal.R”). way, something computer crashes ’re working, R code waiting re-open RStudio.’ll notice ’re typing code script Source panel, R won’t actually evaluate code type. R actually evaluate code, need first ‘send’ code Console (’ll talk next section).many ways send code Source console. slowest way copy paste. faster way highlight code wish evaluate clicking “Run” button top right Source. Alternatively, can use hot-key “Command + Return” Mac, “Control + Enter” PC send highlighted code console.","code":""},{"path":"get-started.html","id":"console-rs-heart","chapter":"2 Getting Started","heading":"2.2.2 Console: R’s Heart","text":"\nFigure 2.6: console calculation heart R. code (eventually) go .\nconsole heart R. R actually evaluates code. beginning console ’ll see character . prompt tells R ready new code. can type code directly console prompt get immediate response. example, type 1+1 console press enter, ’ll see R immediately gives output 2.Try calculating 1+1 typing code directly console - press Enter. see result [1] 2. Don’t worry [1] now, ’ll get later. now, ’re happy just see 2. , type code Source, send code Console highlighting code clicking “Run” button top right hand corner Source window. Alternatively, can use hot-key “Command + Return” Mac “Control + Enter” Windows.Tip: Try write code document Source. type directly Console quick calculations like using calculator.can see, can execute code either running Source typing directly Console. However, 99% time, using Source rather Console. reason straightforward: type code console, won’t saved (though can look back command History). make mistake typing code console, ’d re-type everything . Instead, ’s better write code Source. ready execute code, can send “Run” console.","code":"\n1+1## [1] 2"},{"path":"get-started.html","id":"environment-history","chapter":"2 Getting Started","heading":"2.2.3 Environment / History","text":"\nFigure 2.7: environment panel shows objects defined current workspace.\nEnvironment tab panel shows names data objects (like vectors, matrices, dataframes) ’ve defined current R session. can also see information like number observations rows data objects. tab also clickable actions like “Import Dataset” open graphical user interface (GUI) importing data R.History tab panel simply shows history code ’ve previously evaluated Console.get comfortable R, might find Environment / History panel useful. now can just ignore . want declutter screen, can even just minimize window clicking minimize button top right panel.","code":""},{"path":"get-started.html","id":"files-plots-packages-help","chapter":"2 Getting Started","heading":"2.2.4 Files / Plots / Packages / Help","text":"Files / Plots / Packages / Help panel shows lots helpful information. Let’s go tab detail:Files - files panel gives access file directory hard drive. One nice feature “Files” panel can use set working directory. ’ll talk working directories detail soon.Files - files panel gives access file directory hard drive. One nice feature “Files” panel can use set working directory. ’ll talk working directories detail soon.Plots - Plots panel (big surprise), shows plots. buttons opening plot separate window exporting plot pdf jpeg (though can also code using pdf() jpeg() functions.)Plots - Plots panel (big surprise), shows plots. buttons opening plot separate window exporting plot pdf jpeg (though can also code using pdf() jpeg() functions.)Let’s see plots displayed Plots panel. Run code right display histogram weights chickens stored ChickWeight dataset. , see plot similar one Figure 2.8 show Plots panel.\nFigure 2.8: plot panel contains plots, like histogram distribution chicken weights.\nPackages - Shows list R packages installed harddrive indicates whether currently loaded. Packages loaded current session checked installed yet loaded unchecked. ’ll discuss packages detail next section.Packages - Shows list R packages installed harddrive indicates whether currently loaded. Packages loaded current session checked installed yet loaded unchecked. ’ll discuss packages detail next section.Help - Help menu R functions. can either type name function search window, use code search function name Help - Help menu R functions. can either type name function search window, use code search function name ","code":"\nhist(x = ChickWeight$weight,\n     main = \"Chicken Weights\",\n     xlab = \"Weight\",\n     col = \"skyblue\",\n     border = \"white\")\n?hist   # How does the histogram function work?\n?t.test # What about a t-test?"},{"path":"get-started.html","id":"INSTALL-READ-WRITE-CODE","chapter":"2 Getting Started","heading":"2.3 Reading and writing Code","text":"","code":""},{"path":"get-started.html","id":"code-chunks","chapter":"2 Getting Started","heading":"2.3.1 Code Chunks","text":"book, R code (almost) always presented separate gray box like one:called code chunk. always able copy paste code chunks directly R. copy chunk work , likely code refers package, function, object defined previous chunk. , read back look previous chunk contains missing definition.","code":"\n# A code chunk\n\n# Define a vector a as the integers from 1 to 5\na <- 1:5\n\n# Print a\na## [1] 1 2 3 4 5\n# What is the mean of a?\nmean(a)## [1] 3"},{"path":"get-started.html","id":"comments-with","chapter":"2 Getting Started","heading":"2.3.2 Comments with #","text":"Lines begin # comments. evaluate code starts #, R just ignore line. book, comments either literal comments write directly explain code, output generated automatically R. example, code chunk , see lines starting ##. output previous line(s) code. run code , see output console.","code":"\n# This is a comment I wrote\n\n1 + 2## [1] 3\n# The line above (## [1] 3) is the output from the previous code that has been 'commented out'"},{"path":"get-started.html","id":"element-numbers-in-output-1","chapter":"2 Getting Started","heading":"2.3.3 Element numbers in output [1]","text":"output see often start one number(s) brackets [1]. just visual way telling numbers occur output. example, code , print long vector containing multiples 2 0 100:can see, first line output starts ## [1], next two lines start [18] [35]. just telling 0 [1]st element, 34 [18]th element, 68 [35]th element. Sometimes information helpful, time can just ignore .","code":"\nseq(from = 0, to = 100, by = 2)##  [1]   0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36\n## [20]  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74\n## [39]  76  78  80  82  84  86  88  90  92  94  96  98 100"},{"path":"get-started.html","id":"INSTALL-DEBUG","chapter":"2 Getting Started","heading":"2.4 Debugging","text":"programming, always, mean always, make errors (also called bugs) code. might misspell function, include extra comma, days…R just won’t want work (, see section R like Relationship).Debugging always challenge. However, time ’ll learn bugs common get faster faster finding correcting .common bugs ’ll run start R journey.","code":""},{"path":"get-started.html","id":"r-is-not-ready","chapter":"2 Getting Started","heading":"2.4.1 R is not ready (>)","text":"Another common problem occurs R seem responding code. , might run code like mean(x) expecting output, instead, nothing happens. can frustrating , rather getting error, just nothing happens . common reason R isn’t ready new code, instead, waiting finish code started earlier, never properly finished.Think way, R can one two states: either Ready (>) new code, Waiting (+) finish old code. see state R , look symbol console. > symbol means R Ready new code – usually want see. + symbol means R Waiting (properly) finish code started . see + symbol, matter much new code write, R won’t actually evaluate finish code started .Thankfully easy solution problem (See Figure 2.9): Just hit escape key keyboard. cancel R’s waiting state make Ready!\nFigure 2.9: turn R Waiting (+) state Ready (>) state, just hit Escape.\n","code":""},{"path":"get-started.html","id":"misspelled-object-or-function","chapter":"2 Getting Started","heading":"2.4.2 Misspelled object or function","text":"spell object function incorrectly, ’ll receive error like Error: find function Error: object 'x' found.code , ’ll try take mean vector data, misspell function mean()Now, ’ll misspell object data dta:R case-sensitive, don’t use correct capitalization ’ll receive error. code , ’ll use Mean() instead correct version mean()correct version object data function mean() correctly spelled:","code":"\ndata <- c(1, 4, 3, 2, 1)\n\n# Misspelled function: should be mean(x), not meeen(x)\nmeeen(data)\n# Misspelled object: should be data, not dta\nmean(dta)\n# Capitalization is wrong: should be mean(), not Mean()\nMean(data)\n# Correct: both the object and function are correctly spelled\nmean(data)## [1] 2.2"},{"path":"get-started.html","id":"punctuation-problems","chapter":"2 Getting Started","heading":"2.4.3 Punctuation problems","text":"Another common error bad coding “punctuation”. , mean extra space, missing comma, using comma (,) instead period (.). code , ’ll try create vector using periods instead commas:used periods instead commas, get error. correct versionIf include extra space middle name object function, ’ll receive error. code , ’ll accidentally write Chick Weight instead ChickWeight:extra space object name, get error. correction:","code":"# Wrong: Using periods (.) instead of commas (,)\nmean(c(1. 4. 2))\n# Correct\nmean(c(1, 4, 2))## [1] 2.333333# Wrong: Extra space in the ChickWeight object name\nhead(Chick Weight)\n# Correct:\nhead(ChickWeight)"},{"path":"get-started.html","id":"INSTALL-LEARNING-CHECK","chapter":"2 Getting Started","heading":"2.5 Learning check","text":"Download Base-R software RStudio software.Download Base-R software RStudio software.Open RStudio software type following code console. give ?Open RStudio software type following code console. give ?Look code . R return third line? Make prediction, test code .","code":"\n1+10\na <- 10\na + 10\na"},{"path":"basics.html","id":"basics","chapter":"3 The Basics","heading":"3 The Basics","text":"","code":""},{"path":"basics.html","id":"download-and-load-packages","chapter":"3 The Basics","heading":"Download and load packages","text":"Packages like iphone apps. iphone comes basic functionality, e.g. weather-app. wanted , download. Subsequent chapters going start code chunk. needed running one chapter independent others. Notice using package called pacman. package manager, loads package typed , available, download automatically CRAN load .chapter, ’ll go basics R language RStudio programming environment.","code":"\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse, # All purpose wrangling for dataframes\n               yarrr) "},{"path":"basics.html","id":"BASICS-CONSOLE","chapter":"3 The Basics","heading":"3.1 The command-line (Console)","text":"\nFigure 3.1: Yep. R really just fancy calculator.\nR code, , just text. can write R code new script within R RStudio, text editor. However, just writing code won’t whole job – order code executed (aka, interpreted) need send Console.\nFigure 3.2: can always type code directly command line get immediate response.\nR, command-line interpreter starts > symbol. called prompt. called prompt? Well, ’s “prompting” feed R code. fastest way R evaluate code type R code directly command-line interpreter. example, type 1+1 interpreter hit enter ’ll see followingAs can see, R returned (thankfully correct) value 2. ’ll notice console also returns text [1]. just telling index value next . Don’t worry now, make sense later. can see, R can, thankfully, basic calculations. fact, heart, R technically just fancy calculator. ’s like saying Michael Jordan just fancy ball bouncer. (), much .","code":"\n1+1## [1] 2"},{"path":"basics.html","id":"writing-r-scripts-in-an-editor","chapter":"3 The Basics","heading":"3.2 Writing R scripts in an editor","text":"certainly many cases makes sense type code directly console. example, open help menu new function ? command, take quick look dataset head() function, simple calculations like 1+1, type directly console. However, problem writing code console nothing write saved. make error, want make change earlier code, type . efficient. (many reasons), ’ll write important code want save R script. R script just bunch R code single file. can write R script text editor, save .R suffix make clear contains R code.} editor.RStudio, ’ll write R code Source window. start writing new R script RStudio, click File – New File – R Script.open new script, ’ll see blank page waiting write much R code ’d like. Figure 3.3, new script called examplescript random calculations.\nFigure 3.3: ’s new script looks editor window RStudio. code type won’t executed send console.\ncan several R scripts open source window separate tabs (like ).","code":""},{"path":"basics.html","id":"send-code-from-a-source-to-the-console","chapter":"3 The Basics","heading":"3.2.1 Send code from a source to the console","text":"\nFigure 3.4: evaluate code source, highlight run .\ntype code R script, ’ll notice , unlike typing code Console, nothing happens. order R interpret code, need send Editor Console. ways , common way use :Highlight code want run (mouse holding Shift), use Alt+Enter shortcut.","code":""},{"path":"basics.html","id":"a-brief-style-guide-commenting-and-spacing","chapter":"3 The Basics","heading":"3.3 A brief style guide: Commenting and spacing","text":"Like programming languages, R isn’t just meant read computer, ’s also meant read humans. reason, ’s important code looks nice understandable people future self. keep things brief, won’t provide complete style guide – instead ’ll focus two critical aspects good style: commenting spacing.\nFigure 3.5: Stan discovered season six South Park, future self lazy, possibly intoxicated moron. future self favor make code look nice. Also maybe go run .\n","code":""},{"path":"basics.html","id":"commenting-code-with-the-pound-sign","chapter":"3 The Basics","heading":"3.3.1 Commenting code with the # (pound) sign","text":"Comments completely ignored R just whomever reading code. can use comments explain certain line code , just visually separate meaningful chunks code . Comments R designated # (pound) sign. Whenever R encounters # sign, ignore code # sign line. Additionally, coding editors (like RStudio) editor display comments separate color standard R code remind ’s comment:example short script nicely commented. Try make scripts look like !stress enough important comment code! Trust , even don’t plan sharing code anyone else, keep mind future self reading future.","code":"\n# Author: Pirate Jack\n# Title: My nicely commented R Script\n# Date: None today :(\n\n# Step 1: Load the yarrr package\nlibrary(yarrr)\n\n# Step 2: See the column names in the movies dataset\nnames(movies)\n\n# Step 3: Calculations\n\n# What percent of movies are sequels?\nmean(movies$sequel, na.rm = T)\n\n# How much did Pirate's of the Caribbean: On Stranger Tides make?\nmovies$revenue.all[movies$name == 'Pirates of the Caribbean: On Stranger Tides']"},{"path":"basics.html","id":"spacing","chapter":"3 The Basics","heading":"3.3.2 Spacing","text":"Howwouldyouliketoreadabookiftherewerenospacesbetweenwords?\n’mguessingyouwouldn’t.\nSoeverytimeyouwritecodewithoutproperspacing,rememberthissentence.Commenting isn’t way make code legible. ’s important make appropriate use spaces line breaks. example, include spaces arithmetic operators (like =, + -) commas (’ll get later). example, look following code:\nFigure 3.6: Don’t make code look like sick Triceratops diarrhea left behind Jeff Goldblum.\ncode looks like shit. Don’t write code like . wiil make eyes hurt. Now, let’s use liberal amounts commenting spacing make look less shitty.See much better second chunk code looks? comments tell us purpose behind code, spaces line-breaks separating distinct elements.","code":"\n# Shitty looking code\na<-(100+3)-2\nmean(c(a/100,642564624.34))\nt.test(formula=revenue.all~sequel,data=movies)\nplot(x=movies$budget,y=movies$dvd.usa,main=\"myplot\")\n# Some meaningless calculations. Not important\n\na <- (100 + 3) - 2\nmean(c(a / 100, 642564624.34))\n\n# t.test comparing revenue of sequels v non-sequels\n\nt.test(formula = revenue.all ~ sequel,\n       data = movies)\n\n# A scatterplot of budget and dvd revenue. \n#  Hard to see a relationship\n\nplot(x = movies$budget,\n     y = movies$dvd.usa,\n     main = \"myplot\")"},{"path":"basics.html","id":"objects-and-functions","chapter":"3 The Basics","heading":"3.4 Objects and functions","text":"understand R works, need know R revolves around two things: objects functions. Almost everything R either object function. following code chunk, ’ll define simple object called tattoos using function c():object? object thing – like number, dataset, summary statistic like mean standard deviation, statistical test. Objects come many different shapes sizes R. simple objects like single digit 25 represent single numbers, vectors (like tattoos object ) represent several numbers, complex objects like dataframes represent tables data, even complex objects like hypothesis tests regression contain sorts statistical information.function? function procedure typically takes one objects arguments (aka, inputs), something objects, returns new object. example, mean() function used takes vector object, like tattoos, numeric data argument, calculates arithmetic mean data, returns single number (scalar) result.great thing R can easily create functions whatever want – get book. Thankfully, R hundreds (thousands?) built-functions perform basic analysis tasks can think .99% time using R, following: 1) Define objects. 2) Apply functions objects. 3) Repeat!. Seriously, ’s . However, ’ll soon learn, hard part knowing define objects way want , knowing function(s) accomplish task want objects.","code":"\n# 1: Create a vector object called tattoos\ntattoos <- c(4, 67, 23, 4, 10, 35)\n\n# 2: Apply the mean() function to the tattoos object\nmean(tattoos)## [1] 23.83333"},{"path":"basics.html","id":"BASIC-TYPES","chapter":"3 The Basics","heading":"3.4.1 Numbers versus characters","text":"part, objects R come one two flavors: numeric character. important keep two separate certain functions, like mean(), max() work numeric objects, functions like grep() strtrim() work character objects.numeric object just number like 1, 10 3.14. don’t anything special create numeric object, just type like using calculator.character object name like \"Madisen\", \"Brian\", \"University Konstanz\". specify character object, need include quotation marks \"\" around text.try perform function operation meant numeric object character object (vice-versa), R yell . example, ’s happens try take mean two character objects \"1\" \"10\":make sure arguments numeric (including quotation marks), won’t receive error:","code":"\n# These are all numeric objects\n1\n10\n3.14\n# These are all character objects\n\"Madisen\"\n\"Brian\"\n\"10\"\n# This will return an error because the arguments are not numeric!\nmean(c(\"1\", \"10\"))\n# This is ok!\nmean(c(1, 10))## [1] 5.5"},{"path":"basics.html","id":"creating-new-objects-with--","chapter":"3 The Basics","heading":"3.4.2 Creating new objects with <-","text":"now know can use R simple calculations. really take advantage R, need know create manipulate objects. data, analyses, even plots, use create , can , saved objects R.create new objects R, need object assignment. Object assignment way storing information, number statistical test, something can easily refer later. pretty big deal. Object assignment allows us store data objects relevant names can use slice dice specific data objects anytime ’d like .assignment, use almighty <- operator called assign assign something new object (change existing object), use notation object <- ..., object new (updated) object, ... whatever want store object. Let’s start creating simple object called assigning value 100 :Good object names strike balance easy type (.e.; short names) interpret. several datasets, ’s probably good idea name , b, c ’ll forget . However, using long names like March2015Group1OnlyFemales give carpal tunnel syndrome.run code, ’ll notice R doesn’t tell anything. However, long didn’t type something wrong, R now new object called contains number 100. want see value, need call object just executing name. print value object console:Now, R print value (case 100) console. try evaluate object yet defined, R return error. example, let’s try print object b haven’t yet defined:can see, R yelled us object b hasn’t defined yet.’ve defined object, can combine objects using basic arithmetic. Let’s create objects b play around .","code":"\n# Create a new object called a with a value of 100\na <- 100\n# Print the object a\na## [1] 100\nb\na <- 1\nb <- 100\n\n# What is a + b?\na + b## [1] 101\n# Assign a + b to a new object (c)\nc <- a + b\n\n# What is c?\nc## [1] 101"},{"path":"basics.html","id":"to-change-an-object-you-must-assign-it-again","chapter":"3 The Basics","heading":"3.4.2.1 To change an object, you must assign it again!","text":"Normally try avoid excessive emphasis, next sentence important, just go . goes…change object, assign !matter object, don’t assign , won’t change. example, let’s say object z value 0. ’d like add 1 z order make 1. , might want just enter z + 1 – won’t job. ’s happens don’t assign :Ok! Now let’s see value zDamn! can see, value z still 0! went wrong? Oh yeah…change object, must assign !problem wrote z + 1 second line, R thought just wanted calculate print value z + 1, without storing result new z object. want actually update value z, need reassign result back z follows:Phew, z now 1. used assignment, z updated. freaking time.","code":"\nz <- 0\nz + 1## [1] 1\nz## [1] 0\nz <- 0\nz <- z + 1  # Now I'm REALLY changing z\nz## [1] 1"},{"path":"basics.html","id":"how-to-name-objects","chapter":"3 The Basics","heading":"3.4.3 How to name objects","text":"can create object names using combination letters special characters (like . _). valid object namesAll object names perfectly valid. Now, let’s look examples invalid object names. object names invalid either contain spaces, start numbers, invalid characters:. Anytime see warning R, almost always means naming error kind.","code":"\n# Valid object names\ngroup.mean <- 10.21\nmy.age <- 32\nFavoritePirate <- \"Jack Sparrow\"\nsum.1.to.5 <- 1 + 2 + 3 + 4 + 5# Invalid object names!\nfamale ages <- 50 # spaces\n5experiment <- 50 # starts with a number\na! <- 50 # has an invalid character"},{"path":"basics.html","id":"r-is-case-sensitive","chapter":"3 The Basics","heading":"3.4.3.1 R is case-sensitive!","text":"\nFigure 3.7: Like text message, probably watch use capitalization R.\nLike English, R case-sensitive – R treats capital letters differently lower-case letters. example, four following objects Plunder, plunder PLUNDER totally different objects R:try avoid using many capital letters object names require hold shift key. may sound silly, ’d surprised much easier type mydata MyData 100 times.","code":"\n# These are all different objects\nPlunder <- 1\nplunder <- 100\nPLUNDER <- 5"},{"path":"NavigatingTheSoftware.html","id":"NavigatingTheSoftware","chapter":"4 Navigating the Software","heading":"4 Navigating the Software","text":"","code":""},{"path":"NavigatingTheSoftware.html","id":"introduction","chapter":"4 Navigating the Software","heading":"Introduction","text":"R RStudio big chunks software, first foremost. inevitably spend time one big piece software: configuring , customizing , updating , fitting computing environment. chapter help perform tasks. nothing numerics, statistics, graphics. dealing R RStudio software.","code":""},{"path":"NavigatingTheSoftware.html","id":"download-and-load-packages-1","chapter":"4 Navigating the Software","heading":"Download and load packages","text":"\nFigure 4.1: workspace – objects, functions, delicious glue ’ve defined current session.\n","code":"\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse) # All purpose wrangling for dataframes"},{"path":"NavigatingTheSoftware.html","id":"NAVIGATE-WORKING-DIRECTORY","chapter":"4 Navigating the Software","heading":"4.1 Getting and Setting the Working Directory","text":"computer maze folders files. Outside R, want open specific file, probably open explorer window allows visually search folders computer. , maybe select recent files, type name file search box let computer searching . system usually works non-programming tasks, -go R. ? Well, main problem methods require visually scan folders move mouse select folders files match looking . programming R, need specify steps analyses way can easily replicated others future self. means can’t just say: “Find one file emailed week ago” “Look file looks something like experimentAversion3.txt.” Instead, need able write R code tells R exactly find critical files – either computer web.make job easier, R uses working directories. working directory everything starts ends. working directory important default location file input output—including reading writing data files, opening saving script files, saving workspace image. Many previously worked SPSS using point-click interface, often wonder 1) saved SPSS file went? 2) exported image go ? confusion arises often know default working directory. Rather relying default, specify explicitly know store files, software goes looking files.easiest recommended way set working directory using RStudio projects. every piece work/assessment, create project. project folder can live anywhere computer - desktop, downloads folder, documents folder, etc. folder, contains everything files analyzed, codes, exported files images. Everything self-contained, confusion.","code":""},{"path":"NavigatingTheSoftware.html","id":"NAVIGATE-PROJECTS","chapter":"4 Navigating the Software","heading":"4.2 Creating a new Rstudio project","text":"want create new RStudio project keep files related specific project.\nClick File → New Project Figure 4.2. ** ALWAYS use approach, please use **\nFigure 4.2: Selecting New Project\nopen New Project dialog box allow choose type project like create, shown Figure 4.3.\nFigure 4.3: New Project dialog\nProjects powerful concept ’s specific RStudio. help following:Setting working directory project directory.Preserving window state RStudio return project windows left . includes opening files open last saved project.Preserving RStudio project settings.hold project settings, RStudio creates project file .Rproj extension project directory. open project file RStudio, works like shortcut opening project. addition, RStudio creates hidden directory named .Rproj.user house temporary files related project.time ’re working something nontrivial R recommend creating RStudio project. Projects help stay organized make project workflow easier.","code":""},{"path":"NavigatingTheSoftware.html","id":"NAVIGATE-INSTALL-PACKAGE","chapter":"4 Navigating the Software","heading":"4.3 Installing Packages","text":"download install R first time, installing Base R software. Base R contain functions ’ll use daily basis like mean() hist(). However, functions written original authors R language appear . want access data code written people, ’ll need install package. R package simply bunch data, functions, help menus, vignettes (examples), stored one neat package.\nFigure 4.4: R package like lightbulb. First need order install.packages(). , every time want use , need turn library()\npackage like light bulb. order use , first need order house (.e.; computer) installing . ’ve installed package, never need install . However, every time want actually use package, need turn loading . ’s .","code":""},{"path":"NavigatingTheSoftware.html","id":"installing-a-new-package","chapter":"4 Navigating the Software","heading":"4.3.1 Installing a new package","text":"Installing package simply means downloading package code onto personal computer. two main ways install new packages. first, common, method download Comprehensive R Archive Network (CRAN). CRAN central repository R packages. install new R package CRAN, can simply run code install.packages(\"name\"), “name” name package. example, download tidyverse package, contains several functions use book, run following:\nFigure 4.5: CRAN (Comprehensive R Archive Network) main source R packages\nrun install.packages(\"name\") R download package CRAN. everything works, see information package downloaded , addition progress bar.\nFigure 4.6: install new package, ’ll see random text like download progress. don’t need memorize .\nLike ordering light bulb, ’ve installed package computer never need install (unless want try install new version package). However, every time want use , need turn loading .","code":"\n# Install the tidyverse package from CRAN\n#   You only need to install a package once!\ninstall.packages(\"tidyverse\")"},{"path":"NavigatingTheSoftware.html","id":"loading-a-package","chapter":"4 Navigating the Software","heading":"4.3.2 Loading a package","text":"’ve installed package, ’s computer. However, just ’s computer doesn’t mean R ready use . want use something, like function dataset, package always need load package R session first. Just like light bulb, need turn use !load package, use library() function. example, now ’ve installed tidyverse package, can load library(\"tidyverse\"):Now ’ve loaded tidyverse package, can use functions! Let us create simple histogram plot using default dataset found within R. Don’t worry specifics code , ’ll learn works later. now, just run code marvel plot TWO LINES.","code":"\n# Load the tidyverse package so I can use it!\n#   You have to load a package in every new R session!\nlibrary(\"tidyverse\")\n# Make a pirateplot using the pirateplot() function\n#  from the yarrr package!\n\nggplot(mtcars,aes(x=mpg)) + \n  geom_histogram(binwidth=5)"},{"path":"NavigatingTheSoftware.html","id":"a-simple-approach-to-package","chapter":"4 Navigating the Software","heading":"4.3.3 A simple approach to package","text":"novices, pacman package can used. need type name package function pacman::p_load(). example , want pacman load package tidverse – notice \"\" used. tidverse found computer, pacman download first, automatically load . use command now loading packages.","code":"\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse) # All purpose wrangling for dataframes"},{"path":"NavigatingTheSoftware.html","id":"NAVIGATE-LEARNING-CHECK","chapter":"4 Navigating the Software","heading":"4.4 Learning check","text":"Create folder called se201 computer desktop.Create folder called se201 computer desktop.Create new project inside folder se201, click File – New Project – New Directory – New Project – Browse, search se201 folder – Directory name, type practice.Create new project inside folder se201, click File – New Project – New Directory – New Project – Browse, search se201 folder – Directory name, type practice.Create new R script, click File – New File – R Script.Create new R script, click File – New File – R Script.Save new R script, click File – Save . Save inside se201/practice folder. Use file name practice_script. extension .R assigned automatically.Save new R script, click File – Save . Save inside se201/practice folder. Use file name practice_script. extension .R assigned automatically.Enter code , run , install load packages.Enter code , run , install load packages.Close RStudio, reopen RStudio via .Rproj symbol Figure 1.3. Files tab bottom right, see script created practice_script.R. Click open see code typed. Run codes typed .Close RStudio, reopen RStudio via .Rproj symbol Figure 1.3. Files tab bottom right, see script created practice_script.R. Click open see code typed. Run codes typed .Download solution learning check .Download solution learning check .","code":"\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse, # All purpose wrangling for dataframes\n               openxlsx,# writing excel documents\n               lubridate,# date-time \n               tibbletime) # moving average for vo2"},{"path":"InputOuput.html","id":"InputOuput","chapter":"5 Input and Output","heading":"5 Input and Output","text":"","code":""},{"path":"InputOuput.html","id":"download-and-load-packages-2","chapter":"5 Input and Output","heading":"Download and load packages","text":"","code":"\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse, # All purpose wrangling for dataframes\n               openxlsx) # writing excel documents"},{"path":"InputOuput.html","id":"INPUT-FILE","chapter":"5 Input and Output","heading":"5.1 Dealing with “Cannot Open File” in Windows","text":"running R Windows, using filenames C:\\data\\sample.xlsx. R says open file, know file exist.backslashes filepath causing trouble. can solve problem one two ways:Change backslashes, \\, forward, /, slashes: \"C:/data/sample.txt\".Change backslashes, \\, forward, /, slashes: \"C:/data/sample.txt\".Double backslashes: \"C:\\\\data\\\\sample.txt\".Double backslashes: \"C:\\\\data\\\\sample.txt\".open file R, give filename character string. Problems arise name contains backslashes (\\) backslashes special meaning inside strings. ’ll probably get something like :R escapes every character follows backslash removes backslashes. leaves meaningless filepath, \nC:Datasample-data.csv example.simple solution use forward slashes instead backslashes. R leaves forward slashes alone, Windows treats just like backslashes. Problem solved:alternative solution double backslashes, since R replaces two consecutive backslashes single backslash:","code":"samp <- read.xlsx (\"data\\strength.xlsx\")## Error: '\\s' is an unrecognized escape in character string starting \"\"data\\s\"\nsamp <- read.xlsx (\"data/strength.xlsx\")\nsamp <- read.xlsx (\"data\\\\strength.xlsx\")"},{"path":"InputOuput.html","id":"INPUT-IMPORT","chapter":"5 Input and Output","heading":"5.2 Reading in Excel “.xlsx” data","text":".xlsx file want read R, use read.xlsx() function openxlsx package.projects folder, tend tend habit create folder named data. contains original data, want touch!!! Let’s test function reading Excel file titled strength.xlsx. Since file located folder called data working directory, ’ll use file path xlsxFile = \"strength.xlsx\", since sheet named \"data\", use sheet = \"data\":","code":"\nstrn <-  read.xlsx (xlsxFile = \"data/strength.xlsx\",\n                    sheet = \"data\")"},{"path":"InputOuput.html","id":"INPUT-EXPORT","chapter":"5 Input and Output","heading":"5.3 Writing a Data Frame to Excel","text":"want write R data frame Excel file.","code":"\nwrite.xlsx(x = strn,\n           sheetName = \"strength\",\n           file = \"data/STRENGTH_write.xlsx\")"},{"path":"InputOuput.html","id":"INPUT-LEARNING-CHECK","chapter":"5 Input and Output","heading":"5.4 Learning check","text":"can download 3 files learning check :se201/practice folder, create another folder called data.se201/practice folder, create another folder called data.Place files downloaded inside se201/practice/data folder.Place files downloaded inside se201/practice/data folder.learning check 4.4, open RStudio via .Rproj symbol. Files tab bottom right, see script created practice_script.R. Click open.learning check 4.4, open RStudio via .Rproj symbol. Files tab bottom right, see script created practice_script.R. Click open.Import Excel file data/Athlete_1_treadmill.xlsx, sheet named raw assign object dat. See Recipe 5.2. Remember add comments remind line code trying . Save .Import Excel file data/Athlete_1_treadmill.xlsx, sheet named raw assign object dat. See Recipe 5.2. Remember add comments remind line code trying . Save .Import Excel file data/Athlete_1_treadmill.xlsx, sheet named stage assign object dat_stage. See Recipe 5.2. Remember add comments remind line code trying . Save .Import Excel file data/Athlete_1_treadmill.xlsx, sheet named stage assign object dat_stage. See Recipe 5.2. Remember add comments remind line code trying . Save .Import Excel file data/Athlete_1_FMS.xlsx, sheet named Sheet1 assign object dat_fms. See Recipe 5.2. Remember add comments remind line code trying . Save .Import Excel file data/Athlete_1_FMS.xlsx, sheet named Sheet1 assign object dat_fms. See Recipe 5.2. Remember add comments remind line code trying . Save .Import Excel file data/simFMS.xlsx, sheet named FMS assign object dat_fms_grp. See Recipe 5.2. Remember add comments remind line code trying . Save .Import Excel file data/simFMS.xlsx, sheet named FMS assign object dat_fms_grp. See Recipe 5.2. Remember add comments remind line code trying . Save .Download solution learning check .Download solution learning check .","code":""},{"path":"WRANGLE.html","id":"WRANGLE","chapter":"6 Data manipulation - part 1","heading":"6 Data manipulation - part 1","text":"","code":""},{"path":"WRANGLE.html","id":"download-and-load-packages-3","chapter":"6 Data manipulation - part 1","heading":"Download and load packages","text":"","code":"\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse, # All purpose wrangling for dataframes\n               openxlsx,# writing excel documents\n               lubridate,# date-time \n               tibbletime) # moving average for vo2"},{"path":"WRANGLE.html","id":"import-data","chapter":"6 Data manipulation - part 1","heading":"Import data","text":"Let’s load files data folder work space .","code":"\ndat_fms <-  read.xlsx (xlsxFile = \"data/fms_pt3.xlsx\",\n                   sheet = \"Sheet1\")\n\ndat_fms_grp <- read.xlsx (xlsxFile = \"data/simFMS.xlsx\",\n                   sheet = \"FMS\")\n\ndat_vo2 <-  read.xlsx (xlsxFile = \"data/treadmill_pt4.xlsx\",\n                   sheet = \"raw\")\n\ndat_vo2_stage <-  read.xlsx (xlsxFile = \"data/treadmill_pt4.xlsx\",\n                   sheet = \"stage\")\n\nbad_leg_accl <-  read.xlsx (xlsxFile = \"data/rightleg_imu.xlsx\")\n\ngood_leg_accl <-  read.xlsx (xlsxFile = \"data/leftleg_imu.xlsx\")"},{"path":"WRANGLE.html","id":"let-us-see-the-data","chapter":"6 Data manipulation - part 1","heading":"Let us see the data","text":"","code":""},{"path":"WRANGLE.html","id":"dat_fms-table","chapter":"6 Data manipulation - part 1","heading":"6.0.0.1 dat_fms table","text":"table representing single subject’s FMS test scores","code":""},{"path":"WRANGLE.html","id":"dat_fms_grp","chapter":"6 Data manipulation - part 1","heading":"6.0.0.2 dat_fms_grp","text":"table representing team’s total FMS test score task","code":""},{"path":"WRANGLE.html","id":"dat_vo2","chapter":"6 Data manipulation - part 1","heading":"6.0.0.3 dat_vo2","text":"table representing single subject’s raw VO2 results incremental treadmill running","code":""},{"path":"WRANGLE.html","id":"dat_vo2_stage","chapter":"6 Data manipulation - part 1","heading":"6.0.0.4 dat_vo2_stage","text":"table representing single subject’s lactate values incremental treadmill running","code":""},{"path":"WRANGLE.html","id":"drop-jump-imu","chapter":"6 Data manipulation - part 1","heading":"6.0.0.5 Drop jump imu","text":"Bad legThis table representing single subject’s single leg drop jump imu data.Good leg","code":""},{"path":"WRANGLE.html","id":"WRANGLE-TIDY-DATA","chapter":"6 Data manipulation - part 1","heading":"6.1 Tidy data","text":"can represent underlying data multiple ways. example shows data organised four different ways. dataset data loaded, rather came tidyverse package. dataset shows values four variables country, year, population, cases, dataset organises values different way.representations underlying data, equally easy use. One dataset, tidy dataset, much easier work .three interrelated rules make dataset tidy:variable must column.observation must row.value must cell.Figure 6.1 shows rules visually.\nFigure 6.1: Following three rules makes dataset tidy: variables columns, observations rows, values cells.\nthree rules interrelated ’s impossible satisfy two three.example, table1 tidy. ’s representation column variable.ensure data tidy? two main advantages:’s general advantage picking one consistent way storing\ndata. consistent data structure, ’s easier learn \ntools work underlying uniformity.’s general advantage picking one consistent way storing\ndata. consistent data structure, ’s easier learn \ntools work underlying uniformity.’s specific advantage placing variables columns \nR functions work data tidy format. makes transforming\ntidy data feel particularly natural.’s specific advantage placing variables columns \nR functions work data tidy format. makes transforming\ntidy data feel particularly natural.principles tidy data seem obvious might wonder ’ll ever encounter dataset isn’t tidy. Unfortunately, however, data encounter untidy. two main reasons:people aren’t familiar principles tidy data, ’s hard\nderive unless spend lot time working data.people aren’t familiar principles tidy data, ’s hard\nderive unless spend lot time working data.Data often organised facilitate use analysis. \nexample, data often organised make entry easy possible.Data often organised facilitate use analysis. \nexample, data often organised make entry easy possible.means real analyses, ’ll need tidying. first step always figure variables observations . Sometimes easy; times ’ll need consult people originally generated data.\nsecond step resolve one two common problems:One variable might spread across multiple columns.One variable might spread across multiple columns.One observation might scattered across multiple rows.One observation might scattered across multiple rows.Typically dataset suffer one problems; ’ll suffer ’re really unlucky! fix problems, ’ll need two important functions tidyr: pivot_wider() Recipe 7.2 pivot_longer() Recipe 7.1 .","code":"\ntable1## # A tibble: 6 x 4\n##   country      year  cases population\n##   <chr>       <int>  <int>      <int>\n## 1 Afghanistan  1999    745   19987071\n## 2 Afghanistan  2000   2666   20595360\n## 3 Brazil       1999  37737  172006362\n## 4 Brazil       2000  80488  174504898\n## 5 China        1999 212258 1272915272\n## 6 China        2000 213766 1280428583\ntable2## # A tibble: 12 x 4\n##    country      year type            count\n##    <chr>       <int> <chr>           <int>\n##  1 Afghanistan  1999 cases             745\n##  2 Afghanistan  1999 population   19987071\n##  3 Afghanistan  2000 cases            2666\n##  4 Afghanistan  2000 population   20595360\n##  5 Brazil       1999 cases           37737\n##  6 Brazil       1999 population  172006362\n##  7 Brazil       2000 cases           80488\n##  8 Brazil       2000 population  174504898\n##  9 China        1999 cases          212258\n## 10 China        1999 population 1272915272\n## 11 China        2000 cases          213766\n## 12 China        2000 population 1280428583\ntable3## # A tibble: 6 x 3\n##   country      year rate             \n## * <chr>       <int> <chr>            \n## 1 Afghanistan  1999 745/19987071     \n## 2 Afghanistan  2000 2666/20595360    \n## 3 Brazil       1999 37737/172006362  \n## 4 Brazil       2000 80488/174504898  \n## 5 China        1999 212258/1272915272\n## 6 China        2000 213766/1280428583\n# Spread across two tables\ntable4a  # cases## # A tibble: 3 x 3\n##   country     `1999` `2000`\n## * <chr>        <int>  <int>\n## 1 Afghanistan    745   2666\n## 2 Brazil       37737  80488\n## 3 China       212258 213766\ntable4b  # population## # A tibble: 3 x 3\n##   country         `1999`     `2000`\n## * <chr>            <int>      <int>\n## 1 Afghanistan   19987071   20595360\n## 2 Brazil       172006362  174504898\n## 3 China       1272915272 1280428583"},{"path":"WRANGLE.html","id":"WRANGLE-RENAME-VARIABLES","chapter":"6 Data manipulation - part 1","heading":"6.2 Renaming variables","text":"","code":""},{"path":"WRANGLE.html","id":"problem","chapter":"6 Data manipulation - part 1","heading":"6.2.1 Problem","text":"current column names dat_vo2 dataset ugly, like abbreviate . dislike excessive usage capitalisations. lot effort type.","code":"\n# This prints the current column names\n\ncolnames (dat_vo2) ## [1] \"Time\"   \"BF\"     \"VO2/kg\" \"RER\"    \"V'O2\"   \"V'CO2\"  \"V'E\"    \"HR\""},{"path":"WRANGLE.html","id":"solution","chapter":"6 Data manipulation - part 1","heading":"6.2.2 Solution","text":"Create vector 8 new names can give data. order new names must identical order old names left right.","code":"\n# New names. Notice the commas and be pedantic about spacing\n\nnew_names <- c(\"time\", \"bf\", \"vo2_norm\", \"rer\", \"vo2\", \"vco2\", \"ve\", \"hr\")\n\n# Give the new names to the old names\n\ncolnames (dat_vo2)  <- new_names\n\n# This prints the new column names\n\ncolnames (dat_vo2)  ## [1] \"time\"     \"bf\"       \"vo2_norm\" \"rer\"      \"vo2\"      \"vco2\"     \"ve\"      \n## [8] \"hr\""},{"path":"WRANGLE.html","id":"WRANGLE-SLICE","chapter":"6 Data manipulation - part 1","heading":"6.3 Selecting rows","text":"","code":""},{"path":"WRANGLE.html","id":"problem-1","chapter":"6 Data manipulation - part 1","heading":"6.3.1 Problem","text":"want remove specific row range rows. See also Recipe 7.6.","code":""},{"path":"WRANGLE.html","id":"solution-1","chapter":"6 Data manipulation - part 1","heading":"6.3.2 Solution","text":"keep remove rows based row numbers, use slice (), slice_head(), slice_tail(). slice (), want keep row, add row number. want remove row number, use minus sign, -, number. want keep remove range numbers, add start:end inside slice(). slice_tail () slice_head(), can keep bottom, top, n number rows, respectively, adding n = 3 example inside slice_tail() slice_head().","code":"\n# This keeps only the second row\n\nvo2_slice <- dat_vo2 %>% \n  slice (2) \n# This removes the second row\nvo2_slice <- dat_vo2 %>% \n  slice (-2) \n# This removes the second and third rows\nvo2_slice <- dat_vo2 %>% \n  slice (-(2:3))\n# This keeps the top six rows\n\nvo2_slice <- dat_vo2 %>% \n  slice_head (n = 6) \n# This keeps the bottom six rows\n\nvo2_slice <- dat_vo2 %>% \n  slice_tail (n = 6) \n# This removes the first row, and replaces the old data in object dat_vo2\n\ndat_vo2 <- dat_vo2 %>% \n  slice (-(1))"},{"path":"WRANGLE.html","id":"WRANGLE-SELECT","chapter":"6 Data manipulation - part 1","heading":"6.4 Selecting columns","text":"","code":""},{"path":"WRANGLE.html","id":"problem-2","chapter":"6 Data manipulation - part 1","heading":"6.4.1 Problem","text":"want keep remove specific column range columns.","code":""},{"path":"WRANGLE.html","id":"solution-2","chapter":"6 Data manipulation - part 1","heading":"6.4.2 Solution","text":"keep based column names, use select () function. keying name column variables want keep, really need use \"\". means, can type names want like following: select(time_s, mx_microT). example , used \"\" surround variable names. previously mentioned 5.1, symbol / special, irritating meaning R. , avoid symbols anyway files, now, shown overcome problem.","code":"\n# This selects the vertical acceleration signal of the IMU of the bad leg\n\nbad_vertical_accl <- bad_leg_accl %>%\n  select (\"highg_az_m/s/s\")\n# This selects the vertical acceleration signal of the IMU of the good leg\n\ngood_vertical_accl <- good_leg_accl %>%\n  select (\"highg_az_m/s/s\")"},{"path":"WRANGLE.html","id":"WRANGLE-CHARACTER-2-NUMERIC","chapter":"6 Data manipulation - part 1","heading":"6.5 Convert characters to numeric","text":"","code":""},{"path":"WRANGLE.html","id":"problem-3","chapter":"6 Data manipulation - part 1","heading":"6.5.1 Problem","text":"raw Vo2 treadmill dataset contains predominantly numbers, meaning numeric nature. See also Section 3.4.1. let us see type data imported. str() function provides us summary information dataframe.see something like . variable bf, see $ bf      : chr  \"37\" \"58\" \"30\" \"34\" .... chr colon. indicates variable character (chr). R language, character anything letter, e.g. , word, e.g. word, even phrase sentence, e.g. hate biomechanics. character always enclosed inside \"\".R “stupid”, differentiate numbers words!! Well R stupid, original data, column words numbers (Figure 6.2). fault data untidy.touched Section 6.1, bad data formatting. brief, column made one type data. numbers, make numbers; characters, characters. mix, default R treats column characters.reason leave numbers characters math . add apples orange can ?\nFigure 6.2: type data class imported.\n","code":"\nstr(dat_vo2)## 'data.frame':    330 obs. of  8 variables:\n##  $ time    : chr  \"  00:05 \" \"  00:10 \" \"  00:15 \" \"  00:20 \" ...\n##  $ bf      : chr  \"37\" \"58\" \"30\" \"34\" ...\n##  $ vo2_norm: chr  \"21.4\" \"2.5\" \"23.5\" \"22.4\" ...\n##  $ rer     : chr  \"0.93\" \"0.84\" \"0.74\" \"0.86\" ...\n##  $ vo2     : chr  \"1371\" \"159\" \"1506\" \"1437\" ...\n##  $ vco2    : chr  \"1272\" \"133\" \"1110\" \"1229\" ...\n##  $ ve      : chr  \"46\" \"12\" \"35\" \"43\" ...\n##  $ hr      : chr  \"119\" \"120\" \"121\" \"123\" ..."},{"path":"WRANGLE.html","id":"solution-3","chapter":"6 Data manipulation - part 1","heading":"6.5.2 Solution","text":"Use mutate() function .numeric function.","code":"\n# Make all variables from bf to hr numeric, and replace the current data\n\ndat_vo2 <-  dat_vo2 %>%\n  mutate (bf = as.numeric(bf),\n          vo2_norm = as.numeric(vo2_norm),\n          rer = as.numeric(rer),\n          vo2 = as.numeric(vo2),\n          vco2 = as.numeric(vco2),\n          ve = as.numeric(ve),\n          hr = as.numeric(hr))\n\n# Recheck the type of each column \n\nstr(dat_vo2)## 'data.frame':    330 obs. of  8 variables:\n##  $ time    : chr  \"  00:05 \" \"  00:10 \" \"  00:15 \" \"  00:20 \" ...\n##  $ bf      : num  37 58 30 34 23 27 39 34 26 27 ...\n##  $ vo2_norm: num  21.4 2.5 23.5 22.4 15.6 30.5 23.3 29.6 31.9 29.4 ...\n##  $ rer     : num  0.93 0.84 0.74 0.86 0.73 0.76 0.73 0.75 0.8 0.8 ...\n##  $ vo2     : num  1371 159 1506 1437 1004 ...\n##  $ vco2    : num  1272 133 1110 1229 735 ...\n##  $ ve      : num  46 12 35 43 22 48 38 49 53 49 ...\n##  $ hr      : num  119 120 121 123 124 124 124 124 124 125 ..."},{"path":"WRANGLE.html","id":"WRANGLE-CHARACTER-2-TIME","chapter":"6 Data manipulation - part 1","heading":"6.6 Convert characters to date and time","text":"","code":""},{"path":"WRANGLE.html","id":"problem-4","chapter":"6 Data manipulation - part 1","heading":"6.6.1 Problem","text":"raw dat_vo2 data time variable character ugly white spaces. use str() function time column using $ symbol, can see value looks like \"  00:05 \". means blank 00:05.","code":"\nstr(dat_vo2$time)##  chr [1:330] \"  00:05 \" \"  00:10 \" \"  00:15 \" \"  00:20 \" \"  00:25 \" ..."},{"path":"WRANGLE.html","id":"solution-4","chapter":"6 Data manipulation - part 1","heading":"6.6.2 Solution","text":"First, let create carbon copy data dat_vo2, can modify original data, keep carbon copy explanation illustration.Use mutate() function .numeric function. learn mutate () function Recipe 7.5.","code":"\ndat_vo2_copy <- dat_vo2 \n# 4 in 1 processing\n\ndat_vo2 <- dat_vo2 %>%\n  mutate (time = time %>% \n            str_squish() %>% # function strips any whitespaces\n            ms() %>% # convert to minutes and seconds\n            as.period(unit = \"sec\") %>% # converts entirely to seconds\n            as.numeric ()) # strips the S symbol to make it a number"},{"path":"WRANGLE.html","id":"discussion","chapter":"6 Data manipulation - part 1","heading":"6.6.3 Discussion","text":"Notice function , chained series steps together, using pipe, %>%, function. Alternatively, separate steps, can take look step changed appearance time variable. Let illustrate step using carbon copy data dat_vo2_copy.","code":"\n# First, removes whitespaces around the time variable\ntime_mutate <- dat_vo2_copy %>%\n  mutate (time = time %>% \n                 str_squish()) \n# Second, convert to minutes and seconds\n\ntime_mutate <- dat_vo2_copy %>%\n  mutate (time = time %>% \n                 str_squish()%>%  \n                 ms())\n# Third, converts entirely to seconds\n\ntime_mutate <- dat_vo2_copy %>%\n  mutate (time = time %>% \n                 str_squish()%>%  \n                 ms() %>%\n                 as.period(unit = \"sec\")) \n# Fourth, strips the S symbol to make it a number, and assign it to object\n\ntime_mutate <- dat_vo2_copy %>%\n  mutate (time = time %>% \n                 str_squish()%>%  \n                 ms() %>%\n                 as.period(unit = \"sec\") %>% \n                 as.numeric ())"},{"path":"WRANGLE.html","id":"WRANGLE-NUMERIC-CATEGORY","chapter":"6 Data manipulation - part 1","heading":"6.7 Split Numeric Variable into Categories","text":"","code":""},{"path":"WRANGLE.html","id":"problem-5","chapter":"6 Data manipulation - part 1","heading":"6.7.1 Problem","text":"Remember, stage VO2 testing 3:30min (210sec) long, collected data 5sec intervals. want split time variable dat_vo2 dataset chunks 210 sec, create new variable called stage. learn mutate () function Recipe 7.5. explain cut_interval function, say length argument used specify range evenly spaced values categorize .","code":""},{"path":"WRANGLE.html","id":"solution-5","chapter":"6 Data manipulation - part 1","heading":"6.7.2 Solution","text":"","code":"\ndat_vo2 <- dat_vo2 %>%\n  mutate (stage = cut_interval(time, length = 210, labels = FALSE))"},{"path":"WRANGLE.html","id":"discussion-1","chapter":"6 Data manipulation - part 1","heading":"6.7.3 Discussion","text":"chunks 210 sec? Vo2 data analysis, requires find average values last 30s treadmill testing stage. Based Autumn School lessons, recall stage 3 min 30 sec long 210 sec. data analysis, amount pre-planning get desired end product. magic pill, analysis , short cuts know.","code":""},{"path":"WRANGLE2.html","id":"WRANGLE2","chapter":"7 Data manipulation - part 2","heading":"7 Data manipulation - part 2","text":"","code":""},{"path":"WRANGLE2.html","id":"download-and-load-packages-4","chapter":"7 Data manipulation - part 2","heading":"Download and load packages","text":"","code":"\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse, # All purpose wrangling for dataframes\n               openxlsx,# writing excel documents\n               lubridate,# date-time \n               tibbletime) # moving average for vo2## [1] \"time\"     \"bf\"       \"vo2_norm\" \"rer\"      \"vo2\"      \"vco2\"     \"ve\"      \n## [8] \"hr\""},{"path":"WRANGLE2.html","id":"WRANGLE2-GATHER","chapter":"7 Data manipulation - part 2","heading":"7.1 Gathering","text":"","code":""},{"path":"WRANGLE2.html","id":"problem-6","chapter":"7 Data manipulation - part 2","heading":"7.1.1 Problem","text":"want make data longer. data dat_fms_grp (go start chapter see data’s original shape), want merge 7 columns indicating 7 FMS tasks single column. , can use pivot_longer() function.","code":""},{"path":"WRANGLE2.html","id":"solution-6","chapter":"7 Data manipulation - part 2","heading":"7.1.2 Solution","text":"","code":"\ndat_long <- dat_fms_grp %>% # original data\n  pivot_longer(cols = -id,\n              names_to = \"task\",\n              values_to = \"score\")"},{"path":"WRANGLE2.html","id":"WRANGLE2-SPREAD","chapter":"7 Data manipulation - part 2","heading":"7.2 Spreading","text":"","code":""},{"path":"WRANGLE2.html","id":"problem-7","chapter":"7 Data manipulation - part 2","heading":"7.2.1 Problem","text":"want make data wider, instance let us look dat_fms dataset. want one column indicating left FMS score, one indicating right FMS score. caveat tasks FMS left right, need remove tasks FMS without left right. case, use filter() function, discussed Recipe 7.6.","code":"\ndat_fms_sub <- dat_fms %>%\n  filter (side != \"c\")"},{"path":"WRANGLE2.html","id":"solution-7","chapter":"7 Data manipulation - part 2","heading":"7.2.2 Solution","text":"","code":"\ndat_wide <- dat_fms_sub %>% # original data\n  pivot_wider(names_from = \"side\",\n              values_from = \"score\")"},{"path":"WRANGLE2.html","id":"WRANGLE2-RENAME-VALUES","chapter":"7 Data manipulation - part 2","heading":"7.3 Rename values of a variable","text":"","code":""},{"path":"WRANGLE2.html","id":"problem-8","chapter":"7 Data manipulation - part 2","heading":"7.3.1 Problem","text":"want rename values, either long, short, reasons. instance, dat_fms dataset, want call l, left, r, right.","code":""},{"path":"WRANGLE2.html","id":"solution-8","chapter":"7 Data manipulation - part 2","heading":"7.3.2 Solution","text":"Use mutate() function recode() function. learn mutate () function Recipe 7.5.","code":"\ndat_fms <- dat_fms %>%\n  mutate (side = recode (side, # the variable name\n                          \"l\" = \"left\", # old label = new label\n                          \"r\" = \"right\")) # old label = new label"},{"path":"WRANGLE2.html","id":"WRANGLE2-CHARACTERS-2-FACTORS","chapter":"7 Data manipulation - part 2","heading":"7.4 Creating factors","text":"","code":""},{"path":"WRANGLE2.html","id":"problem-9","chapter":"7 Data manipulation - part 2","heading":"7.4.1 Problem","text":"want create order values variable - like small, medium, large.","code":""},{"path":"WRANGLE2.html","id":"solution-9","chapter":"7 Data manipulation - part 2","heading":"7.4.2 Solution","text":"","code":"\n# Order of values I desire\n\nnew_lvls <- c( \"push_up\",\"squat\", \"rot_stab\", \"hurdle\", \"lunge\", \"leg_raise\",  \"shd_mob\")\n\ndat_fms_relvl <- dat_fms %>%\n  mutate (task = factor (task, levels = new_lvls))"},{"path":"WRANGLE2.html","id":"discussion-2","chapter":"7 Data manipulation - part 2","heading":"7.4.3 Discussion","text":"need convert categorical variables factors? visualization, simple reason allows control order items appear first last. course, important statistical reasons, discuss presently.\nFigure 7.1: Barplots FMS score original dat_fms (top); new dat_fms_relvl modified task variable factor, new levels (bottom).\n","code":"\n# Without factor \n\nggplot(dat_fms) +\n  geom_col(aes(x = task, y = score, fill = side), position = \"dodge\", color = \"black\") \n\n# With factor new levels\n\nggplot(dat_fms_relvl) +\n  geom_col(aes(x = task, y = score, fill = side), position = \"dodge\", color = \"black\") "},{"path":"WRANGLE2.html","id":"WRANGLE2-NEW-VARIABLES","chapter":"7 Data manipulation - part 2","heading":"7.5 Making a new variable","text":"","code":""},{"path":"WRANGLE2.html","id":"problem-10","chapter":"7 Data manipulation - part 2","heading":"7.5.1 Problem","text":"want create new column involves math columns","code":""},{"path":"WRANGLE2.html","id":"solution-10","chapter":"7 Data manipulation - part 2","heading":"7.5.2 Solution","text":"Example, want create column called ratio dat_vo2 dataset, dividing vo2 vco2.","code":"\ndat_vo2 <-  dat_vo2 %>%\n  mutate (ratio = vo2/vco2) "},{"path":"WRANGLE2.html","id":"discussion-3","chapter":"7 Data manipulation - part 2","heading":"7.5.3 Discussion","text":"many math operations can including subtraction (-), multiplication (*), addition (+), exponentiation/power power 2 (^2). Let us go crazy try random creation new variables.can even create new variable, reflects present row number (row_id). row number reflects number 5 sec VO2 windows. 10 sec data collected, two row numbers, Really quite useful VO2 analysis cleaning. , inside mutate() function, using function row_number() get respective number row.IMU data, can automatically find maximum value long data sequence, use values provide index landing impact symmetry.","code":"\ndat_vo2_crazy <-  dat_vo2  %>%\n  mutate (vo2_power = vo2^3,# vo2 powered to 3 \n          vco2_mod = vco2/3, # vco2 divied by 3\n          junk = (vo2+ vco2)/ (hr + bf))# divided the sum of vo2 and vco2, and sum of hr and bf\ndat_vo2 <- dat_vo2 %>%\n  mutate (row_id = row_number())\n# Maximal bad leg impact value\nmax_bad_ampl <- max(bad_vertical_accl)\n\n# Maximal good leg impact value\nmax_good_ampl <- max(good_vertical_accl)\n# Symmetry index \n\nsymmmetry_index <- \n  ((2* (max_bad_ampl - max_good_ampl))/(max_bad_ampl + max_good_ampl)) * 100\n\n\nsymmmetry_index## [1] 69.83277"},{"path":"WRANGLE2.html","id":"WRANGLE2-FILTER","chapter":"7 Data manipulation - part 2","heading":"7.6 Filtering","text":"Filtering removing rows want keeping rows want based condition(s). Recipe 6.3, learnt slice() function. really simple filtering. filter() function learn gives flexibility. Filtering deals keeping throwing rows data. Keeping throwing columns data requires select() function, learnt Recipe 6.3.","code":""},{"path":"WRANGLE2.html","id":"WRANGLE2-FILTER-KEEP-CHARACTER","chapter":"7 Data manipulation - part 2","heading":"7.6.1 Keep rows you want based on condition","text":"","code":""},{"path":"WRANGLE2.html","id":"problem-11","chapter":"7 Data manipulation - part 2","heading":"7.6.1.1 Problem","text":"dat_fms dataset, want keep rows side == \"left\" (.e. rows side value equals left). Note ==, double equal sign, instead usual =. short book, go length explain R difficult, ask obey rules language.","code":""},{"path":"WRANGLE2.html","id":"solution-11","chapter":"7 Data manipulation - part 2","heading":"7.6.1.2 Solution","text":"","code":"\nfms_left <- dat_fms %>%\n  filter (side == \"left\") "},{"path":"WRANGLE2.html","id":"WRANGLE2-FILTER-KEEP-NUMERIC","chapter":"7 Data manipulation - part 2","heading":"7.6.2 Keep rows based on a numerical range","text":"want keep data variable within certain window range. Let us use dat_vo2 dataset. Let us see range values variable ve.","code":"\nhist (dat_vo2$ve)"},{"path":"WRANGLE2.html","id":"problem-12","chapter":"7 Data manipulation - part 2","heading":"7.6.2.1 Problem","text":"Say want keep rows 1) ve less 80, 2) ve 40, 3) ve 40 80.","code":""},{"path":"WRANGLE2.html","id":"solution-12","chapter":"7 Data manipulation - part 2","heading":"7.6.2.2 Solution","text":"Notice graph, minimum maximum values clipped .","code":"\n# Keep ve less than 80\n\ndat_vo2_filt <- dat_vo2 %>%\n  filter (ve < 80)\n\nhist (dat_vo2_filt$ve)\n# Keep ve lmore than 40\n\ndat_vo2_filt <- dat_vo2 %>%\n  filter (ve > 40)\n\nhist (dat_vo2_filt$ve)\n# Keep ve between 40 to 80\n\ndat_vo2_filt <- dat_vo2 %>%\n  filter (ve > 40 & ve < 80)\n\nhist (dat_vo2_filt$ve)"},{"path":"WRANGLE2.html","id":"discussion-4","chapter":"7 Data manipulation - part 2","heading":"7.6.3 Discussion","text":"filter() works really want throw keep rows data based ranges criteria variables . want keep rows data based row number, use slice (). See also Recipe 6.3.","code":""},{"path":"WRANGLE2.html","id":"WRANGLE2-SUMMARIZE-GLOBAL","chapter":"7 Data manipulation - part 2","heading":"7.7 Global summary","text":"","code":""},{"path":"WRANGLE2.html","id":"problem-13","chapter":"7 Data manipulation - part 2","heading":"7.7.1 Problem","text":"want find total FMS score across sides tasks","code":""},{"path":"WRANGLE2.html","id":"solution-13","chapter":"7 Data manipulation - part 2","heading":"7.7.2 Solution","text":"dat_fms dataset, want use summarize () function.dare find easier way calculate scores one line code. one reason use programming language like R. fast!!!","code":"\ndat_fms %>%\n  summarize (total_score = sum (score)) ##   total_score\n## 1          24"},{"path":"WRANGLE2.html","id":"discussion-5","chapter":"7 Data manipulation - part 2","heading":"7.7.3 Discussion","text":"can also go berserk trying different summary functions, like mean (), median (), min() (minimum value), max (maximum value). function n() really useful one count number rows. rows indicate number subjects, n() essentially counts number subjects.","code":"\nfms_summ <- dat_fms %>%\n  summarize (total_score = sum (score),\n             mean_score = mean (score),\n             median_score = median (score),\n             min_score = min (score),\n             max_score = max(score),\n             count = n()) "},{"path":"WRANGLE2.html","id":"WRANGLE2-SUMMARIZE-GROUPBY","chapter":"7 Data manipulation - part 2","heading":"7.8 Group-by summary","text":"","code":""},{"path":"WRANGLE2.html","id":"problem-14","chapter":"7 Data manipulation - part 2","heading":"7.8.1 Problem","text":"want perform summary function chunk group. example, FMS typically scored taking lower two values left right task. side, three values, c, left right. minimum c value .","code":""},{"path":"WRANGLE2.html","id":"solution-14","chapter":"7 Data manipulation - part 2","heading":"7.8.2 Solution","text":"dat_fms_grp dataset, want use group_by() summarize () function. code reads : collapse tasks single column, task score, count number rows (subjects) score.","code":"\nfms_grp_summ <- dat_fms_grp %>%\n  pivot_longer(cols = -id,\n               names_to = \"task\",\n               values_to = \"score\") %>%\n  group_by(task, score) %>%\n  summarize (count = n()) ## `summarise()` has grouped output by 'task'. You can override using the `.groups`\n## argument."},{"path":"WRANGLE2.html","id":"discussion-6","chapter":"7 Data manipulation - part 2","heading":"7.8.3 Discussion","text":"need learn create summaries? basis generating plots easily. Let us look dat_vo2 dataset.Remember lessons, last 30 sec 3 min 30 sec complete stage discarded. means want throw away data interval 3:00 3:30 min every stage.Thereafter, complete stage, last 30 sec 3 min interval averaged analysis. means keeping data 2:30 3:00 min stage. corresponds last six rows stage (.e. rows 31 36 stage). Try think selected row numbers!last stage, may chance incomplete. Based Kelly’s lesson, need extract last 30 sec (.e. last six rows) last incomplete stage.want average variables 6 rows per stage.end dataframe 8 rows given 8 stages, one stage example.\nTable 7.1: Stage stage VO2 analysis\n","code":"\ndat_vo2_summ <- dat_vo2 %>%\n  group_by(stage) %>% # for each group\n  mutate (row_id = row_number()) %>%\n  filter (row_id < 37) %>%\n  slice_tail (n = 6) %>%\n  summarise (bf = mean (bf),\n             vo2_norm = mean (vo2_norm),\n             rer = mean (rer),\n             vo2 = mean (vo2),\n             vco2 = mean (vco2),\n             ve = mean (ve),\n             hr = mean (hr))"},{"path":"WRANGLE2.html","id":"WRANGLE2-INNER-JOIN","chapter":"7 Data manipulation - part 2","heading":"7.9 Merge two tables together","text":"","code":""},{"path":"WRANGLE2.html","id":"problem-15","chapter":"7 Data manipulation - part 2","heading":"7.9.1 Problem","text":"want combine two tables together, ensuring row linked appropriately. example, want combine dat_vo2_summ summary data dat_vo2_stage table contains RPE blood lactate values.","code":""},{"path":"WRANGLE2.html","id":"solution-15","chapter":"7 Data manipulation - part 2","heading":"7.9.2 Solution","text":"Use inner_join function, key common identifier must dataframes.","code":"\ndat_vo2_comb <- dat_vo2_summ %>%\n  inner_join(dat_vo2_stage, by = \"stage\") "},{"path":"WRANGLE2.html","id":"discussion-7","chapter":"7 Data manipulation - part 2","heading":"7.9.3 Discussion","text":"common sense, want join two tables, must rules. First, want join two tables side side left-right, number rows must match. Second, must way computer knows join, much like key keyhole. key column join , example, stage. dat_vo2_summ stage variable identical number levels 1-8, variable appears dat_vo2_stage. don’t worry merging, data sorted correctly, follow rules.","code":""},{"path":"WRANGLE2.html","id":"WRANGLE2-LEARNING-CHECK","chapter":"7 Data manipulation - part 2","heading":"7.10 Learning check","text":"learning check 5.4, open practice_script.R. already codes import data/Athlete_1_treadmill.xlsx file, label data called dat.learning check 5.4, open practice_script.R. already codes import data/Athlete_1_treadmill.xlsx file, label data called dat.Rename columns dat (\"time\", \"bf\", \"vo2_norm\", \"rer\", \"vo2\", \"vco2\", \"ve\", \"hr\"), respectively. See Recipe 6.2.Rename columns dat (\"time\", \"bf\", \"vo2_norm\", \"rer\", \"vo2\", \"vco2\", \"ve\", \"hr\"), respectively. See Recipe 6.2.Remove first row dat data, useless. See Recipe 6.3.Remove first row dat data, useless. See Recipe 6.3.Convert variable time dat numeric seconds, variables numeric. See Recipe 6.6 6.5, respectively.Convert variable time dat numeric seconds, variables numeric. See Recipe 6.6 6.5, respectively.Create variable called stage, stage represents 3:30 min worth VO2 data. See Recipe 6.7.Create variable called stage, stage represents 3:30 min worth VO2 data. See Recipe 6.7.stage, create variable called row_id, essentially represents number 5 sec windows stage. See Recipe 7.5 7.8.stage, create variable called row_id, essentially represents number 5 sec windows stage. See Recipe 7.5 7.8.stage, remove data 3:00 3:30min. See Recipe 7.8 7.6.2.stage, remove data 3:00 3:30min. See Recipe 7.8 7.6.2.stage, keep last six rows data. See Recipe 7.8 6.3.stage, keep last six rows data. See Recipe 7.8 6.3.stage, calculate variables mean last six rows data. See Recipe 7.8 7.7.stage, calculate variables mean last six rows data. See Recipe 7.8 7.7.Save cleaned data set data/ folder called Athlete_1_treadmill_clean.xlsx. Go folder physically, see new excel file open . See Recipe 5.3Save cleaned data set data/ folder called Athlete_1_treadmill_clean.xlsx. Go folder physically, see new excel file open . See Recipe 5.3Download solution learning check .Download solution learning check .","code":"## Warning: package 'igraph' was built under R version 4.1.3"},{"path":"CHAPTER-BAR-GRAPH.html","id":"CHAPTER-BAR-GRAPH","chapter":"8 Bar Graphs","heading":"8 Bar Graphs","text":"many types figures can create R (Figure 8.1). next two chapters, delve two types figures believe useful case. basic skills, foundation delve deeper software desire.\nFigure 8.1: plotting capabilities endless.\nBar graphs perhaps commonly used kind data visualization. ’re typically used display numeric values (y-axis), different categories (x-axis). example, bar graph good showing prices four different kinds items. bar graph generally wouldn’t good showing prices time, time continuous variable – though can done.’s important distinction aware making bar graphs: sometimes bar heights represent counts cases data set, sometimes represent values data set. Keep distinction mind – can source confusion since different relationships data, term used . chapter ’ll discuss always use bar graphs values.Let us prepare chapter importing two FMS tests data. Excel sheet called \"fms_pt3.xlsx\" \"simFMS.xlsx\".Individual FMS tableGroup FMS tableLet us also create two datasets 1) take lower two scores tasks assessed bilaterally 2) count number subjects attain specific score task. See Recipe 7.8.","code":"\n# Define factor levels\nfct_lvls <- c(\"squat\", \"push_up\", \"hurdle\", \"lunge\", \"leg_raise\", \"rot_stab\", \"shd_mob\")\n\n# Import data\ndat <-  read.xlsx (xlsxFile = \"data/fms_pt3.xlsx\",\n                   sheet = \"Sheet1\")\n\ndat_grp <-  read.xlsx (xlsxFile = \"data/simFMS.xlsx\",\n                   sheet = \"FMS\")\n\n\n# Tidy the data\ndat <- dat %>%\n  mutate (task = factor (task, levels = fct_lvls))\n\ndat_grp <-  dat_grp %>%\n  pivot_longer(cols = -id,\n               names_to = \"task\",\n               values_to = \"score\") %>%\n  group_by(task, score) %>%\n  mutate (task = factor (task, levels = fct_lvls),\n          score = factor (score, levels = c(\"0\", \"1\", \"2\", \"3\")))\n  \ndat_summ <- dat %>%\n  group_by(task) %>%\n  summarize (total = min (score)) %>%\n  ungroup ()\n\ndat_grp_summ <-  dat_grp %>%\n  group_by(task, score) %>%\n  summarize (count = n())  \n#> `summarise()` has grouped output by 'task'. You can override using the `.groups`\n#> argument."},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-BASIC-BAR","chapter":"8 Bar Graphs","heading":"8.1 Making a Basic Bar Graph","text":"","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"problem-16","chapter":"8 Bar Graphs","heading":"8.1.1 Problem","text":"data frame one column represents x position bar, another column represents vertical y height bar.","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"solution-16","chapter":"8 Bar Graphs","heading":"8.1.2 Solution","text":"Use ggplot() geom_col() specify variables want x- y-axes (Figure 8.2):\nFigure 8.2: Bar graph values discrete x-axis\n","code":"\n\nggplot(dat_summ) + \n  geom_col(aes(x = task, y = total))"},{"path":"CHAPTER-BAR-GRAPH.html","id":"discussion-8","chapter":"8 Bar Graphs","heading":"8.1.3 Discussion","text":"default, bar graphs use dark grey bars. use color fill, use fill. Also, default, outline around fill. add outline, use colour. Figure 8.3, use light blue fill black outline:\nFigure 8.3: single fill outline color bars\nNote ggplot2, package used plotting, default use British spelling, colour, instead American spelling, color. Internally, American spellings remapped British ones, use American spelling still work.","code":"\nggplot(dat_summ) + \n  geom_col(aes(x = task, y = total), fill = \"lightblue\", colour = \"black\") "},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-ANATOMY","chapter":"8 Bar Graphs","heading":"8.2 Anatomy of a Graph","text":"alot things going behind scene simple code ggplot(dat_summ) +  geom_col(aes(x = task, y = total)). Let us deleve little , understand grammar graph, just bar graph created. Remember, software, grammar anatomy towards graph similar.","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-ANATOMY-BACKGROUND","chapter":"8 Bar Graphs","heading":"8.2.1 Plot Background","text":"start building plot, first specify data frame contains relevant data. ‘sending dat_summ data set ggplot function’:\nFigure 8.4: empty plot area waiting filled\nRunning command produce empty grey canvas. yet specified variables plotted.","code":"\n# render background\nggplot(data = dat_summ)"},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-ANATOMY-AES","chapter":"8 Bar Graphs","heading":"8.2.2 Aesthetics aes()","text":"can call different columns data dat_summ based column names. Column names given ‘aesthetic’ elements ggplot function, wrapped aes() function.want bar plot, bar x y coordinate. want x axis represent task ( x = task ), y axis represent total FMS score ( y = total ).See x- y-axis titles, labels, tick-marks become populated? still nothing plotted, tell shapes plot.\nFigure 8.5: Setting aesthetics\n","code":"\nggplot(data = dat_summ, aes(x = task, y = total) )"},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-ANATOMY-GEOMS","chapter":"8 Bar Graphs","heading":"8.2.3 Geometric representations geom()","text":"Now tell computer shapes plot. Given want bar plot, need specify geometric representation (.e. shape) data bar form, using geom_col().adding layer (hence + sign) points plot.\nFigure 8.6: Setting geometric representation\nNotice code difference Recipe 8.2.3 Recipe 8.1. put aes() inside geom_col() Recipe 8.1, inside ggplot () Recipe 8.2.3. Putting aes() inside ggplot() means aesthetic mapping trickle however many layers plots want overlay figure . expand keep book simple.","code":"\nggplot(dat_summ, aes(x = task, y = total)) + \n  geom_col() "},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-GROUPED-BAR","chapter":"8 Bar Graphs","heading":"8.3 Grouping Bars Together","text":"","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"problem-17","chapter":"8 Bar Graphs","heading":"8.3.1 Problem","text":"want group bars together second variable.","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"solution-17","chapter":"8 Bar Graphs","heading":"8.3.2 Solution","text":"Map variable fill, use geom_col(position = \"dodge\").example ’ll use dat data set, FMS score one side.’ll map task x position map side fill color (Figure 8.7):\nFigure 8.7: Graph grouped bars\nLet’s try example another dataset dat_grp_summ, number subjects attain specific FMS score task.’ll map task x position, count y position, map score fill color (Figure 8.8):\nFigure 8.8: Graph grouped bars\n","code":"\nggplot(dat) +\n  geom_col(aes(x = task, y = score, fill = side), position = \"dodge\")\nggplot(dat_grp_summ) +\n  geom_col(aes(x = task, y = count, fill = score), position = \"dodge\") +\n  scale_fill_discrete(drop=FALSE) +\n  scale_x_discrete(drop=FALSE)"},{"path":"CHAPTER-BAR-GRAPH.html","id":"discussion-9","chapter":"8 Bar Graphs","heading":"8.3.3 Discussion","text":"basic bar graphs one categorical variable x-axis one continuous variable y-axis. Sometimes ’ll want use another categorical variable divide data, addition variable x-axis. can produce grouped bar plot mapping variable fill, represents fill color bars. must also use position = \"dodge\", tells bars “dodge” horizontally; don’t, ’ll end stacked bar plot. Try remove argument position = \"dodge\", see happens!variables mapped x-axis bar graph, variables mapped fill color bars must categorical rather continuous variables.aesthetics, colour (color outlines bars), can also used grouping variables, fill probably ’ll want use.","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-COLORS","chapter":"8 Bar Graphs","heading":"8.4 Using Colors in a Bar Graph","text":"","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"problem-18","chapter":"8 Bar Graphs","heading":"8.4.1 Problem","text":"want use different colors bars graph.default colors aren’t appealing, may want set using scale_fill_manual(). ’ll set outline color bars black, colour=\"black\" (Figure 8.9).","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"solution-18","chapter":"8 Bar Graphs","heading":"8.4.2 Solution","text":"Map appropriate variable fill aesthetic (Figure 8.9).\nFigure 8.9: Graph different colors, black outlines, sorted percentage change\n","code":"\nggplot(dat) +\n  geom_col(aes(x = task, y = score, fill = side), position = \"dodge\", color = \"black\") +\n  scale_fill_manual(values = c(\"red\", \"blue\", \"green\")) "},{"path":"CHAPTER-BAR-GRAPH.html","id":"discussion-10","chapter":"8 Bar Graphs","heading":"8.4.3 Discussion","text":"\nFigure 8.10: Names many colors available R.\n","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-AXES","chapter":"8 Bar Graphs","heading":"8.5 Changing Axes titles in a Bar Graph","text":"","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"problem-19","chapter":"8 Bar Graphs","heading":"8.5.1 Problem","text":"want use different name label axis. may simply want use names capitalizations, totally different names, especially abbreviations used spreadsheet. using labs() function.","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"solution-19","chapter":"8 Bar Graphs","heading":"8.5.2 Solution","text":"Map appropriate variable fill aesthetic (Figure 8.11).\nFigure 8.11: Graph different axes titles\n","code":"\nggplot(dat) +\n  geom_col(aes(x = task, y = score, fill = side), position = \"dodge\", color = \"black\") +\n  scale_fill_manual(values = c(\"red\", \"blue\", \"green\")) +\n  labs (x = \"Tasks\",\n        y = \"FMS Score\")"},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-LEGEND","chapter":"8 Bar Graphs","heading":"8.6 Changing Legend titles in a Bar Graph","text":"","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"problem-20","chapter":"8 Bar Graphs","heading":"8.6.1 Problem","text":"want use different name legend title. may simply want use names capitalizations, totally different names, especially abbreviations used spreadsheet. using labs() function, within fill argument. example, visual component separates different sides fill color, changed name fill component.","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"solution-20","chapter":"8 Bar Graphs","heading":"8.6.2 Solution","text":"Map appropriate variable fill aesthetic (Figure 8.12).\nFigure 8.12: Graph different legend title\n","code":"\nggplot(dat) +\n  geom_col(aes(x = task, y = score, fill = side), position = \"dodge\", color = \"black\") +\n  scale_fill_manual(values = c(\"red\", \"blue\", \"green\")) +\n  labs (x = \"Tasks\",\n        y = \"FMS Score\",\n        fill = \"Side\")"},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-GRAPH-FONTSIZE","chapter":"8 Bar Graphs","heading":"8.7 Changing font size uniformly across the Bar Graph","text":"","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"problem-21","chapter":"8 Bar Graphs","heading":"8.7.1 Problem","text":"want magnify font size axes titles, axes labels, legend title, legend labels. case can use theme(text = element_text(size=) function. advance users convered book, can actually custom fontsize every component different.","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"solution-21","chapter":"8 Bar Graphs","heading":"8.7.2 Solution","text":"Map appropriate variable fill aesthetic (Figure 8.13).\nFigure 8.13: Graph font size = 16\n","code":"\nggplot(dat) +\n  geom_col(aes(x = task, y = score, fill = side), position = \"dodge\", color = \"black\") +\n  scale_fill_manual(values = c(\"red\", \"blue\", \"green\")) +\n  labs (x = \"Tasks\",\n        y = \"FMS Score\",\n        fill = \"Side\") +\n  theme(text = element_text(size= 16))"},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-OUTPUT-BITMAP","chapter":"8 Bar Graphs","heading":"8.8 Outputting to Bitmap (PNG/TIFF) Files","text":"","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"problem-22","chapter":"8 Bar Graphs","heading":"8.8.1 Problem","text":"want create bitmap plot, writing PNG file.","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"solution-22","chapter":"8 Bar Graphs","heading":"8.8.2 Solution","text":"using ggsave(). First need assign gplot created ggplot() object, can name anything. call object simply f. several important arguments need. filename name file extension want image called. use filename = \"my_plot.png\". plot specific figure want save. use plot = f. width height allows specify big image . unit whether width height defined centimeters, \"cm\", inches, \"\". use units = \"cm\", 8 cm 4 cm width height, respectively. Lastly, dpi argument specifies resoultion image. use dpi = 300. file saved working directory session.","code":"\nf <- ggplot(dat) +\n  geom_col(aes(x = task, y = score, fill = side), position = \"dodge\", color = \"black\") +\n  scale_fill_manual(values = c(\"red\", \"blue\", \"green\")) +\n  labs (x = \"Tasks\",\n        y = \"FMS Score\",\n        fill = \"Side\") +\n  theme(text = element_text(size= 16))\n\n# Default dimensions are in inches, but you can specify the unit\nggsave(filename = \"myplot.png\", \n       plot = f, # the name of the image object you created above.\n       width = 8, \n       height = 8, \n       unit = \"cm\", \n       dpi = 300)"},{"path":"CHAPTER-BAR-GRAPH.html","id":"discussion-11","chapter":"8 Bar Graphs","heading":"8.8.3 Discussion","text":"high-quality print output, use least 300 ppi. Figure 8.14 shows portions plot different resolutions.\nFigure 8.14: left right: PNG output 72, 150, 300 ppi (actual size)\nR supports bitmap formats, like BMP, TIFF, JPEG, ’s really much reason use instead PNG.exact appearance resulting bitmaps varies platform platform. Unlike R’s PDF output device, renders consistently across platforms, bitmap output devices may render plot differently Windows, Linux, Mac OS X. can even variation within operating systems.","code":""},{"path":"CHAPTER-BAR-GRAPH.html","id":"BAR-LEARNING-CHECK","chapter":"8 Bar Graphs","heading":"8.9 Learning check","text":"Open practice_script.R, updated learning check 7.10.Open practice_script.R, updated learning check 7.10.Import Excel file data/Athlete_1_FMS.xlsx, assign object dat_fms. See Recipe 5.2.Import Excel file data/Athlete_1_FMS.xlsx, assign object dat_fms. See Recipe 5.2.Create another dataset, dat_summ take lower two scores tasks assessed bilaterally. See Recipe 7.8.Create another dataset, dat_summ take lower two scores tasks assessed bilaterally. See Recipe 7.8.Using data dat_summ, create barplot task x axis, total FMS score y axis. See Recipe 8.1.Using data dat_summ, create barplot task x axis, total FMS score y axis. See Recipe 8.1.Make line colour \"red\", fill barplot colour \"blue\". See 8.3.Make line colour \"red\", fill barplot colour \"blue\". See 8.3.Remember save file.Remember save file.Download solution learning check .Download solution learning check .","code":""},{"path":"line-graphs.html","id":"line-graphs","chapter":"9 Line Graphs","heading":"9 Line Graphs","text":"Line graphs typically used visualizing one continuous variable, y-axis, changes relation another continuous variable, x-axis. Often x variable represents time, may also represent continuous quantity, example, amount drug administered experimental subjects.bar graphs, exceptions. Line graphs can also used discrete variable x-axis. appropriate variable ordered (e.g., “small”, “medium”, “large”), variable unordered (e.g., “cow”, “goose”, “pig”). examples chapter use continuous x variable, ’ll see one example variable converted factor thus treated discrete variable.Let us prepare chapter first importing Vo2 treadmill test data cleaned, placed data folder. See Recipe 7.8. Excel sheet called \"treadmill_pt4_clean.xlsx\".","code":"\ndat <-  read.xlsx (xlsxFile = \"data/treadmill_pt4_clean.xlsx\",\n                   sheet = \"Sheet1\")\n\ndat <- dat %>%\n  mutate (stage = cut_interval(time, length = 210, labels = FALSE)) %>%\n  group_by(stage) %>%\n  mutate (row_id = row_number()) %>%\n  filter (row_id < 37) %>%\n  slice_tail (n = 6)%>%\n  summarise_at (vars(bf:hr), mean)"},{"path":"line-graphs.html","id":"LINE-GRAPH-BASIC-LINE","chapter":"9 Line Graphs","heading":"9.1 Making a Basic Line Graph","text":"","code":""},{"path":"line-graphs.html","id":"problem-23","chapter":"9 Line Graphs","heading":"9.1.1 Problem","text":"want make basic line graph.","code":""},{"path":"line-graphs.html","id":"solution-23","chapter":"9 Line Graphs","heading":"9.1.2 Solution","text":"Use ggplot() geom_line(), specify variables mapped x y (Figure 9.1):\nFigure 9.1: Basic line graph\n","code":"\n\nggplot(dat) +\n  geom_line(aes(x = stage, y = vo2))  "},{"path":"line-graphs.html","id":"discussion-12","chapter":"9 Line Graphs","heading":"9.1.3 Discussion","text":"sample data set, x variable, time, one column y variable, vo2, another:ggplot2, default y range line graph just enough include y values data. kinds data, ’s better y range start zero. can use ylim() set range, can use expand_limits() expand range include value. set range zero maximum value demand column BOD (Figure 9.2):\nFigure 9.2: Line graph manually set y range\n","code":"\n# These have the same result\nggplot(dat) +\n  geom_line(aes(x = stage, y = vo2))  +\n  ylim(0, max(dat$vo2))\n\nggplot(dat) +\n  geom_line(aes(x = stage, y = vo2)) +\n  expand_limits(y = 0)"},{"path":"line-graphs.html","id":"LINE-GRAPH-MULTIPLE-LINE","chapter":"9 Line Graphs","heading":"9.2 Making a Line Graph with Multiple Lines","text":"","code":""},{"path":"line-graphs.html","id":"problem-24","chapter":"9 Line Graphs","heading":"9.2.1 Problem","text":"want make line graph one line.","code":""},{"path":"line-graphs.html","id":"solution-24","chapter":"9 Line Graphs","heading":"9.2.2 Solution","text":"addition variables mapped x- y-axes, map another (discrete) variable colour linetype, shown Figure 9.3:\nFigure 9.3: variable mapped colour (left); variable mapped linetype (right)\n","code":"\n\n# Bring all variables into one column\n\ndat_long <- dat %>%\n  dplyr::select (stage, vo2, vco2) %>% \n  pivot_longer(cols = c(vo2:vco2),\n               names_to = \"var\",\n               values_to = \"val\") %>%\n  mutate (var = factor (var))\n\n# Map supp to colour\nggplot(dat_long) +\n  geom_line(aes(x = stage, y = val, colour = var))\n\n# Map supp to linetype\nggplot(dat_long) +\n  geom_line(aes(x = stage, y = val, linetype = var))"},{"path":"line-graphs.html","id":"discussion-13","chapter":"9 Line Graphs","heading":"9.2.3 Discussion","text":"dat_long data three columns, including factor var, mapped colour linetype:NoteIf x variable factor, must also tell ggplot group variable, described .Line graphs can used continuous categorical variable x-axis. Sometimes variable mapped x-axis conceived categorical, even ’s stored number. example , eight values stage: 1, 2, 3, 4, 5, 6, 7, 8. may want treat categories rather values continuous scale. , convert stage factor (Figure 9.4):\nFigure 9.4: Line graph continuous x variable converted factor\nconvert variable factor , see also Recipe 7.4.Notice use group = var. Without statement, ggplot won’t know group data together draw lines, plot anything:","code":"\n\nggplot(dat_long) +\n  geom_line(aes(x = factor (stage), y = val, colour = var, group = var))\n\nggplot(dat_long) +\n  geom_line(aes(x = factor (stage), y = val, colour = var))\n#> geom_path: Each group consists of only one observation. Do you need to adjust\n#> the group aesthetic?"},{"path":"line-graphs.html","id":"LINE-GRAPH-LINE-APPEARANCE","chapter":"9 Line Graphs","heading":"9.3 Changing the Appearance of Lines","text":"","code":""},{"path":"line-graphs.html","id":"problem-25","chapter":"9 Line Graphs","heading":"9.3.1 Problem","text":"want change appearance lines line graph.","code":""},{"path":"line-graphs.html","id":"solution-25","chapter":"9 Line Graphs","heading":"9.3.2 Solution","text":"type line (solid, dashed, dotted, etc.) set linetype, thickness (mm) size, color line colour (color).properties can set (shown Figure 9.5) passing values call geom_line():\nFigure 9.5: Line graph custom linetype, size, colour\none line, setting aesthetic properties affect lines. hand, mapping variables properties, saw Recipe 9.2, result line looking different. default colors aren’t appealing, may want use different palette, shown Figure 9.6, using scale_colour_brewer() scale_colour_manual():\nFigure 9.6: Using palette RColorBrewer\n","code":"\nggplot(dat) +\n  geom_line(aes(x = stage, y = vo2), \n            linetype = \"dashed\", size = 1, colour = \"blue\")\n\nggplot(dat_long) +\n  geom_line(aes(x = stage, y = val, colour = var)) +\n  scale_colour_brewer(palette = \"Set1\")"},{"path":"line-graphs.html","id":"discussion-14","chapter":"9 Line Graphs","heading":"9.3.3 Discussion","text":"set single constant color lines, specify colour outside aes(). works size, linetype, point shape (Figure 9.7). may also specify grouping variable:\nFigure 9.7: Line graph constant size color (left); supp mapped colour, points added (right)\nrange different linetypes available can seen (Figure 9.8)\nFigure 9.8: different types linetype can use.\n","code":"\n# If both lines have the same properties, you need to specify a variable to\n# use for grouping\n\nggplot(dat_long) +\n  geom_line(aes(x = stage, y = val, group = var),\n            colour = \"darkgreen\", size = 1.5) \n\n# Since supp is mapped to colour, it will automatically be used for grouping\nggplot(dat_long) +\n  geom_line(aes(x = stage, y = val, colour = var), linetype = \"dashed\") +  \n  geom_point(aes(x = stage, y = val, colour = var),shape = 22, size = 3, fill = \"white\")"},{"path":"line-graphs.html","id":"LINE-GRAPH-APPEARANCE-THEME","chapter":"9 Line Graphs","heading":"9.4 Using Themes to Change Overall Appearance of Plot","text":"","code":""},{"path":"line-graphs.html","id":"problem-26","chapter":"9 Line Graphs","heading":"9.4.1 Problem","text":"want use premade themes control overall plot appearance.","code":""},{"path":"line-graphs.html","id":"solution-26","chapter":"9 Line Graphs","heading":"9.4.2 Solution","text":"many premade themes already included ggplot2. default ggplot2 theme theme_grey(), examples also showcase theme_bw(), theme_minimal(), theme_classic().use premade theme, add theme_bw() another theme plot (Figure 9.9):\nFigure 9.9: Scatter plot theme_grey() (default, top left); theme_bw() (top right); theme_minimal() (bottom left); theme_classic() (bottom right)\n","code":"\n# Create the base plot\n\nhw_plot <- ggplot(dat) +\n  geom_line(aes(x = stage, y = vo2)) \n\n# Grey theme (the default)\n\nhw_plot +\n  theme_grey()\n\n# Black-and-white theme\n\nhw_plot +\n  theme_bw()\n\n# Minimal theme without background annotations\n\nhw_plot +\n  theme_minimal()\n\n# Classic theme, with axis lines but no gridlines\n\nhw_plot +\n  theme_classic()"},{"path":"line-graphs.html","id":"LINE-GRAPH-LEARNING-CHECK","chapter":"9 Line Graphs","heading":"9.5 Learning check","text":"learning check 8.9, open practice_script.R.learning check 8.9, open practice_script.R.Import Excel file data/Athlete_1_treadmill.xlsx, sheet raw, assign object dat. See Recipe 5.2. Also import sheet stage file, assign object dat_stage.Import Excel file data/Athlete_1_treadmill.xlsx, sheet raw, assign object dat. See Recipe 5.2. Also import sheet stage file, assign object dat_stage.Rename columns dat (\"time\", \"bf\", \"vo2_norm\", \"rer\", \"vo2\", \"vco2\", \"ve\", \"hr\"), respectively. See Recipe 6.2.Rename columns dat (\"time\", \"bf\", \"vo2_norm\", \"rer\", \"vo2\", \"vco2\", \"ve\", \"hr\"), respectively. See Recipe 6.2.Remove first row dat data, useless. See Recipe 6.3.Remove first row dat data, useless. See Recipe 6.3.Convert variable time dat numeric seconds, variables numeric. See Recipe 6.6 6.5, respectively.Convert variable time dat numeric seconds, variables numeric. See Recipe 6.6 6.5, respectively.Create variable called stage, stage represents 3:30 min worth VO2 data. See Recipe 6.7.Create variable called stage, stage represents 3:30 min worth VO2 data. See Recipe 6.7.stage, create variable called row_id, essentially represents number 5 sec windows stage. See Recipe 7.5 7.8.stage, create variable called row_id, essentially represents number 5 sec windows stage. See Recipe 7.5 7.8.stage, remove data 3 3:30min. See Recipe 7.8 7.6.2.stage, remove data 3 3:30min. See Recipe 7.8 7.6.2.stage, keep last six rows data. See Recipe 7.8 6.3.stage, keep last six rows data. See Recipe 7.8 6.3.stage, calculate variables mean last six rows data. See Recipe 7.8 7.7. Assign table object called dat_summ.stage, calculate variables mean last six rows data. See Recipe 7.8 7.7. Assign table object called dat_summ.Merge two tables dat_summ dat_stage, common variable called stage. See Recipe 7.9. Assign table object called df_plot.Merge two tables dat_summ dat_stage, common variable called stage. See Recipe 7.9. Assign table object called df_plot.Using df_plot, make line plot speed x axis, vo2 y axis, assign object called f. See Recipe 9.1.Using df_plot, make line plot speed x axis, vo2 y axis, assign object called f. See Recipe 9.1.Save image f file called myfig.png. See Recipe 8.8.Save image f file called myfig.png. See Recipe 8.8.must wondering, can’t see figure. must print picture? See Recipe 2.3.must wondering, can’t see figure. must print picture? See Recipe 2.3.Download solution learning check .Download solution learning check .","code":""},{"path":"your-assignment.html","id":"your-assignment","chapter":"10 Your Assignment","heading":"10 Your Assignment","text":"assignment designed create graphs visualize results FMS Incremental Treadmill Test analyses. two things note:graphs created, export paste word assignment document.graphs created, export paste word assignment document.Submit code together assignments onto FASER.Submit code together assignments onto FASER.assignment EASY!!! asking copy paste relevant recipes learned, edit relevant values function’s arguments. example, see value XXX, asking replace relevant value. going ask create codes scratch. cruel.assignment, follow steps:desktop’sse201 folder, created learning check 4.2.desktop’sse201 folder, created learning check 4.2.Create project called assignment inside folder. See Recipe 4.2.Create project called assignment inside folder. See Recipe 4.2.Download R script link assignment_analysis.R. Save script se201/assignment folder. open , see codes .Download R script link assignment_analysis.R. Save script se201/assignment folder. open , see codes .Inside se201/assignment folder, create data folder. Put raw Excel data data folder. raw Excel data assignment SE201 Moodle>Assessment Information.","code":""},{"path":"your-assignment.html","id":"tasks-to-complete","chapter":"10 Your Assignment","heading":"10.1 Tasks to complete","text":"1: Import data. Replace XXX Excel file’s name appropriate sheet name. See Recipe 5.2.2: Individual FMS barplot. Plot bar graph task x axis, score y axis, fill colour set different tested side. Give graph succinct title. Make axis texts titles font size 12. Replace XXX appropriate values. See Recipe 8.3. Save plot - See Recipe 8.8.3: Drop jump symmetry. Calculate maximal vertical acceleration good bad leg. use calculate symmetry index single-leg drop land. Replace XXX appropriate values. See Recipe 7.5.4: Rename columns. Rename columns lower cases, without white spaces. See Recipe 6.2.5: Maker characters numeric. Replace XXX appropriate function convert columns apart time character numbers. See Recipe 6.5.6: Find average 30 sec value (2:30 3:00min) per stage variables. Replace XXX appropriate values. See Recipe 7.8.7: Combine two tables. Merge average data Task 4 object called dat_stage along common header. Replace XXX appropriate values. See Recipe 7.9.8: Make lactate graph. Plot line graph speed x axis, lactacte y axis, line colour blue. Give graph succinct title. Make axis texts titles font size 12. Replace XXX appropriate values. See Recipes 9.1, 9.3. Save plot - See Recipe 8.8.9: Make heart rate graph. Plot line graph speed x axis, hr y axis, line colour blue. Give graph succinct title. Make axis texts titles font size 12. Replace XXX appropriate values. See Recipes 9.1, 9.3. Save plot - See Recipe 8.8.10: Export dat_vo2_comb dataframe excel table. result can used fill “stage stage results” assignment incremental treadmill test. Replace XXX name dataframe wanting export. See data exported . See Recipe 5.3.","code":""},{"path":"your-assignment.html","id":"codes","chapter":"10 Your Assignment","heading":"10.2 Codes","text":"codes see script downloaded.","code":"\n\n\n## -----------------------------------------------------------------------------\n\n## load up the packages we will need\n\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse, # All purpose wrangling for dataframes\n               lubridate, # Time\n               tibbletime,\n               openxlsx) # writing excel documents\n\n## Custom function to get interection between two lines\n## To get Lactate and Anaerobic Threshold values\n## Ignore the complexity, highlight between Start and End, Run -----------------\n\n## Start ----------------\ncurve_intersect <- function (curve1, curve2, empirical = TRUE, domain = NULL) \n{\n  if (!empirical & missing(domain)) {\n    stop(\"'domain' must be provided with non-empirical curves\")\n  }\n  if (!empirical & (length(domain) != 2 | !is.numeric(domain))) {\n    stop(\"'domain' must be a two-value numeric vector, like c(0, 10)\")\n  }\n  if (empirical) {\n    curve1_f <- approxfun(curve1$x, curve1$y, rule = 2)\n    curve2_f <- approxfun(curve2$x, curve2$y, rule = 2)\n    point_x <- uniroot(function(x) curve1_f(x) - curve2_f(x), \n                       c(min(curve1$x), max(curve1$x)))$root\n    point_y <- curve2_f(point_x)\n  }\n  else {\n    point_x <- uniroot(function(x) curve1(x) - curve2(x), \n                       domain)$root\n    point_y <- curve2(point_x)\n  }\n  return(list(x = point_x, y = point_y))\n}\n## End ----------------\n\n## Import data \n\n### Import the sheet with the Vo2 data\ndat_vo2 <-  read.xlsx (xlsxFile = \"data/XXX.xlsx\",\n                       sheet = \"XXX\")\n\n### Import the sheet with the lactate data\ndat_stage <-  read.xlsx (xlsxFile = \"data/XXX.xlsx\",\n                       sheet = \"XXX\")\n\n### Import individual FMS data\ndat_fms_indv <-  read.xlsx (xlsxFile = \"data/XXX.xlsx\",\n                       sheet = \"XXX\")\n\n### Import drop jump data\ndat_imu <-  read.xlsx (xlsxFile = \"data/XXX.xlsx\",\n                       sheet = \"XXX\")\n\n## Analyze FMS data ------------------------------------------------------------\n\n### Plot group FMS \n\nplot_fms_indv <- ggplot(XXX) +\n  geom_col(aes(x = XXX, y = XXX, fill = XXX), position = \"dodge\")\n\nggsave(filename = \"ind_fms.png\", \n       plot = plot_fms_indv, # the name of the image object you created above.\n       width = 15, \n       height = 8, \n       unit = \"cm\", \n       dpi = 200)\n\n## Analyze drop jump data ------------------------------------------------------\n\n# Maximal bad leg impact value\nmax_bad_ampl <- max(df_imu$XXX)\n\n# Maximal good leg impact value\nmax_good_ampl <- max(df_imu$XXX)\n\n# Symmetry index \n\nsymmmetry_index <- \n  ((2* (max_bad_ampl - max_good_ampl))/(max_bad_ampl + max_good_ampl)) * 100\n\n\nsymmmetry_index\n\n## Analyze VO2 data ------------------------------------------------------------\n\n### Rename column names of Vo2 data \n\nnew_names <- c()\n\ncolnames (dat_vo2)  <- new_names\n\n### Remove first row of Vo2 data\n\ndat_vo2 <- dat_vo2 %>% \n  slice (-c(1))\n\n### Convert column type of Vo2 data \n\ndat_vo2 <-  dat_vo2 %>%\n  mutate (bf = XXX (bf),\n          vo2_norm = XXX(vo2_norm),\n          rer = XXX(rer),\n          vo2 = XXX(vo2),\n          vco2 = XXX(vco2),\n          ve = XXX(ve),\n          hr = XXX(hr)) %>%\n  # Convert time to seconds\n  mutate (time = time %>% \n            str_squish() %>% \n            ms() %>% \n            as.period(unit = \"sec\") %>% \n            as.numeric ()) \n\n### Create a \"stage\" variable in Vo2 data\n\ndat_vo2 <- dat_vo2 %>%\n  mutate (stage = cut_interval(time, length = 210, labels = FALSE))\n\n### Calculate average 30s data per stage of Vo2 data \n\ndat_vo2_summ <- dat_vo2 %>%\n  group_by(XXX) %>% # for each group\n  mutate (row_id = row_number()) %>%\n  filter (row_id < XXX) %>% # throw away all data between 3 to 3:30 min\n  slice_tail (n = XXX)%>% # keep last 30 sec per stage\n  summarise (bf = mean (bf),\n             vo2_norm = mean (vo2_norm),\n             rer = mean (rer),\n             vo2 = mean (vo2),\n             vco2 = mean (vco2),\n             ve = mean (ve),\n             hr = mean (hr))\n\n\n### Combine Vo2 staged data with lactate data \n\ndat_vo2_comb <- dat_vo2_summ %>%\n  inner_join(dat_stage, by = \"XXX\")\n\n### Plot\n\n#### Lactate (Task 9)\n\nf <- ggplot (dat_vo2_comb) +\n  geom_line (aes (x = XXX, y = XXX), colour = \"XXX\", size = 1.5) + \n  labs (x = \"Speed (km/h)\",\n        y = \"Lactate (mmol)\") +\n  theme_bw() + \n  labs (title = \"XXX\") + \n  theme(axis.text.x = element_text(size = XXX),\n        axis.text.y = element_text(size = XXX),  \n        axis.title.x = element_text(size = XXX),\n        axis.title.y = element_text(size = XXX))\n\nggsave(filename = \"lactate.png\", \n       plot = f, # the name of the image object you created above.\n       width = 8, \n       height = 8, \n       unit = \"cm\", \n       dpi = 200)\n\n#### Heart rate \n\nf <- ggplot (dat_vo2_comb) +\n  geom_line (aes (x = XXX, y = XXX), colour = \"XXX\", size = 1.5) + \n  labs (x = \"Speed (km/h)\",\n        y = \"Heart Rate (bpm)\") +\n  theme_bw() + \n  labs (title = \"XXX\") + \n  theme(axis.text.x = element_text(size = XXX),\n        axis.text.y = element_text(size = XXX),  \n        axis.title.x = element_text(size = XXX),\n        axis.title.y = element_text(size = XXX))\n\nggsave(filename = \"heartrate.png\", \n       plot = f, # the name of the image object you created above.\n       width = 8, \n       height = 8, \n       unit = \"cm\", \n       dpi = 200)\n\n#### Export table \n\nwrite.xlsx(x = XXX,\n           sheetName = \"vo2\",\n           file = \"data/vo2_table.xlsx\")\n\n## Bonus Codes to help you -----------------------------------------------------\n\n### Click on everything below and run\n\n\n### Get VO2 max , VO2 max relative\n\nrolling_mean6 <- rollify(mean, window = 6)\n\nraw_roll <- dat_vo2 %>%\n  arrange (desc (time)) %>%\n  mutate_at (vars(bf:hr), rolling_mean6) %>%\n  na.omit() %>%\n  summarise_at(vars(bf:hr), max, na.rm = TRUE) %>%\n  mutate (vo2 = vo2/1000)\n\ncat (\"The relative peak O2 uptake is:\", raw_roll$vo2_norm, \"(ml/kg/min)\")\ncat (\"The absolute peak O2 uptake is:\", raw_roll$vo2, \"(L/min)\")\n\n### Get max aerobic speed\n\n#### Get maximal stage completed number\nmax_stage <- max (dat_vo2$stage)\n\n#### Find number of rows in final stage\ndat_vo2_last <- dat_vo2 %>%\n  filter (stage == max_stage)\n\n#### Calculate based on rows the proportion of stage completed\nlast_stage_prop <- nrow (dat_vo2_last)/42\n\n#### Get the speed increment, which should be even across all stage\nincrement <- mean (diff(dat_vo2_comb$speed, lag = 1))\n\n#### Get the maximal aerobic speed\nans <-  last_stage_prop * increment\nmax_aerobic_speed <- ans + max (dat_vo2_comb$speed)\n\ncat (\"The maximal aerobic speed:\", max_aerobic_speed,  \"(Km/h)\")\n\n\n### Get Lactate and Anaerobic Thresold\n\nm <- loess (lactate ~ speed, data = dat_vo2_comb)\nmin.speed <- ceiling (min (dat_vo2_comb$speed))\nmax.speed <- floor (max (dat_vo2_comb$speed))\nn_points <- 100\n\nnew_lac <- data.frame (speed = seq (min.speed, max.speed, length.out = n_points))\nnew_lac$y <- predict (m, newdata = new_lac)\ncolnames(new_lac)[1] <- \"x\"\n\n#### Threshold values\n\nlactate_thres <- data.frame (x = seq (min.speed, max.speed, length.out = n_points),\n                             y = 2)\n\nanaerobic_thres <- data.frame (x = seq (min.speed, max.speed, length.out = n_points),\n                               y = 4)\n#### Speed at thresold\n\nspeed_at_lac_thres <- curve_intersect(new_lac, lactate_thres)$x\nspeed_at_ane_thres <- curve_intersect(new_lac, anaerobic_thres)$x\n\n### Get HR at thresholds\n\nm <- loess (hr ~ speed, data = dat_vo2_comb)\n\nnew_hr <- data.frame (speed = seq (min.speed, max.speed, length.out = n_points))\nnew_hr$y <- predict (m, newdata = new_hr)\ncolnames(new_hr)[1] <- \"x\"\n\n\nhr_at_lac_thres <- new_hr[which.min(abs(new_hr$x -speed_at_lac_thres)), \"y\"] %>%\n  round (0)\nhr_at_ane_thres <- new_hr[which.min(abs(new_hr$x -speed_at_ane_thres)), \"y\"] %>%\n  round \n\npi <- data.frame(Variable = c(\"Lactate Threshold\", \"Anaerobic Threshold\"),\n                 Speed = c(speed_at_lac_thres, speed_at_ane_thres ),\n                 HR = c(hr_at_lac_thres, hr_at_ane_thres))\n\ncat (\"The speed (km/h) and heart rate (b/min) at lactate threshold are:\", pi[1,2], \"and\", pi[1,3])\ncat (\"The speed (km/h) and heart rate (b/min) at anaerobic threshold are:\", pi[2,2], \"and\", pi[2,3])\n\ndf_plot <- data.frame(speed = new_lac$x,\n                      lactate = new_lac$y,\n                      hr = new_hr$y,\n                      speed_lac = speed_at_lac_thres,\n                      speed_ane = speed_at_ane_thres) %>%\n  pivot_longer(cols = lactate:hr,\n               names_to = \"var\",\n               values_to = \"val\")\n\nggplot (df_plot) +\n  geom_line (aes (x = speed, y = val)) + \n  geom_vline(xintercept = speed_at_lac_thres, color = \"blue\", linetype = \"dashed\") + \n  geom_vline(xintercept = speed_at_ane_thres, color = \"red\", linetype = \"dashed\") + \n  facet_wrap(~var, ncol = 2, scales = \"free\") +\n  labs (x = \"Speed\",\n        y = \"Values\") +\n  theme_bw() + \n  labs (title = \"Plot of Treadmill test\") + \n  theme(axis.text.x = element_text(size = 12),\n        axis.text.y = element_text(size = 12),  \n        axis.title.x = element_text(size = 16),\n        axis.title.y = element_text(size = 16))"}]
